[{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package performs revision analysis offers detailed summary output including generation visual report. composed selection parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. mean inefficiency preliminary estimates whether revisions predictable way. package uses efficient libraries JDemetra+ v3. built mostly based Eurostat’s technical reports D. Ares L. Pitton (2013). next section helps installation package. third section describes use tool give important details main functions. particular, important mention beforehand input data must first set specific format described sub-section input data. fourth section theoretical describes test performed main function revision_analysis() (also performed individually) interpret . Finally, find reference papers last section.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"installation-settings","dir":"Articles","previous_headings":"","what":"Installation settings","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package relies Java libraries JDemetra+ v3 package rjd3toolkit rjdverse. Prior installation, must ensure Java version >= 17.0 computer. need use portable version Java fill request, can follow instructions installation manual RJDemetra. addition Java version >= 17.0, must recent version R packages rJava (>= 1.0.6) RProtobuf (>=0.4.17) can download CRAN. Depending current version R, might also need install another version Rtools. (>= 3.6). package also depends package rjd3toolkit must install GitHub prior rjd3revsions. Note depending R packages already installed computer, might also asked install re-install packages CRAN. Finally, package also suggests R packages formattable kableExtra (readxl import input data Excel) downloadable CRAN. invited install enhanced formatting output (.e., meaningful colors).","code":"remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3revisions@*release\", build_vignettes = TRUE)"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"input_format","dir":"Articles","previous_headings":"Usage","what":"Input data","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data must specific format taken reference documents Ares Pitton (2013). must specific column names date formats table . Note missing values can either mentioned NA (example ) included input best convenience user.","code":""},{"path":[]},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"format-3-horizontal-view","dir":"Articles","previous_headings":"Usage > Input data","what":"Format 3: horizontal view","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages (see section vintages & revisions) later . plan use generic function, ’ll first need put input data data.frame R example .","code":"# Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) ) print(long_view) #>      rev_date time_period obs_values #> 1  2022-07-31      2022Q1        0.8 #> 2  2022-07-31      2022Q2        0.2 #> 3  2022-07-31      2022Q3         NA #> 4  2022-07-31      2022Q4         NA #> 5  2022-08-31      2022Q1        0.8 #> 6  2022-08-31      2022Q2        0.1 #> 7  2022-08-31      2022Q3         NA #> 8  2022-08-31      2022Q4         NA #> 9  2022-09-30      2022Q1        0.7 #> 10 2022-09-30      2022Q2        0.1 #> 11 2022-09-30      2022Q3         NA #> 12 2022-09-30      2022Q4         NA #> 13 2022-10-31      2022Q1        0.7 #> 14 2022-10-31      2022Q2        0.2 #> 15 2022-10-31      2022Q3        0.5 #> 16 2022-10-31      2022Q4         NA #> 17 2022-11-30      2022Q1        0.7 #> 18 2022-11-30      2022Q2        0.2 #> 19 2022-11-30      2022Q3        0.5 #> 20 2022-11-30      2022Q4         NA #> 21 2022-12-31      2022Q1        0.7 #> 22 2022-12-31      2022Q2        0.3 #> 23 2022-12-31      2022Q3        0.7 #> 24 2022-12-31      2022Q4         NA #> 25 2023-01-31      2022Q1        0.7 #> 26 2023-01-31      2022Q2        0.2 #> 27 2023-01-31      2022Q3        0.7 #> 28 2023-01-31      2022Q4        0.4 #> 29 2023-02-28      2022Q1        0.7 #> 30 2023-02-28      2022Q2        0.3 #> 31 2023-02-28      2022Q3        0.7 #> 32 2023-02-28      2022Q4        0.3  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                                    .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                                    .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") print(horizontal_view) #>            2022Q1 2022Q2 2022Q3 2022Q4 #> 2022-07-31    0.8    0.2     NA     NA #> 2022-08-31    0.8    0.1     NA     NA #> 2022-09-30    0.7    0.1     NA     NA #> 2022-10-31    0.7    0.2    0.5     NA #> 2022-11-30    0.7    0.2    0.5     NA #> 2022-12-31    0.7    0.3    0.7     NA #> 2023-01-31    0.7    0.2    0.7    0.4 #> 2023-02-28    0.7    0.3    0.7    0.3  # Vertical format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                         nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                              \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") print(vertical_view) #>        2022-07-31 2022-08-31 2022-09-30 2022-10-31 2022-11-30 2022-12-31 #> 2022Q1        0.8        0.8        0.7        0.7        0.7        0.7 #> 2022Q2        0.2        0.1        0.1        0.2        0.2        0.3 #> 2022Q3         NA         NA         NA        0.5        0.5        0.7 #> 2022Q4         NA         NA         NA         NA         NA         NA #>        2023-01-31 2023-02-28 #> 2022Q1        0.7        0.7 #> 2022Q2        0.2        0.3 #> 2022Q3        0.7        0.7 #> 2022Q4        0.4        0.3"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"processing","dir":"Articles","previous_headings":"Usage","what":"Processing","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, create vintages: possibly inspect revisions perform revision analysis: Finally create report get summary results, can use function revision_analysis export report pdf html format, can use function render_report","code":"library(\"rjd3revisions\") long_view <- rjd3revisions:::simulate_long(periodicity = 4L)  vintages <- create_vintages(long_view, type = \"long\", periodicity = 4L) # vintages <- create_vintages_from_xlsx(file = \"myinput.xlsx\", type = \"long\", \"Sheet1\", periodicity = 4, format_date = \"%d/%m/%Y\") # vintages <- create_vintages_from_csv(file = \"myinput.csv\", periodicity = 4, sep = \"\\t\", format_date = \"%Y-%m-%d\")  print(vintages) # extract of the vintages according to the different views #> $extract #> [1] TRUE #>  #> $long_view #>      revdate       time obs_values #> 1 2024-09-05 2022-07-01  -315.1239 #> 2 2024-09-05 2022-10-01  -322.8874 #> 3 2024-09-05 2023-01-01  -341.8464 #> 4 2024-09-05 2023-04-01  -347.8285 #> 5 2024-09-05 2023-07-01  -349.1800 #> 6 2024-09-05 2023-10-01  -351.9910 #> 7 2024-09-05 2024-01-01  -372.3532 #> 8 2024-09-05 2024-04-01  -380.8969 #>  #> $vertical_view #>         2020-12-16 2024-08-17 2024-09-05 #> 2022 Q3         NA  -316.8669  -315.1239 #> 2022 Q4         NA  -318.3561  -322.8874 #> 2023 Q1         NA  -345.1119  -341.8464 #> 2023 Q2         NA  -347.8092  -347.8285 #> 2023 Q3         NA  -348.1083  -349.1800 #> 2023 Q4         NA  -354.0360  -351.9910 #> 2024 Q1         NA  -377.2230  -372.3532 #> 2024 Q2         NA  -379.2215  -380.8969 #>  #> $horizontal_view #>            2022-07-01 2022-10-01 2023-01-01 2023-04-01 2023-07-01 2023-10-01 #> 2020-12-16         NA         NA         NA         NA         NA         NA #> 2024-08-17  -316.8669  -318.3561  -345.1119  -347.8092  -348.1083   -354.036 #> 2024-09-05  -315.1239  -322.8874  -341.8464  -347.8285  -349.1800   -351.991 #>            2024-01-01 2024-04-01 #> 2020-12-16         NA         NA #> 2024-08-17  -377.2230  -379.2215 #> 2024-09-05  -372.3532  -380.8969 #>  #> $diagonal_view #>          Release[1] Release[2] Release[3] #> 2022 Q3   3.3058634   8.324777   6.586939 #> 2022 Q4  10.7845221   6.739404   7.520663 #> 2023 Q1   3.8511455   2.350484   2.423819 #> 2023 Q2  -0.9679449  -1.562314  -1.141943 #> 2023 Q3  -4.2868126  -6.310262  -5.786982 #> 2023 Q4  -6.1484923  -7.316339  -7.574506 #> 2024 Q1 -15.4538413 -12.731571 -12.703376 #> 2024 Q2 -20.1790148 -19.982189 -18.619871 summary(vintages) # metadata about vintages #> Number of releases:  10 #> Covered period: #>      From:  2012 1 #>      To:  2024 2 #> Frequency:  4 revisions <- get_revisions(vintages, gap = 1)  # plot(revisions)  # print(revisions) # extract of the revisions according to the different views # summary(revisions) # metadata about revisions rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3)  summary(rslt) #> [[1]] print(rslt) #> $call #> revision_analysis(vintages = vintages, gap = 1, view = \"diagonal\",  #>     n.releases = 3) #>  #> $descriptive_statistics #>                           [Release[2]]-[Release[1]] [Release[3]]-[Release[2]] #> N                                            50.000                    36.000 #> mean revision                                -0.071                     0.073 #> st.dev.                                       2.712                     1.176 #> min                                          -4.531                    -2.107 #> q.10                                         -2.932                    -1.435 #> median                                       -0.161                     0.067 #> q.90                                          2.817                     1.522 #> max                                           9.020                     2.720 #> % positive                                    0.460                     0.556 #> % zero                                        0.000                     0.000 #> % negative                                    0.540                     0.444 #> mean absolute revision                        2.184                     0.932 #> root mean square revision                     2.686                     1.162 #>  #> $parametric_analysis #>                                            Transf. [Release[2]]-[Release[1]] #> Relevancy - Theil U2                          None              Good (0.405) #> Bias1 T-test                                  None              Good (0.853) #> Bias2 Augmented T-test                        None              Good (0.789) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.510) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.489) #> Efficiency1 (Ols R on P) - Mean            Delta 1               Bad (0.001) #> Efficiency1 (Ols R on P) - Reg.            Delta 1            Severe (0.000) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None         Uncertain (0.030) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (1.000) #> Orthogonality4 Seasonality (Friedman)      Delta 1              Good (0.475) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1            Severe (0.000) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.998) #>                                            [Release[3]]-[Release[2]] #> Relevancy - Theil U2                                    Good (0.117) #> Bias1 T-test                                            Good (0.711) #> Bias2 Augmented T-test                                  Good (0.710) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.631) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.355) #> Efficiency1 (Ols R on P) - Mean                         Good (0.930) #> Efficiency1 (Ols R on P) - Reg.                         Good (0.841) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.774) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.100) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.774) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.900) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.774) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.100) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.772) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                   Good (0.226) #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.958) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.116) render_report(     rslt,     output_file = \"my_report\",     output_dir = \"C:/Users/xxx\",     output_format = \"pdf_document\" )"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"vintages","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Vintages & revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, must first create object class rjd3rev_vintages can run revision analysis. function create_vintages() (, alternatively, create_vintages_from_xlsx() create_vintages_from_csv()) create object input data display vintages considering three different data structures views: vertical, horizontal diagonal. vertical view shows observed values time period different vintages. approach robust changes base year data redefinition example used analyse revisions resulting benchmark revision. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. Example vertical view horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards ‘true value’. Horizontal tables just transpose vertical tables used tests ‘revision_analysis’. Example horizontal view diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study (case official statistics). However, approach requires particularly vigilant case change base year data redefinition. Example diagonal view Note argument function create_vintages(), argument vintage_selection allows limit range revision dates consider needed. See ?create_vintages details. Revisions easily calculated vintages choosing gap consider. function get_revisions() display revisions according view. just informative function need run prior revision analysis.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"revision-analysis-reporting","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Revision analysis & reporting","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"function revision_analysis() main function package. provides descriptive statistics performs battery parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. Parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. function robust. reasons, test fails process, just skipped warning sent users possible cause failure. tests performed usual. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests. specifically, focus augmented Dickey-Fuller (ADF) test test presence unit root , cointegration, proceed ADF test residuals OLS regression two vintages. results tests also made available output function (section ‘varbased’). contrast, choice log-transformation left discretion users based knowledge series diagnostics various tests. default, log-transformation considered. part arguments revision_analysis() function, can choose view gap consider, restrict number releases investigation diagonal view selected /change default setting prior transformation data (including possibility add prior log-transformation data). function render_report() applied output revision_analysis() generate enhanced HTML report including formatted summary results full explanations test (also included vignette ). formatted summary results display p-value test (except Theil’s tests value statistics provided) interpretation. appreciation ‘good’, ‘uncertain’, ‘bad’ ‘severe’ indeed associated test following usual statistical interpretation p-values orientation tests. allows quick visual interpretation results similar done GUI JDemetra+. addition function revision_analysis(), user can also perform tests individually want . list functions available package (therefore finding different functions corresponding individual tests), can Use help(‘name functions’) ?‘name functions’ information examples various functions.","code":"ls(\"package:rjd3revisions\") #>  [1] \"bias\"                      \"check_date_month\"          #>  [3] \"check_date_quarter\"        \"check_date_year\"           #>  [5] \"check_format_date\"         \"check_horizontal\"          #>  [7] \"check_long\"                \"check_vertical\"            #>  [9] \"cointegration\"             \"create_vintages\"           #> [11] \"create_vintages_from_csv\"  \"create_vintages_from_xlsx\" #> [13] \"descriptive_statistics\"    \"efficiencyModel1\"          #> [15] \"efficiencyModel2\"          \"get_revisions\"             #> [17] \"orthogonallyModel1\"        \"orthogonallyModel2\"        #> [19] \"render_report\"             \"revision_analysis\"         #> [21] \"signalnoise\"               \"slope_and_drift\"           #> [23] \"theil\"                     \"theil2\"                    #> [25] \"unitroot\"                  \"vecm\""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"detailed results test part output returned function revision_analysis(). Alternatively, functions associated individual test give result specific test. addition visual report can get applying function render_report() output function revision_analysis(), can also apply usual summary() print() functions output. function summary(), particular, print formatted table report main results. print() provide unformatted information together extra ones. Finally plot() function applied output function get_revisions() provide visual revisions time.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"tests-description-and-interpretation","dir":"Articles","previous_headings":"","what":"Tests description and interpretation","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Recall purpose parametric tests described : check relevancy preliminary estimates detect potential mean regression bias measure efficiency preliminary estimates (.e., whether revisions somehow predictable)","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"theils-inequality-coefficient","dir":"Articles","previous_headings":"Tests description and interpretation > Relevancy","what":"Theil’s Inequality Coefficient","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"context revision analysis, Theil’s inequality coefficient, also known Theil’s U, provides measure accuracy set preliminary estimates (P) compared latter version (L). exists definitions Theil’s statistics leading different interpretation results. package, two definitions considered. first statistic, U1, given $$ U_1=\\frac{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}(L_t-P_t)^2}}{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}L_t^2}+\\sqrt{\\frac{1}{n}\\sum^n_{t=1}P_t^2}} \\\\ \\\\ $$ U1 bounded 0 1. closer value U1 zero, better forecast method. However, classic definition Theil’s statistic suffers number limitations. particular, set near zero preliminary estimates always give value U1 statistic close 1 even though close latter estimates. second statistic, U2, given U2=∑t=1n(Pt+1−Lt+1Lt)2∑t=1n(Lt+1−LtLt)2 U_2=\\frac{\\sqrt{\\sum^n_{t=1}\\left(\\frac{P_{t + 1}-L_{t + 1}}{L_t}\\right)^2}}{\\sqrt{\\sum^n_{t=1}\\left(\\frac{L_{t + 1}-L_t}{L_t}\\right)^2}}  interpretation U2 differs U1. value 1 longer upper bound statistic threshold () preliminary estimates less () accurate naïve random walk forecast repeating last observed value (considering Pt+1=LtP_{t + 1}=L_t). Whenever can calculated (Lt≠0∀tL_t \\neq 0 ~\\forall t), U2 statistic preferred option evaluate relevancy preliminary estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"bias","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Bias","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"bias preliminary estimates may indicate inaccurate initial data inefficient compilation methods. However, must cautious bias shown statistically significant intend correct . Biases may change overtime, might correct errors longer apply. long interval, changes methodology definitions may also occur valid reasons expect non-zero mean revision.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"t-test-and-augmented-t-test","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"T-test and Augmented T-test","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether mean revision statistically different zero sample n, employ conventional t-statistic t=R¯s2/n t=\\frac{\\overline{R}}{\\sqrt{s^2/n}}  null hypothesis bias equal zero rejected, may give insight whether bias exists earlier estimates. t-test equivalent fitting linear regression revisions constant (.e. mean). Assumptions gaussianity revisions implied. One can release assumption autocorrelation adding model. Hence Rt=μ+εt,t=1,...,n R_t=\\mu+\\varepsilon_t, ~~t=1,...,n  errors thought serially correlated according AR(1) model, εt=γεt+ut,|γ|<1andut∼iid \\varepsilon_t=\\gamma\\varepsilon_t+u_t, ~~~ |\\gamma|<1 ~~u_t \\sim{iid}   auto-correlation error terms reduces number independent observations (degrees freedom) factor n(1−γ)(1+γ)n\\frac{(1-\\gamma)}{(1+\\gamma)} thus, variance mean adjusted upward accordingly. Hence, Augmented t-test calculated tadj=R¯s2(1+γ̂)n(1−γ̂) t_{adj}=\\frac{\\overline{R}}{\\sqrt{\\frac{s^2(1+\\hat{\\gamma})}{n(1-\\hat{\\gamma})}}}  γ̂=∑t=1n−1(Rt−R¯)(Rt+1−R¯)∑t=1n(Rt−R¯)2 \\hat{\\gamma}=\\frac{\\sum^{n-1}_{t=1}(R_t-\\overline{R})(R_{t + 1}-\\overline{R})}{\\sum^n_{t=1}(R_t-\\overline{R})^2}","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"slope-and-drift","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"Slope and drift","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model latter vintage (L) preliminary vintage (P) estimate intercept (drift) β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Lt=β0+β1Pt+εt L_t=\\beta_0+\\beta_1P_t+\\varepsilon_t  (augmented) t-test revisions gives information mean bias, regression enables assess mean regression bias. regression bias occur, example, preliminary estimates tend low latter estimates relatively high high latter estimates relatively low. case, may result positive value intercept value β1<1\\beta_1<1. evaluate whether mean regression bias present, employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β̂1=1\\hat{\\beta}_1 = 1. Recall OLS regressions always come along rather strict assumptions. Users check diagnostics draw necessary conclusions .","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"efficiency","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Efficiency","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Efficiency tests evaluate whether preliminary estimates “efficient” forecast latter estimates. information used efficiently time preliminary estimate, revisions predictable therefore neither correlated preliminary estimates display relationship one vintage another. section focuses two points. Predictability revisions tested even Orthogonality SignalVSNoise sections.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-on-previous-estimates","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions on previous estimates","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions (R) preliminary vintage (P) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rt=β0+β1Pt+εt,t=1,...,n R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n  revisions affected preliminary estimates, means efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-from-latter-vintages-on-revisions-from-the-previous-vintages","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions from latter vintages on revisions from the previous vintages","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions previous vintages (Rv−1R_{v-1}) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rv,t=β0+β1Rv−1,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\beta_1R_{v-1,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"orthogonality","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Orthogonality","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Orthogonality tests evaluate whether revisions older vintages affect latter revisions. section also includes autocorrelation seasonality tests given set revisions. significant correlation revisions subsequent periods, may witness degree predictability revision process.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-previous-revisions-rv_1-rv_2rv_p","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on previous revisions (Rv_1, Rv_2,…Rv_p)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions p previous vintages (Rv−1,...,Rv−pR_{v-1}, ..., R_{v-p}) estimate intercept β0\\beta_0 slope coefficients β1,...,βp\\beta_1, ..., \\beta_p OLS. model Rv,t=β0+∑=1pβiRv−,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\sum^p_{=1}\\beta_{}R_{v-,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test intercept parameter null hypothesis β0=0\\beta_0 = 0 F-test check null hypothesis β1=β2=...=βp=0\\beta_1 = \\beta_2=...=\\beta_p=0. Diagnostics residuals verified","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-revisions-from-a-specific-vintage-rv_k","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on revisions from a specific vintage (Rv_k)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions specific vintage (Rv−kR_{v-k}) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rv,t=β0+β1Rv−k,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\beta_1R_{v-k,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-autocorrelations-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of autocorrelations in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether autocorrelation present revisions, employ Ljung-Box test. Ljung-Box test considers together group autocorrelation coefficients certain lag k therefore sometimes referred portmanteau test. purpose revision analysis, expect relatively small number observations, decided restrict number lags considered k=2k=2. Hence, users can also make distinction autocorrelation seasonal lags (see seasonality tests ). null hypothesis autocorrelation. test statistic given Q=n(n+2)∑=1kρ̂i2n−Q=n(n+2)\\sum^k_{=1}\\frac{\\hat{\\rho}_i^2}{n-}  n sample size, ρ̂i2\\hat{\\rho}_i^2 sample autocorrelation lag k=2k=2 number lags tested. null hypothesis, Q∼χ2(k)Q\\sim\\chi^2(k). Q statistically different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-seasonality-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of seasonality in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether seasonality present revisions, employ two tests: parametric QS test non-parametric Friedman test. Note seasonality tests always performed first-differentiated series avoid misleading results. QS test variant Ljung-Box test computed seasonal lags, consider positive auto-correlations QS=n(n+2)∑=1k[max(0,γ̂.l)]2n−.l QS=n(n+2)\\sum^k_{=1}\\frac{\\left[max(0,\\hat{\\gamma}_{.l})\\right]^2}{n-.l}  k=2k=2, first second seasonal lags considered. Thus, test checks correlation actual observation observations lagged one two years. Note l=12l=12 dealing monthly observations, consider auto-covariances γ̂12\\hat{\\gamma}_{12} γ̂24\\hat{\\gamma}_{24} alone. turn k=4k=4 case quarterly data. null hypothesis autocorrelation seasonal lags, QS∼χmodified2(k)QS\\sim \\chi_{modified}^2(k). elimination negative correlations calls indeed modified χ2\\chi^2 distribution. done using simulation techniques. Friedman test requires distributional assumptions. uses rankings observations. constructed follows. Consider first matrix data {xij}nxk\\{x_{ij}\\}_{nxk} n rows (blocks, .e. number years sample), k columns (treatments, .e., either 12 months 4 quarters, depending frequency data). data matrix needs replaced new matrix {rij}nxk\\{r_{ij}\\}_{nxk}, entry rijr_{ij} rank xijx_{ij} within block . test statistic given Q=n∑j=1k(r̃.j−r̃)21n(k−1)∑=1n∑j=1k(rij−r̃)2 Q=\\frac{n\\sum^k_{j=1}(\\tilde{r}_{.j}-\\tilde{r})^2}{\\frac{1}{n(k-1)}\\sum^n_{=1}\\sum^k_{j=1}(r_{ij}-\\tilde{r})^2}  denominator represents variance average ranking across treatments j relative total. null hypothesis (stable) seasonality, Q∼χ2(k−1)Q\\sim \\chi^2(k-1). non-seasonal autocorrelation tests lower lags, QS Q significantly different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"signal-vs-noise","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Signal vs Noise","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Regression techniques can also used determine whether revisions classified ‘news’ ‘noise’. also closely related notion efficiency developed earlier. correlation revisions preliminary estimates significantly different zero, implies fully utilize information available time preliminary estimates. sense, conclude preliminary estimates better revisions embody noise. model test whether revisions “noise” similar first model established earlier test efficiency: Rt=β0+β1Pt+εt,t=1,...,n R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n  employ F-test parameters test jointly β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. null hypothesis rejected, suggest revisions likely include noise. Diagnostics residuals verified. hand, revisions correlated latter estimates. case, means information becomes available compilation preliminary latter estimates captured estimation process latter estimates. sense, revision process warranted conclude revisions embody news. model test whether revisions “news” Rt=β0+β1Lt+εt,t=1,...,n R_t=\\beta_0+\\beta_1L_t+\\varepsilon_t, ~~t=1,...,n  employ F-test parameters test jointly β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. null hypothesis rejected, good thing suggests revisions incorporate news. Note even reject null hypothesis conclude revisions incorporate news, necessarily mean revisions efficient might still predicted variables included estimation process.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Ares, David. 2013. “Tool Revision Analysis : Technical Report.” DI/06769. DG ESTAT. Cook, Steve. 2019. “Forecast Evaluation Using Theil’s Inequality Coefficients.” Swansea University; https://www.economicsnetwork.ac.uk/showcase/cook_theil. Fixler, Dennis. 2007. “Interpret Whether Revisions Economic Variables Reflect ‘News’ ‘Noise’.” OECD. McKenzie, Richard, Michela Gamba. 2007. “Interpreting Results Revision Analyses: Recommended Summary Statistics.” OECD. Pitton, Laurent, David Ares. 2013a. “Tool Revision Analysis : Regression Based Parametric Analysis.” DI/06769. DG ESTAT. Pitton, Laurent, David Ares. 2013b. “Tool Revision Analysis : VAR Based Models Final Equation.” DI/06769. DG ESTAT. Smyk, Anna, Alain Quartier-la-Tente, Tanguy Barthelemy, Karsten Webel. 2023. “JDemetra+ Documentation.” INSEE; https://jdemetra-new-documentation.netlify.app/.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Corentin Lemasson. Author, maintainer. Tanguy Barthelemy. Author, artist.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lemasson C, Barthelemy T (2024). rjd3revisions: Revision analysis 'JDemetra+ 3.x'. R package version 1.3.1, https://rjdverse.github.io/rjd3revisions/, https://github.com/rjdverse/rjd3revisions.","code":"@Manual{,   title = {rjd3revisions: Revision analysis with 'JDemetra+ 3.x'},   author = {Corentin Lemasson and Tanguy Barthelemy},   year = {2024},   note = {R package version 1.3.1, https://rjdverse.github.io/rjd3revisions/},   url = {https://github.com/rjdverse/rjd3revisions}, }"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"rjd3revisions-","dir":"","previous_headings":"","what":"Revision analysis with JDemetra+ 3.x","title":"Revision analysis with JDemetra+ 3.x","text":"economic indicators published several times given reporting period, entails revisions time horizon changes. rjd3revisions performs battery tests revisions generates report results. various tests enable users detect potential bias sources inefficiency preliminary estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Revision analysis with JDemetra+ 3.x","text":"Running rjd3 packages requires Java 17 higher. set configuration R explained ","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"latest-release","dir":"","previous_headings":"Installation","what":"Latest release","title":"Revision analysis with JDemetra+ 3.x","text":"get current stable version (latest release): GitHub: r-universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3revisions@*release\", build_vignettes = TRUE) install.packages(\"rjd3revisions\", repos = c(\"https://rjdverse.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Revision analysis with JDemetra+ 3.x","text":"can install development version rjd3revisions GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3revisions\")"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Revision analysis with JDemetra+ 3.x","text":"First need get input data set data.frame R specific format . Note missing values can either mentioned NA (example ) included input best convenience user.","code":""},{"path":[]},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"format-3-horizontal-view","dir":"","previous_headings":"Usage","what":"Format 3: horizontal view","title":"Revision analysis with JDemetra+ 3.x","text":"Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages. can create vintages, inspect revisions (optional) make analysis Finally create report get summary results, can use","code":"# Examples  # Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) )  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                             .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                             .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  # Vertical format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                           nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") library(\"rjd3revisions\")  vintages <- create_vintages(long_view, periodicity = 4) # revisions <- get_revisions(vintages, gap = 2) # plot(revisions) rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) #> Warning: Slope and drift could not be performed #> Warning: efficiencyModel1 could not be performed #> Warning: efficiencyModel2 could not be performed #> Warning: orthogonallyModel1 could not be performed #> Warning: orthogonallyModel2 could not be performed render_report(     rslt,     output_file = \"my_report\",     output_dir = tempdir(),     output_format = \"pdf_document\" )  summary(rslt) print(rslt)"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"additional-information","dir":"","previous_headings":"","what":"Additional information","title":"Revision analysis with JDemetra+ 3.x","text":"README.md file gives quick example proceed. Consult vignette (browseVignettes(\"rjd3revisions\")) documentation function (example: ?create_vintages, ?revision_analysis) see current possibilities tool.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"package-maintenance-and-contributing","dir":"","previous_headings":"","what":"Package Maintenance and contributing","title":"Revision analysis with JDemetra+ 3.x","text":"contribution welcome done pull requests /issues. pull requests include updated tests updated documentation. functionality changed, docstrings added updated.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Revision analysis with JDemetra+ 3.x","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"View function for objects of class ","title":"View function for objects of class ","text":"Display different view different panel visualize data table / matrix format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' View(x, type = c(\"all\", \"long\", \"horizontal\", \"vertical\", \"diagonal\"), ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View function for objects of class ","text":"x object class \"rjd3rev_vintages\". type type view display ... arguments passed `View` method.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_vintages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View function for objects of class ","text":"Generate view vintages different format. type argument, can choose view display. can choose long, horizontal, vertical diagonal view.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate bias using t-test and augmented t-test — bias","title":"Estimate bias using t-test and augmented t-test — bias","text":"Estimate bias using t-test augmented t-test","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"bias(revisions.view, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate bias using t-test and augmented t-test — bias","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) bias(revisions$diagonal_view) #>                            N     estimate     stderr      tstat    pvalue #> [Release[2]]-[Release[1]] 40  0.022368195 0.01402391  1.5950046 0.1187842 #> [Release[3]]-[Release[2]] 40 -0.009955077 0.01721515 -0.5782742 0.5664035 #> [Release[4]]-[Release[3]] 40 -0.024183248 0.01459950 -1.6564434 0.1056572 #> [Release[5]]-[Release[4]] 40 -0.018046157 0.01513054 -1.1926974 0.2401940 #>                                 ar(1) stderr.adjusted tstat.adjusted #> [Release[2]]-[Release[1]] -0.09668621      0.01272762       1.757453 #> [Release[3]]-[Release[2]]  0.04752105      0.01805363      -0.551417 #> [Release[4]]-[Release[3]] -0.18644408      0.01208949      -2.000353 #> [Release[5]]-[Release[4]]  0.12971802      0.01723890      -1.046828 #>                           pvalue.adjusted #> [Release[2]]-[Release[1]]      0.08514309 #> [Release[3]]-[Release[2]]      0.58471991 #> [Release[4]]-[Release[3]]      0.05012430 #> [Release[5]]-[Release[4]]      0.30332134"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vector with date — check_date_year","title":"Check vector with date — check_date_year","text":"Useful functions check vector represent dates object","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vector with date — check_date_year","text":"","code":"check_date_year(x)  check_date_quarter(x)  check_date_month(x)  check_format_date(x, date_format = \"%Y-%m-%d\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vector with date — check_date_year","text":"x vector Date, character, integer POSIXt object representing date object date_format character string (vector string) corresponding format(s) used x","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vector with date — check_date_year","text":"boolean","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check vector with date — check_date_year","text":"function check_date_year checks pattern AAAA recognised. , date assimilated first January year AAAA. function check_date_quarter checks quarterly formats. accepted formats (example  third quarter 2000) : * 2000 T3 * 2000 Q3 * 2000t3 * 2000q3 * 2000T3 * 2000Q3 * 2000 t3 * 2000 q3 one previous formats recognised, date assimilated first day quarter year (example 2000 Q3 assimilated 2000-07-01). function check_date_month checks monthly formats. accepted formats (example march 2000) : * 2000 M3 * 2000 M03 * 2000 m3 * 2000 m03 * 2000M3 * 2000M03 * 2000m3 * 2000m03 one previous formats recognised, date assimilated first day month year (example 2000 M3 assimilated 2000-03-01). function check_format_date checks object x match pattern (one patterns) date_format.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vector with date — check_date_year","text":"","code":"# check_date_year --------------------------------------------------  # Good date (representing years) check_date_year(x = c(\"2000\", \"2001\", \"2002\", \"2003\")) #> [1] TRUE check_date_year(x = 2020:2024) #> [1] TRUE  # Bad date check_date_year(x = \"2000 \") #> [1] FALSE check_date_year(x = 1:4) #> [1] FALSE  # check_date_quarter -----------------------------------------------  # Good date check_date_quarter(x = c(\"2000 q2\", \"2000 q3\", \"2000 q4\", \"2001 q1\")) #> [1] TRUE check_date_quarter(x = c(\"2010T1\", \"2010T2\", \"2010T3\", \"2010T4\")) #> [1] TRUE check_date_quarter(x = c(\"2020Q1\", \"2020Q2\", \"2020Q3\", \"2020Q4\")) #> [1] TRUE check_date_quarter(x = c(\"2020Q01\", \"2020Q02\", \"2020Q03\", \"2020Q04\")) #> [1] TRUE  # Bad date check_date_quarter(x = \"2000 \") #> [1] FALSE check_date_quarter(x = 1:4) #> [1] FALSE check_date_quarter(x = \"2000 q 2\") #> [1] FALSE check_date_quarter(x = \"2000 q12\") #> [1] FALSE  # check_date_month -----------------------------------------------  # Good date (representing years) check_date_month(x = c(\"2000 m2\", \"2000 m3\", \"2000 m4\", \"2000 m5\")) #> [1] TRUE check_date_month(x = c(\"2010M9\", \"2010M10\", \"2010M11\", \"2010M12\")) #> [1] TRUE check_date_month(x = c(\"2020M111\", \"2020M12\", \"2021M01\", \"2021M02\")) #> [1] FALSE check_date_month(x = c(\"2020M01\", \"2020M02\", \"2020M03\", \"2020M04\")) #> [1] TRUE  # Bad date check_date_month(x = \"2000 \") #> [1] FALSE check_date_month(x = 1:4) #> [1] FALSE check_date_month(x = \"2000 m 2\") #> [1] FALSE check_date_month(x = \"2000 m13\") #> [1] FALSE  # check_format_date -----------------------------------------------  # Good date (representing years) check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = \"%Y-%m-%d\") #> [1] TRUE check_format_date(x = c(\"01/08/2010\", \"01/09/2010\", \"01/10/2010\", \"01/11/2010\",                         \"01/12/2010\", \"01/01/2011\", \"01/02/2011\", \"01/03/2011\",                         \"01/04/2011\", \"01/05/2011\"),                  date_format = \"%d/%m/%Y\") #> [1] TRUE check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = c(\"%Y-%m-%d\", \"%d/%m/%Y\")) #> [1] TRUE  # Bad date check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = \"%d/%m/%Y\") #> [1] FALSE check_format_date(x = c(\"01/08/2010\", \"01/09/2010\", \"01/10/2010\", \"01/11/2010\",                         \"01/12/2010\", \"01/01/2011\", \"01/02/2011\", \"01/03/2011\",                         \"01/04/2011\", \"01/05/2011\"),                  date_format = \"%Y-%m-%d\") #> [1] FALSE"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check horizontal format — check_horizontal","title":"Check horizontal format — check_horizontal","text":"Check horizontal format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check horizontal format — check_horizontal","text":"","code":"check_horizontal(x, ...)  # S3 method for class 'data.frame' check_horizontal(x, ...)  # S3 method for class 'matrix' check_horizontal(x, date_format = \"%Y-%m-%d\")  # Default S3 method check_horizontal(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check horizontal format — check_horizontal","text":"x formatted data.frame containing input horizontal format ... Arguments passed `check_horizontal` according class object `x` date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check horizontal format — check_horizontal","text":"input date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check horizontal format — check_horizontal","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) horizontal_format <- rjd3revisions:::from_long_to_horizontal(long_format) check_horizontal(horizontal_format) #>            2020-01-01 2020-02-01 2020-03-01 2020-04-01 2020-05-01 2020-06-01 #> 2020-01-14   9.552098         NA         NA         NA         NA         NA #> 2020-03-19  11.491793   14.41856   11.42250         NA         NA         NA #> 2020-06-17  11.773619   17.10776   14.71377   9.305065   3.861159   7.328820 #> 2020-11-07  10.823564   15.76555   15.02978   9.030832   8.771044   8.467504 #> 2020-11-27  10.687867   15.72079   14.91144  11.549449   8.527118   8.441820 #> 2021-11-19  10.850136   16.12851   14.81727  10.123660   8.024399   7.344822 #>            2020-07-01 2020-08-01 2020-09-01 2020-10-01 2020-11-01 2020-12-01 #> 2020-01-14         NA         NA         NA         NA         NA         NA #> 2020-03-19         NA         NA         NA         NA         NA         NA #> 2020-06-17         NA         NA         NA         NA         NA         NA #> 2020-11-07   13.39659   7.984484   1.392050   2.193814   7.039555         NA #> 2020-11-27   10.98361   6.393969   2.750543   4.985446   7.677895         NA #> 2021-11-19   10.61793   6.093172   2.122234   3.309077   7.343791   3.371789 #>            2021-01-01 2021-02-01 2021-03-01 2021-04-01 2021-05-01 2021-06-01 #> 2020-01-14         NA         NA         NA         NA         NA         NA #> 2020-03-19         NA         NA         NA         NA         NA         NA #> 2020-06-17         NA         NA         NA         NA         NA         NA #> 2020-11-07         NA         NA         NA         NA         NA         NA #> 2020-11-27         NA         NA         NA         NA         NA         NA #> 2021-11-19   4.303937   20.97934    21.5699    17.8727   20.97775   20.46508 #>            2021-07-01 2021-08-01 2021-09-01 2021-10-01 2021-11-01 2021-12-01 #> 2020-01-14         NA         NA         NA         NA         NA         NA #> 2020-03-19         NA         NA         NA         NA         NA         NA #> 2020-06-17         NA         NA         NA         NA         NA         NA #> 2020-11-07         NA         NA         NA         NA         NA         NA #> 2020-11-27         NA         NA         NA         NA         NA         NA #> 2021-11-19   15.34024   10.93257   17.22735   18.74157    25.4784         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Check long format — check_long","title":"Check long format — check_long","text":"Check long format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check long format — check_long","text":"","code":"check_long(x, date_format = \"%Y-%m-%d\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check long format — check_long","text":"x formatted data.frame containing input long format date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check long format — check_long","text":"input column date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check long format — check_long","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) check_long(long_format) #>        revdate       time obs_values #> 1   2020-02-17 2020-01-01   9.917084 #> 2   2020-02-17 2020-02-01   9.022595 #> 3   2020-02-17 2020-03-01         NA #> 4   2020-02-17 2020-04-01         NA #> 5   2020-02-17 2020-05-01         NA #> 6   2020-02-17 2020-06-01         NA #> 7   2020-02-17 2020-07-01         NA #> 8   2020-02-17 2020-08-01         NA #> 9   2020-02-17 2020-09-01         NA #> 10  2020-02-17 2020-10-01         NA #> 11  2020-02-17 2020-11-01         NA #> 12  2020-02-17 2020-12-01         NA #> 13  2020-02-17 2021-01-01         NA #> 14  2020-02-17 2021-02-01         NA #> 15  2020-02-17 2021-03-01         NA #> 16  2020-02-17 2021-04-01         NA #> 17  2020-02-17 2021-05-01         NA #> 18  2020-02-17 2021-06-01         NA #> 19  2020-02-17 2021-07-01         NA #> 20  2020-02-17 2021-08-01         NA #> 21  2020-02-17 2021-09-01         NA #> 22  2020-02-17 2021-10-01         NA #> 23  2020-02-17 2021-11-01         NA #> 24  2020-02-17 2021-12-01         NA #> 25  2020-06-05 2020-01-01   9.204806 #> 26  2020-06-05 2020-02-01   5.749710 #> 27  2020-06-05 2020-03-01   5.009967 #> 28  2020-06-05 2020-04-01  13.818035 #> 29  2020-06-05 2020-05-01  18.511176 #> 30  2020-06-05 2020-06-01  12.671542 #> 31  2020-06-05 2020-07-01         NA #> 32  2020-06-05 2020-08-01         NA #> 33  2020-06-05 2020-09-01         NA #> 34  2020-06-05 2020-10-01         NA #> 35  2020-06-05 2020-11-01         NA #> 36  2020-06-05 2020-12-01         NA #> 37  2020-06-05 2021-01-01         NA #> 38  2020-06-05 2021-02-01         NA #> 39  2020-06-05 2021-03-01         NA #> 40  2020-06-05 2021-04-01         NA #> 41  2020-06-05 2021-05-01         NA #> 42  2020-06-05 2021-06-01         NA #> 43  2020-06-05 2021-07-01         NA #> 44  2020-06-05 2021-08-01         NA #> 45  2020-06-05 2021-09-01         NA #> 46  2020-06-05 2021-10-01         NA #> 47  2020-06-05 2021-11-01         NA #> 48  2020-06-05 2021-12-01         NA #> 49  2021-04-17 2020-01-01   9.202876 #> 50  2021-04-17 2020-02-01   5.489849 #> 51  2021-04-17 2020-03-01   5.669318 #> 52  2021-04-17 2020-04-01  11.237989 #> 53  2021-04-17 2020-05-01  15.824990 #> 54  2021-04-17 2020-06-01  12.806538 #> 55  2021-04-17 2020-07-01  14.213017 #> 56  2021-04-17 2020-08-01  12.519935 #> 57  2021-04-17 2020-09-01  15.565243 #> 58  2021-04-17 2020-10-01   9.814754 #> 59  2021-04-17 2020-11-01   6.829194 #> 60  2021-04-17 2020-12-01   5.932713 #> 61  2021-04-17 2021-01-01   6.586165 #> 62  2021-04-17 2021-02-01   9.647478 #> 63  2021-04-17 2021-03-01  11.765149 #> 64  2021-04-17 2021-04-01  14.398543 #> 65  2021-04-17 2021-05-01         NA #> 66  2021-04-17 2021-06-01         NA #> 67  2021-04-17 2021-07-01         NA #> 68  2021-04-17 2021-08-01         NA #> 69  2021-04-17 2021-09-01         NA #> 70  2021-04-17 2021-10-01         NA #> 71  2021-04-17 2021-11-01         NA #> 72  2021-04-17 2021-12-01         NA #> 73  2021-09-08 2020-01-01   8.820543 #> 74  2021-09-08 2020-02-01   6.167026 #> 75  2021-09-08 2020-03-01   6.438524 #> 76  2021-09-08 2020-04-01  11.117356 #> 77  2021-09-08 2020-05-01  15.254129 #> 78  2021-09-08 2020-06-01  13.801967 #> 79  2021-09-08 2020-07-01  15.458866 #> 80  2021-09-08 2020-08-01  11.194544 #> 81  2021-09-08 2020-09-01  11.983616 #> 82  2021-09-08 2020-10-01  13.561664 #> 83  2021-09-08 2020-11-01   6.270511 #> 84  2021-09-08 2020-12-01   5.110880 #> 85  2021-09-08 2021-01-01   8.074142 #> 86  2021-09-08 2021-02-01   8.764114 #> 87  2021-09-08 2021-03-01  10.626421 #> 88  2021-09-08 2021-04-01  14.245112 #> 89  2021-09-08 2021-05-01  18.955431 #> 90  2021-09-08 2021-06-01  13.278844 #> 91  2021-09-08 2021-07-01  18.498010 #> 92  2021-09-08 2021-08-01  10.274533 #> 93  2021-09-08 2021-09-01   6.380395 #> 94  2021-09-08 2021-10-01         NA #> 95  2021-09-08 2021-11-01         NA #> 96  2021-09-08 2021-12-01         NA #> 97  2021-11-12 2020-01-01   8.767869 #> 98  2021-11-12 2020-02-01   6.208922 #> 99  2021-11-12 2020-03-01   5.319117 #> 100 2021-11-12 2020-04-01  11.406173 #> 101 2021-11-12 2020-05-01  15.923064 #> 102 2021-11-12 2020-06-01  13.956191 #> 103 2021-11-12 2020-07-01  16.719956 #> 104 2021-11-12 2020-08-01  11.775040 #> 105 2021-11-12 2020-09-01  13.654004 #> 106 2021-11-12 2020-10-01  12.206063 #> 107 2021-11-12 2020-11-01   6.165531 #> 108 2021-11-12 2020-12-01   7.053739 #> 109 2021-11-12 2021-01-01   7.357386 #> 110 2021-11-12 2021-02-01   8.173678 #> 111 2021-11-12 2021-03-01  11.567101 #> 112 2021-11-12 2021-04-01  15.567647 #> 113 2021-11-12 2021-05-01  20.291585 #> 114 2021-11-12 2021-06-01  14.380386 #> 115 2021-11-12 2021-07-01  20.120310 #> 116 2021-11-12 2021-08-01  12.020869 #> 117 2021-11-12 2021-09-01   9.812385 #> 118 2021-11-12 2021-10-01   4.454962 #> 119 2021-11-12 2021-11-01  -3.796017 #> 120 2021-11-12 2021-12-01         NA #> 121 2021-11-17 2020-01-01   9.123083 #> 122 2021-11-17 2020-02-01   6.085193 #> 123 2021-11-17 2020-03-01   5.898714 #> 124 2021-11-17 2020-04-01  11.465978 #> 125 2021-11-17 2020-05-01  15.779082 #> 126 2021-11-17 2020-06-01  13.840275 #> 127 2021-11-17 2020-07-01  16.482299 #> 128 2021-11-17 2020-08-01  11.573886 #> 129 2021-11-17 2020-09-01  13.717267 #> 130 2021-11-17 2020-10-01  10.970510 #> 131 2021-11-17 2020-11-01   6.064768 #> 132 2021-11-17 2020-12-01   7.445717 #> 133 2021-11-17 2021-01-01   7.804779 #> 134 2021-11-17 2021-02-01   8.985763 #> 135 2021-11-17 2021-03-01  11.934262 #> 136 2021-11-17 2021-04-01  16.055337 #> 137 2021-11-17 2021-05-01  18.478421 #> 138 2021-11-17 2021-06-01  15.571550 #> 139 2021-11-17 2021-07-01  21.303035 #> 140 2021-11-17 2021-08-01  12.632139 #> 141 2021-11-17 2021-09-01   8.582834 #> 142 2021-11-17 2021-10-01   4.383069 #> 143 2021-11-17 2021-11-01  -1.217391 #> 144 2021-11-17 2021-12-01         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vertical format — check_vertical","title":"Check vertical format — check_vertical","text":"Check vertical format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vertical format — check_vertical","text":"","code":"check_vertical(x, ...)  # S3 method for class 'mts' check_vertical(x, periodicity, date_format = \"%Y-%m-%d\", ...)  # S3 method for class 'data.frame' check_vertical(x, ...)  # S3 method for class 'matrix' check_vertical(x, periodicity, date_format = \"%Y-%m-%d\", ...)  # Default S3 method check_vertical(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vertical format — check_vertical","text":"x formatted data.frame containing input vertical format ... Arguments passed `check_vertical` according class object `x` periodicity periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vertical format — check_vertical","text":"input ts object revision date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vertical format — check_vertical","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) vertical_format <- rjd3revisions:::from_long_to_vertical(long_format, periodicity = 12L) check_vertical(vertical_format) #>          2020-04-12 2020-06-16 2020-08-20 2021-04-02 2021-08-01 2021-12-08 #> Jan 2020   8.143223   9.646949   9.571501   9.359209   9.246820   9.478846 #> Feb 2020   5.122364   5.507647   6.793817   6.672486   6.895611   6.750561 #> Mar 2020   9.591418   7.646234   7.457019   7.300223   7.505927   7.328271 #> Apr 2020  12.935602  14.469325  14.360464  14.759541  14.172647  14.310055 #> May 2020         NA  18.828952  20.583046  19.331926  19.210792  19.084261 #> Jun 2020         NA  18.471366  19.691379  20.579449  20.042017  20.454352 #> Jul 2020         NA         NA  14.877400  16.277295  16.889775  17.484987 #> Aug 2020         NA         NA  23.243636  19.492916  20.852497  21.073718 #> Sep 2020         NA         NA         NA  12.341092  15.253799  15.413230 #> Oct 2020         NA         NA         NA  13.887608  12.477478  11.155367 #> Nov 2020         NA         NA         NA  11.414930  12.946316  12.637921 #> Dec 2020         NA         NA         NA  21.802166  24.945311  23.937716 #> Jan 2021         NA         NA         NA  30.695024  29.984824  28.808645 #> Feb 2021         NA         NA         NA  29.299038  32.125723  30.047030 #> Mar 2021         NA         NA         NA  36.363628  37.070921  35.864193 #> Apr 2021         NA         NA         NA  44.835138  43.299386  45.542474 #> May 2021         NA         NA         NA         NA  43.157311  43.522381 #> Jun 2021         NA         NA         NA         NA  42.232975  45.127155 #> Jul 2021         NA         NA         NA         NA  34.900664  38.241635 #> Aug 2021         NA         NA         NA         NA  37.201545  38.639154 #> Sep 2021         NA         NA         NA         NA         NA  36.418675 #> Oct 2021         NA         NA         NA         NA         NA  32.379958 #> Nov 2021         NA         NA         NA         NA         NA  35.651131 #> Dec 2021         NA         NA         NA         NA         NA  42.418230"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":null,"dir":"Reference","previous_headings":"","what":"Cointegration tests (Engle-Granger) — cointegration","title":"Cointegration tests (Engle-Granger) — cointegration","text":"Cointegration tests (Engle-Granger)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"cointegration(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cointegration tests (Engle-Granger) — cointegration","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output adfk Number lags consider ADF na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) cointegration(vintages$diagonal_view) #>                                 value    stderr statistic       pvalue #> [Release[1]]_[Release[2]] -0.28530071 0.2543843 -5.052594 1.226549e-05 #> [Release[1]]_[Release[3]] -0.40154033 0.2316298 -6.050777 7.414802e-07 #> [Release[1]]_[Release[4]] -0.28177585 0.2469408 -5.190619 8.321158e-06 #> [Release[1]]_[Release[5]] -0.07619799 0.2348201 -4.583075 4.590532e-05 #> [Release[2]]_[Release[3]] -0.17564833 0.2214712 -5.308357 5.976536e-06 #> [Release[2]]_[Release[4]] -0.00954951 0.2351166 -4.293826 1.035038e-04 #> [Release[2]]_[Release[5]]  0.06894665 0.2284503 -4.075519 1.911740e-04 #> [Release[3]]_[Release[4]] -0.26551102 0.2609396 -4.849823 2.168829e-05 #> [Release[3]]_[Release[5]] -0.01534976 0.2206842 -4.600918 4.365976e-05 #> [Release[4]]_[Release[5]] -0.05972414 0.2148374 -4.932679 1.718209e-05"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintage tables — create_vintages","title":"Create vintage tables — create_vintages","text":"Create vintage tables data.frame, matrix mts object R","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintage tables — create_vintages","text":"","code":"create_vintages(x, ...)  # S3 method for class 'data.frame' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # S3 method for class 'mts' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # S3 method for class 'matrix' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # Default S3 method create_vintages(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintage tables — create_vintages","text":"x formatted object containing input. can type `data.frame`, `matrix` `mts` must represent one multiple vintage views (selected argument `type`. ... Arguments passed `create_vintages` according class object `x` type character specifying type representation input `\"long\"`, `\"horizontal\"` `\"vertical\"` approach. periodicity periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates. vintage_selection Date vector (character vector format date_format) length <= 2, specifying range revision dates retain. example: c(start = \"2022-02-02\", end = \"2022-08-05\") c(start = .Date(\"2022-02-02\"), end = .Date(\"2022-08-05\")) keep vintages whose revision date 02 Feb. 2022 05 Aug. 2022. missing (default), whole range selected.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintage tables — create_vintages","text":"object class `rjd3rev_vintages` contains four different view revision","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create vintage tables — create_vintages","text":"input data.frame, function displays vintages considering three different data structures views: vertical, horizontal diagonal. See `details` section information different views. function returns object class `rjd3rev_vintages` can used input main function `revision_analysis`. four different vintage views: 1. vertical view shows observed values time period different vintages. approach robust changes base year data redefinition. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. 2. horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards 'true value'. Horizontal tables just transpose vertical tables used tests `revision_analysis`. 3. diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study. However, approach requires particularly vigilant case change base year data redefinition. 4. long view representation data allows information grouped together order facilitate manipulation. 3 columns (1 column time period, 1 column publication / revision date one column data), representation allows efficient non-redundant storage data.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintage tables — create_vintages","text":"","code":"## creating the input  # Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) )  vintages_1 <- create_vintages(x = long_view, type = \"long\", periodicity = 4)  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                             .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                             .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  vintages_2 <- create_vintages(x = horizontal_view, type = \"horizontal\", periodicity = 4)  # Horizontal format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                           nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  vintages_3 <- create_vintages(x = vertical_view, type = \"vertical\", periodicity = 4)  ## specifying the format of revision dates vintages <- create_vintages(     x = long_view,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\" )  ## including vintage selection vintages <- create_vintages(     x = long_view,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\",     vintage_selection = c(start=\"2022-10-31\", end=\"2023-01-31\") )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from CSV or TXT files — create_vintages_from_csv","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"Create vintages table CSV TXT files","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"create_vintages_from_csv(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"file character containing name file data read . type character specifying type representation input `\"long\"`, `\"horizontal\"` `\"vertical\"` approach. periodicity periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates. ... Arguments passed `read.csv()`, example: * `sep` field separator character * `dec` character used file decimal points. * `row.names` vector row names * `skip` integer, number lines data file skip beginning read data. * `...`","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"object class `rjd3rev_vintages`","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"if (FALSE) { # \\dontrun{ file_name <- \"myinput.csv\" vintages <- create_vintages_from_csv(     file = file_name,     type = \"vertical\",     periodicity = 12,     date_format = \"%Y-%m-%d\",     sep = \";\" ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from XLSX files — create_vintages_from_xlsx","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"Create vintages table XLSX files","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"create_vintages_from_xlsx(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"file character containing name file data read . type character specifying type representation input `\"long\"`, `\"horizontal\"` `\"vertical\"` approach. periodicity periodicity time period (12, 4 1 resp. monthly, quarterly annual data) ... Arguments passed `readxl::read_excel()`, example: * `sheet` character containing sheet read * `range` cell range read * `col_names` boolean use first row column names * `...`","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"object class `rjd3rev_vintages`","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"if (FALSE) { # \\dontrun{ file_name <- \"myinput.xlsx\" sheet_name <- \"Sheet1\" vintages <- create_vintages_from_xlsx(     file = file_name,     type = \"horizontal\",     periodicity = 12L,     sheet = sheet_name ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics — descriptive_statistics","title":"Descriptive statistics — descriptive_statistics","text":"Descriptive statistics","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics — descriptive_statistics","text":"","code":"descriptive_statistics(revisions.view, rounding = 3)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics — descriptive_statistics","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output rounding number decimals display","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics — descriptive_statistics","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and get descriptive statistics of revisions vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) descriptive_statistics(revisions$diagonal_view, rounding = 1) #>                           [Release[2]]-[Release[1]] [Release[3]]-[Release[2]] #> N                                              40.0                      40.0 #> mean revision                                   0.0                       0.0 #> st.dev.                                         0.1                       0.1 #> min                                            -0.1                      -0.2 #> q.10                                           -0.1                      -0.2 #> median                                          0.0                       0.0 #> q.90                                            0.1                       0.1 #> max                                             0.2                       0.2 #> % positive                                      0.6                       0.5 #> % zero                                          0.0                       0.0 #> % negative                                      0.4                       0.5 #> mean absolute revision                          0.1                       0.1 #> root mean square revision                       0.1                       0.1 #>                           [Release[4]]-[Release[3]] [Release[5]]-[Release[4]] #> N                                              40.0                      40.0 #> mean revision                                   0.0                       0.0 #> st.dev.                                         0.1                       0.1 #> min                                            -0.2                      -0.3 #> q.10                                           -0.1                      -0.1 #> median                                          0.0                       0.0 #> q.90                                            0.1                       0.1 #> max                                             0.2                       0.2 #> % positive                                      0.4                       0.4 #> % zero                                          0.0                       0.0 #> % negative                                      0.6                       0.6 #> mean absolute revision                          0.1                       0.1 #> root mean square revision                       0.1                       0.1"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 1 — efficiencyModel1","title":"Efficiency Model 1 — efficiencyModel1","text":"Linear regression model revisions (R) preliminary vintage (P)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"efficiencyModel1(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 1 — efficiencyModel1","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) efficiencyModel1(vintages$diagonal_view) #>                            N          R2         F intercept.estimate #> [Release[2]]-[Release[1]] 40 0.064342830 2.6131661         0.03955525 #> [Release[3]]-[Release[2]] 40 0.071263987 2.9158248         0.01253707 #> [Release[4]]-[Release[3]] 40 0.014328986 0.5524170        -0.03276902 #> [Release[5]]-[Release[4]] 40 0.009136627 0.3503932        -0.01101970 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[2]]-[Release[1]]       0.01737525       0.02853379   -0.005714687 #> [Release[3]]-[Release[2]]       0.02135381       0.56060100   -0.007423417 #> [Release[4]]-[Release[3]]       0.01868319       0.08750526    0.002843031 #> [Release[5]]-[Release[4]]       0.01933166       0.57200970   -0.002345472 #>                           slope.stderr slope.pvalue   skewness    kurtosis #> [Release[2]]-[Release[1]]  0.003535159   0.11425292  0.2597218 -0.43395506 #> [Release[3]]-[Release[2]]  0.004347335   0.09587371 -0.2938120 -0.06368272 #> [Release[4]]-[Release[3]]  0.003825146   0.46190246  0.2012318 -0.05408149 #> [Release[5]]-[Release[4]]  0.003962345   0.55739632 -0.7122024  1.53571113 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[2]]-[Release[1]]        0.7444754        0.68919041    1.218545e-02 #> [Release[3]]-[Release[2]]        0.5677057        0.75287742    3.525564e-05 #> [Release[4]]-[Release[3]]        0.2679654        0.87460520    4.268766e-02 #> [Release[5]]-[Release[4]]        7.1294240        0.02830514    1.671692e-02 #>                           BreuschPagan.value BreuschPagan.pvalue    White.R2 #> [Release[2]]-[Release[1]]        0.468759236           0.4977135 0.012285119 #> [Release[3]]-[Release[2]]        0.001339762           0.9709934 0.000453343 #> [Release[4]]-[Release[3]]        1.694463842           0.2008499 0.054232001 #> [Release[5]]-[Release[4]]        0.646042725           0.4265307 0.017604610 #>                           White.value White.pvalue      arch.R2 arch.value #> [Release[2]]-[Release[1]]  0.49140475    0.7821550 0.0456815355 1.78157988 #> [Release[3]]-[Release[2]]  0.01813372    0.9909741 0.0033041245 0.12886085 #> [Release[4]]-[Release[3]]  2.16928004    0.3380234 0.0853776151 3.32972699 #> [Release[5]]-[Release[4]]  0.70418439    0.7032153 0.0005330063 0.02078725 #>                           arch.pvalue #> [Release[2]]-[Release[1]]  0.18195545 #> [Release[3]]-[Release[2]]  0.71961608 #> [Release[4]]-[Release[3]]  0.06803817 #> [Release[5]]-[Release[4]]  0.88536005"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 2 — efficiencyModel2","title":"Efficiency Model 2 — efficiencyModel2","text":"Linear regression model R_v R_{v-1}","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"efficiencyModel2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 2 — efficiencyModel2","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) efficiencyModel2(vintages$diagonal_view) #>                            N         R2         F intercept.estimate #> [Release[3]]-[Release[2]] 40 0.03414641 1.3434373        -0.01502902 #> [Release[4]]-[Release[3]] 40 0.01248758 0.4805288        -0.02512668 #> [Release[5]]-[Release[4]] 40 0.03583727 1.4124340        -0.02279074 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[3]]-[Release[2]]       0.01769005       0.40088255     0.22683721 #> [Release[4]]-[Release[3]]       0.01476059       0.09687119    -0.09476903 #> [Release[5]]-[Release[4]]       0.01557162       0.15152475    -0.19619317 #>                           slope.stderr slope.pvalue   skewness    kurtosis #> [Release[3]]-[Release[2]]    0.1957067    0.2536606 -0.2663346 -0.70594162 #> [Release[4]]-[Release[3]]    0.1367120    0.4923983  0.1428890  0.05980705 #> [Release[5]]-[Release[4]]    0.1650820    0.2420273 -0.3799207  0.48908872 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]        1.2708964         0.5296980    0.0008479461 #> [Release[4]]-[Release[3]]        0.1385246         0.9330819    0.0127461791 #> [Release[5]]-[Release[4]]        1.3269210         0.5150659    0.0759441218 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]          0.0322493          0.85843578 0.06507212 #> [Release[4]]-[Release[3]]          0.4906082          0.48792282 0.01724923 #> [Release[5]]-[Release[4]]          3.1230542          0.08522265 0.09138218 #>                           White.value White.pvalue      arch.R2 arch.value #> [Release[3]]-[Release[2]]   2.6028850    0.2721390 1.675820e-03 0.06535699 #> [Release[4]]-[Release[3]]   0.6899692    0.7082313 7.696581e-02 3.00166646 #> [Release[5]]-[Release[4]]   3.6552873    0.1607920 8.745591e-05 0.00341078 #>                           arch.pvalue #> [Release[3]]-[Release[2]]  0.79822100 #> [Release[4]]-[Release[3]]  0.08317892 #> [Release[5]]-[Release[4]]  0.95342851"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate revisions from vintages — get_revisions","title":"Calculate revisions from vintages — get_revisions","text":"Calculate revisions vintages","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate revisions from vintages — get_revisions","text":"","code":"get_revisions(vintages, gap = 1)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate revisions from vintages — get_revisions","text":"vintages object class `rjd3rev_vintages` gap Integer. Gap consider vintages calculate revision. Default 1 means revisions calculated vintages consecutively.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate revisions from vintages — get_revisions","text":"object class `rjd3rev_revisions` contains three different views revisions","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate revisions from vintages — get_revisions","text":"","code":"df <- data.frame(rev_date = c(rep(\"2022-07-31\",4), rep(\"2022-08-31\",4),                             rep(\"2022-09-30\",4), rep(\"2022-10-31\",4),                             rep(\"2022-11-30\",4), rep(\"2022-12-31\",4),                             rep(\"2023-01-31\",4), rep(\"2023-02-28\",4)),                  time_period = c(rep(c(\"2022Q1\",\"2022Q2\",\"2022Q3\",\"2022Q4\"),8)),                  obs_values = c(.8,.2,NA,NA, .8,.1,NA,NA,                                 .7,.1,NA,NA, .7,.2,.5,NA,                                 .7,.2,.5,NA, .7,.3,.7,NA,                                 .7,.2,.7,.4, .7,.3,.7,.3)) vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 1 — orthogonallyModel1","title":"Orthogonally Model 1 — orthogonallyModel1","text":"Linear regression model R_v R_{v-1},...,R_{v-p}. (p=nrevs)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"orthogonallyModel1(revisions.view, nrevs = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 1 — orthogonallyModel1","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output nrevs Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) orthogonallyModel1(revisions$diagonal_view) #>       N         R2         F intercept.estimate intercept.stderr #> [1,] 40 0.03414641 1.3434373        -0.01502902       0.01769005 #> [2,] 40 0.01248758 0.4805288        -0.02512668       0.01476059 #> [3,] 40 0.03583727 1.4124340        -0.02279074       0.01557162 #>      intercept.pvalue x(1).estimate x(1).stderr x(1).pvalue   skewness #> [1,]       0.40088255    0.22683721   0.1957067   0.2536606 -0.2663346 #> [2,]       0.09687119   -0.09476903   0.1367120   0.4923983  0.1428890 #> [3,]       0.15152475   -0.19619317   0.1650820   0.2420273 -0.3799207 #>         kurtosis JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [1,] -0.70594162        1.2708964         0.5296980    0.0008479461 #> [2,]  0.05980705        0.1385246         0.9330819    0.0127461791 #> [3,]  0.48908872        1.3269210         0.5150659    0.0759441218 #>      BreuschPagan.value BreuschPagan.pvalue   White.R2 White.value White.pvalue #> [1,]          0.0322493          0.85843578 0.06507212   2.6028850    0.2721390 #> [2,]          0.4906082          0.48792282 0.01724923   0.6899692    0.7082313 #> [3,]          3.1230542          0.08522265 0.09138218   3.6552873    0.1607920 #>           arch.R2 arch.value arch.pvalue #> [1,] 1.675820e-03 0.06535699  0.79822100 #> [2,] 7.696581e-02 3.00166646  0.08317892 #> [3,] 8.745591e-05 0.00341078  0.95342851"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 2 — orthogonallyModel2","title":"Orthogonally Model 2 — orthogonallyModel2","text":"Linear regression model R_v R_{v-k} (k = reference)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"orthogonallyModel2(revisions.view, reference = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 2 — orthogonallyModel2","text":"revisions.view mts object. Vertical diagonal view `get_revisions()` output reference Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) orthogonallyModel2(revisions$diagonal_view) #>                            N         R2         F intercept.estimate #> [Release[3]]-[Release[2]] 40 0.03414641 1.3434373        -0.01502902 #> [Release[4]]-[Release[3]] 40 0.01248758 0.4805288        -0.02512668 #> [Release[5]]-[Release[4]] 40 0.03583727 1.4124340        -0.02279074 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[3]]-[Release[2]]       0.01769005       0.40088255     0.22683721 #> [Release[4]]-[Release[3]]       0.01476059       0.09687119    -0.09476903 #> [Release[5]]-[Release[4]]       0.01557162       0.15152475    -0.19619317 #>                           slope.stderr slope.pvalue   skewness    kurtosis #> [Release[3]]-[Release[2]]    0.1957067    0.2536606 -0.2663346 -0.70594162 #> [Release[4]]-[Release[3]]    0.1367120    0.4923983  0.1428890  0.05980705 #> [Release[5]]-[Release[4]]    0.1650820    0.2420273 -0.3799207  0.48908872 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]        1.2708964         0.5296980    0.0008479461 #> [Release[4]]-[Release[3]]        0.1385246         0.9330819    0.0127461791 #> [Release[5]]-[Release[4]]        1.3269210         0.5150659    0.0759441218 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]          0.0322493          0.85843578 0.06507212 #> [Release[4]]-[Release[3]]          0.4906082          0.48792282 0.01724923 #> [Release[5]]-[Release[4]]          3.1230542          0.08522265 0.09138218 #>                           White.value White.pvalue      arch.R2 arch.value #> [Release[3]]-[Release[2]]   2.6028850    0.2721390 1.675820e-03 0.06535699 #> [Release[4]]-[Release[3]]   0.6899692    0.7082313 7.696581e-02 3.00166646 #> [Release[5]]-[Release[4]]   3.6552873    0.1607920 8.745591e-05 0.00341078 #>                           arch.pvalue #> [Release[3]]-[Release[2]]  0.79822100 #> [Release[4]]-[Release[3]]  0.08317892 #> [Release[5]]-[Release[4]]  0.95342851"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' plot(x, view = c(\"vertical\", \"diagonal\"), n_rev = 2, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_revisions\" view view plot. default, vertical view considered. n_rev number revision dates consider. vertical view, lasts n_rev revisions plotted. diagonal view, revisions first n_rev releases plotted. maximum number n_rev 5. ... arguments passed ts.plot().","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' plot(x, col, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_vintages\". col color vector length number releases ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class `","title":"Print function for objects of class `","text":"Print function objects class `\"rjd3rev_revisions\"`","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class `","text":"","code":"# S3 method for class 'rjd3rev_revisions' print(x, n_row = 12, n_col = 3, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class `","text":"x object class `\"rjd3rev_revisions\"`. n_row number last rows display. horizontal view, corresponds number columns. n_col number columns display. Can either last n columns (verical view), last n rows (horizontal view) first n columns (diagonal view). ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class ","title":"Print function for objects of class ","text":"Print function objects class \"rjd3rev_rslts\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_rslts' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class ","text":"x object class \"rjd3rev_rslts\" ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class `","title":"Print function for objects of class `","text":"Print function objects class `\"rjd3rev_vintages\"`","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class `","text":"","code":"# S3 method for class 'rjd3rev_vintages' print(x, n_row = 8, n_col = 3, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class `","text":"x object class `\"rjd3rev_vintages\"`. n_row number last rows display. horizontal view, corresponds number columns. n_col number columns display. Can either last n columns (verical view), last n rows (horizontal view) first n columns (diagonal view). argument used long view. ... arguments passed print() function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate report on Revision Analysis — render_report","title":"Generate report on Revision Analysis — render_report","text":"Generate report Revision Analysis","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate report on Revision Analysis — render_report","text":"","code":"render_report(   rslt,   output_file,   output_dir,   output_format = c(\"html_document\", \"pdf_document\"),   open_report = TRUE,   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate report on Revision Analysis — render_report","text":"rslt object class `\"rjd3rev_vintages\"` output function `revision_analysis()` output_file path name output file containing report output_dir path dir containing output file (Optional) output_format either HTML document (default) PDF document open_report Boolean. Default TRUE meaning report open automatically generated. ... Arguments passed `rmarkdown::render()`, example: * `output_options` List output options can override options specified metadata * `...`","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate report on Revision Analysis — render_report","text":"","code":"## Simulated data  long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L )  ## Make analysis and generate the report  vintages <- create_vintages(long_format, periodicity = 12L) rslt <- revision_analysis(vintages, view = \"diagonal\") if (FALSE) { # \\dontrun{ render_report(     rslt,     output_file = \"my_report\",     output_dir = \"C:/Users/xxx\",     output_format = \"pdf_document\" ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Revision analysis through a battery of tests — revision_analysis","title":"Revision analysis through a battery of tests — revision_analysis","text":"function perform parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. results, parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. Descriptive statistics revisions also provided. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests whose results can found found results (section 'varbased'). Finally, running function `render_report()` output `revision_analysis()` give formatted summary results full explanations tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"revision_analysis(   vintages,   gap = 1,   view = c(\"vertical\", \"diagonal\"),   n.releases = 3,   transf.diff = c(\"auto\", \"forced\", \"none\"),   transf.log = FALSE,   descriptive.rounding = 3,   nrevs = 1,   ref = 1,   na.zero = FALSE )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revision analysis through a battery of tests — revision_analysis","text":"vintages object class `\"rjd3rev_vintages\"` output function `create_vintages()` gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. view Selected view. Can \"vertical\" (default) \"diagonal\". Vertical view shows observed values time period different vintages. Diagonal view shows subsequent releases given time period, without regard date publication, can particularly informative regular estimation intervals exist. See `?create_vintages()` information interests drawbacks view. n.releases used `view = \"diagonal\"`. Ignored otherwise. Allow user limit number releases investigation). `view = \"vertical\"`, user invited limit number vintages upstream parameter `vintage_selection` `create_vintages()` whenever necessary. transf.diff differentiation apply data prior testing. used regressions including vintage data regressor /regressand. Regression including revision data never differentiated even `transf.diff = \"forced\"`. Options \"automatic\" (default), \"forced\" \"none\". transf.log Boolean whether log-transformation first applied data. Default FALSE. descriptive.rounding Integer. Number decimals display descriptive statistics. Default 3. nrevs, ref Integer. Number lags consider orthogonality tests 1 2 respectively. na.zero Boolean whether missing values considered 0 rather data yet available (default).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revision analysis through a battery of tests — revision_analysis","text":"object class 'rjd3rev_rslts'","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create a `\"rjd3rev_vintages\"` object with the input vintages <- create_vintages(x = df, periodicity = 4, date_format = \"%Y-%m-%d\") # revisions <- get_revisions(vintages, gap = 1) # just to get a first insight of the revisions  ## Call using all default parameters rslt1 <- revision_analysis(vintages) # render_report(rslt1) # summary(rslt1) # formatted summary only  ## Calls using diagonal view (suited in many situations such as to evaluate GDP estimates) ## Note: when input are not growth rates but the gross series, differentiation is ## performed automatically (if transf.diff is let to its default option) but `transf.log` ## must be set to TRUE manually whenever a log-transformation of the data is necessary rslt2 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) # render_report(rslt2) # summary(rslt2)  ## Call to evaluate revisions for a specific range of vintage periods vintages <- create_vintages(     x = df,     periodicity = 4,     vintage_selection = c(start=\"2021-12-31\", end=\"2023-06-30\") ) rslt3 <- revision_analysis(vintages, gap=2, view = \"vertical\") #render_report(rslt3) #summary(rslt3)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/rjd3revisions-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","title":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","text":"Revision analysis tool part 'JDemetra+ 3.x' (https://github.com/jdemetra) time series analysis software. performs battery tests revisions submit report results. various tests enable users detect potential bias sources inefficiency preliminary estimates.","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/rjd3revisions-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","text":"Maintainer: Corentin Lemasson corentin.lemasson@nbb.Authors: Tanguy Barthelemy tanguy.barthelemy@insee.fr [artist]","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal VS Noise — signalnoise","title":"Signal VS Noise — signalnoise","text":"Linear regression models determine whether revisions ‘news’ ‘noise’. 'noise': R (revisions) P (preliminary estimate). 'news': R L (latter estimate).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal VS Noise — signalnoise","text":"","code":"signalnoise(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal VS Noise — signalnoise","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal VS Noise — signalnoise","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) signalnoise(vintages$diagonal_view) #>                               News.R2    News.F News.pvalue    Noise.R2 #> [Release[2]]-[Release[1]] 0.054010910 2.1604364   0.1292262 0.064342830 #> [Release[3]]-[Release[2]] 0.058006796 2.3202718   0.1120099 0.071263987 #> [Release[4]]-[Release[3]] 0.020451313 0.8180525   0.4489106 0.014328986 #> [Release[5]]-[Release[4]] 0.005068516 0.2027406   0.8173674 0.009136627 #>                             Noise.F Noise.pvalue #> [Release[2]]-[Release[1]] 2.5737132   0.08948398 #> [Release[3]]-[Release[2]] 2.8505595   0.07023115 #> [Release[4]]-[Release[3]] 0.5731594   0.56853954 #> [Release[5]]-[Release[4]] 0.3654651   0.69628610"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":null,"dir":"Reference","previous_headings":"","what":"Slope and Drift — slope_and_drift","title":"Slope and Drift — slope_and_drift","text":"Linear regression model latter vintage (L) preliminary vintage (P)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slope and Drift — slope_and_drift","text":"","code":"slope_and_drift(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slope and Drift — slope_and_drift","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slope and Drift — slope_and_drift","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) slope_and_drift(vintages$diagonal_view) #>             N        R2        F intercept.estimate intercept.stderr #> Release[2] 40 0.9995199 79105.04         0.03955525       0.01737525 #> Release[3] 40 0.9992716 52129.28         0.01253707       0.02135381 #> Release[4] 40 0.9994474 68733.73        -0.03276902       0.01868319 #> Release[5] 40 0.9994009 63395.10        -0.01101970       0.01933166 #>            intercept.pvalue slope.estimate slope.stderr slope.pvalue   skewness #> Release[2]       0.02853379      0.9942853  0.003535159   0.11425292  0.2597218 #> Release[3]       0.56060100      0.9925766  0.004347335   0.09587371 -0.2938120 #> Release[4]       0.08750526      1.0028430  0.003825146   0.46190246  0.2012318 #> Release[5]       0.57200970      0.9976545  0.003962345   0.55739632 -0.7122024 #>               kurtosis JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> Release[2] -0.43395506        0.7444754        0.68919041    1.218545e-02 #> Release[3] -0.06368272        0.5677057        0.75287742    3.525564e-05 #> Release[4] -0.05408149        0.2679654        0.87460520    4.268766e-02 #> Release[5]  1.53571113        7.1294240        0.02830514    1.671692e-02 #>            BreuschPagan.value BreuschPagan.pvalue    White.R2 White.value #> Release[2]        0.468759236           0.4977135 0.012285119  0.49140475 #> Release[3]        0.001339762           0.9709934 0.000453343  0.01813372 #> Release[4]        1.694463842           0.2008499 0.054232001  2.16928004 #> Release[5]        0.646042725           0.4265307 0.017604610  0.70418439 #>            White.pvalue      arch.R2 arch.value arch.pvalue #> Release[2]    0.7821550 0.0456815355 1.78157988  0.18195545 #> Release[3]    0.9909741 0.0033041245 0.12886085  0.71961608 #> Release[4]    0.3380234 0.0853776151 3.32972699  0.06803817 #> Release[5]    0.7032153 0.0005330063 0.02078725  0.88536005"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_revisions\". ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_rslts\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_rslts' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_rslts\" ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_vintages\". ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U1 — theil","title":"Theil's Inequality Coefficient U1 — theil","text":"Theil's Inequality Coefficient U1","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"theil(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U1 — theil","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) theil(vintages$diagonal_view) #> [1] 0.009198273 0.011021424 0.009661489 0.009876197"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U2 — theil2","title":"Theil's Inequality Coefficient U2 — theil2","text":"Theil's Inequality Coefficient U2","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"theil2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U2 — theil2","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively.. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) theil2(vintages$diagonal_view) #> [1] 0.13002881 0.09409338 0.08667069 0.06577723"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit root test — unitroot","title":"Unit root test — unitroot","text":"Unit root test","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit root test — unitroot","text":"","code":"unitroot(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit root test — unitroot","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output adfk Number lags consider Augmented Dicky-Fuller (ADF) test na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unit root test — unitroot","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) unitroot(vintages$diagonal_view) #>             DF.value  DF.stderr DF.statistic DF.pvalue ADF.value ADF.stderr #> Release[1] 0.9684346 0.04179610   -0.7552230 0.3585309 0.9609000 0.04218758 #> Release[2] 0.9687296 0.04155951   -0.7524238 0.3596438 0.9602818 0.04161947 #> Release[3] 0.9679335 0.04205152   -0.7625527 0.3556219 0.9596895 0.04197488 #> Release[4] 0.9676815 0.04212409   -0.7672223 0.3537723 0.9593777 0.04216808 #> Release[5] 0.9678438 0.04203638   -0.7649622 0.3546671 0.9591082 0.04194052 #>            ADF.statistic ADF.pvalue DFCT.value DFCT.stderr DFCT.statistic #> Release[1]    -0.9268121  0.2926998  0.8258026  0.06717225      -2.593295 #> Release[2]    -0.9543170  0.2826375  0.8242509  0.06677718      -2.631873 #> Release[3]    -0.9603483  0.2804522  0.8174194  0.06697348      -2.726162 #> Release[4]    -0.9633424  0.2793702  0.8186258  0.06694429      -2.709330 #> Release[5]    -0.9749944  0.2751780  0.8213517  0.06689350      -2.670637 #>            DFCT.pvalue  PP.value  PP.stderr PP.statistic PP.pvalue #> Release[1]   0.2949009 0.9684346 0.04179610   -0.9369666 0.2889090 #> Release[2]   0.2779906 0.9687296 0.04155951   -0.9344038 0.2898489 #> Release[3]   0.2391745 0.9679335 0.04205152   -0.9389943 0.2881662 #> Release[4]   0.2458337 0.9676815 0.04212409   -0.9385711 0.2883212 #> Release[5]   0.2615908 0.9678438 0.04203638   -0.9398995 0.2878349"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector error correction model (VECM) — vecm","title":"Vector error correction model (VECM) — vecm","text":"Can lead better understanding nature nonstationary process among different component series.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector error correction model (VECM) — vecm","text":"","code":"vecm(   vintages.view,   lag = 2,   model = c(\"none\", \"cnt\", \"trend\"),   na.zero = FALSE )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector error correction model (VECM) — vecm","text":"vintages.view mts object. Vertical diagonal view `create_vintages()` output lag Number lags model Character. Must \"none\" (default), \"cnt\" \"trend\". na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector error correction model (VECM) — vecm","text":"","code":"## Simulated data period_range <- seq(as.Date('2011-01-01'),as.Date('2020-10-01'),by='quarter') qtr <- (as.numeric(substr(period_range,6,7))+2)/3 time_period <- rep(paste0(format(period_range, \"%Y\"), \"Q\", qtr),5) np <- length(period_range) rev_date <- c(rep(\"2021-06-30\",np), rep(\"2021-12-31\",np), rep(\"2022-06-30\",np),             rep(\"2022-12-31\",np), rep(\"2023-06-30\",np)) set.seed(1) xt <- cumsum(sample(rnorm(1000,0,1), np, TRUE)) rev <- rnorm(np*4,0,.1) obs_values <- xt for(i in 1:4) {   xt <- xt+rev[(1+(i-1)*np):(i*np)]   obs_values <- c(obs_values,xt) } df <- data.frame(rev_date, time_period, obs_values)  ## Create vintage and test vintages <- create_vintages(df, periodicity = 4) vecm(vintages$diagonal_view) #>                           trace(2) trace(1)   max(2)   max(1) #> [Release[1]]_[Release[2]] 1.657778 24.16726 1.657778 22.50948 #> [Release[1]]_[Release[3]] 1.671109 30.62985 1.671109 28.95874 #> [Release[1]]_[Release[4]] 1.640661 23.37093 1.640661 21.73027 #> [Release[1]]_[Release[5]] 1.760839 21.22042 1.760839 19.45958 #> [Release[2]]_[Release[3]] 1.902635 24.26282 1.902635 22.36019 #> [Release[2]]_[Release[4]] 1.852304 17.28764 1.852304 15.43534 #> [Release[2]]_[Release[5]] 2.022543 17.67682 2.022543 15.65428 #> [Release[3]]_[Release[4]] 2.039084 21.89822 2.039084 19.85913 #> [Release[3]]_[Release[5]] 2.233745 22.39236 2.233745 20.15862 #> [Release[4]]_[Release[5]] 2.106855 23.91079 2.106855 21.80393"}]
