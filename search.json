[{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package performs revision analysis offers detailed summary output including generation visual report. composed selection parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. mean inefficiency preliminary estimates whether revisions predictable way. package uses efficient libraries JDemetra+ v3. built mostly based Eurostat’s technical reports D. Ares L. Pitton (2013). next section helps installation package. third section describes use tool give important details main functions. particular, important mention beforehand input data must first set specific format described sub-section input data. fourth section theoretical describes test performed main function revision_analysis() (also performed individually) interpret . Finally, find reference papers last section.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"installation-settings","dir":"Articles","previous_headings":"","what":"Installation settings","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"package relies Java libraries JDemetra+ v3 package rjd3toolkit rjdverse. Prior installation, must ensure Java version >= 17.0 computer. need use portable version Java fill request, can follow instructions installation manual RJDemetra. addition Java version >= 17.0, must recent version R packages rJava (>= 1.0.6) RProtobuf (>=0.4.17) can download CRAN. Depending current version R, might also need install another version Rtools. (>= 3.6). package also depends package rjd3toolkit must install GitHub prior rjd3revsions. Note depending R packages already installed computer, might also asked install re-install packages CRAN. Finally, package also suggests R packages formattable kableExtra (readxl import input data Excel) downloadable CRAN. invited install enhanced formatting output (.e., meaningful colors).","code":"remotes::install_github(\"rjdverse/rjd3toolkit@*release\") remotes::install_github(\"rjdverse/rjd3revisions@*release\", build_vignettes = TRUE)"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"input_format","dir":"Articles","previous_headings":"Usage","what":"Input data","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data must specific format: long, vertical diagonal shown one table . Regarding dates, format shown examples acceptable, common date formats revision dates time periods. Note missing values can either mentioned NA (example ) included input best convenience user.","code":""},{"path":[]},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"format-3-horizontal-view","dir":"Articles","previous_headings":"Usage > Input data","what":"Format 3: horizontal view","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages (see section vintages & revisions) later . plan use generic function, ’ll first need put input data data.frame R example .","code":"# Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         0.8, 0.2, NA, NA, 0.8, 0.1, NA, NA,         0.7, 0.1, NA, NA, 0.7, 0.2, 0.5, NA,         0.7, 0.2, 0.5, NA, 0.7, 0.3, 0.7, NA,         0.7, 0.2, 0.7, 0.4, 0.7, 0.3, 0.7, 0.3     ),     stringsAsFactors = FALSE ) print(long_view)  # Horizontal format horizontal_view <- matrix(data = c(0.8, 0.8, 0.7, 0.7, 0.7, 0.7, 0.7, 0.7, 0.2, 0.1,                                    0.1, 0.2, 0.2, 0.3, 0.2, 0.3, NA, NA, NA, 0.5, 0.5, 0.7, 0.7,                                    0.7, NA, NA, NA, NA, NA, NA, 0.4, 0.3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") print(horizontal_view)  # Vertical format vertical_view <- matrix(data = c(0.8, 0.2, NA, NA, 0.8, 0.1, NA, NA, 0.7, 0.1, NA,                                  NA, 0.7, 0.2, 0.5, NA, 0.7, 0.2, 0.5, NA, 0.7, 0.3, 0.7, NA,                                  0.7, 0.2, 0.7, 0.4, 0.7, 0.3, 0.7, 0.3),                         nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                              \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\") print(vertical_view)"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"processing","dir":"Articles","previous_headings":"Usage","what":"Processing","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, create vintages: possibly inspect revisions perform revision analysis: Finally create report get summary results, can use function revision_analysis export report pdf html format, can use function render_report","code":"library(\"rjd3revisions\") vintages <- create_vintages(long_view, type = \"long\", periodicity = 4L) # vintages <- create_vintages_from_xlsx( #     file = \"myinput.xlsx\", #     type = \"long\", #     periodicity = 4, #     \"Sheet1\" # ) # vintages <- create_vintages_from_csv( #     file = \"myinput.csv\", #     periodicity = 4, #     sep = \"\\t\", #     date_format = \"%Y-%m-%d\" # )  print(vintages) # extract of the vintages according to the different views summary(vintages) # metadata about vintages revisions <- get_revisions(vintages, gap = 1)  plot(revisions)  print(revisions) # extract of the revisions according to the different views summary(revisions) # metadata about revisions rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3)  summary(rslt) print(rslt) render_report(     rslt,     output_file = \"my_report\",     output_dir = \"C:/Users/xxx\",     output_format = \"pdf_document\" )"},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"vintages","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Vintages & revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"input data right format, must first create object class rjd3rev_vintages can run revision analysis. function create_vintages() (, alternatively, create_vintages_from_xlsx() create_vintages_from_csv()) create object input data display vintages considering three different data structures views: vertical, horizontal diagonal. vertical view shows observed values time period different vintages. approach robust changes base year data redefinition example used analyse revisions resulting benchmark revision. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. Example vertical view horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards ‘true value’. Horizontal tables just transpose vertical tables used tests ‘revision_analysis’. Example horizontal view diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study (case official statistics). However, approach requires particularly vigilant case change base year data redefinition. Example diagonal view Note argument function create_vintages(), argument vintage_selection allows limit range revision dates consider needed. See ?create_vintages details. Revisions easily calculated vintages choosing gap consider. function get_revisions() display revisions according view. just informative function need run prior revision analysis.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"revision-analysis-reporting","dir":"Articles","previous_headings":"Usage > Details on the main functions","what":"Revision analysis & reporting","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"function revision_analysis() main function package. provides descriptive statistics performs battery parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. Parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. function robust. reasons, test fails process, just skipped warning sent users possible cause failure. tests performed usual. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests. specifically, focus augmented Dickey-Fuller (ADF) test test presence unit root , cointegration, proceed ADF test residuals OLS regression two vintages. results tests also made available output function (section ‘varbased’). contrast, choice log-transformation left discretion users based knowledge series diagnostics various tests. default, log-transformation considered. part arguments revision_analysis() function, can choose view gap consider, restrict number releases investigation diagonal view selected /change default setting prior transformation data (including possibility add prior log-transformation data). function render_report() applied output revision_analysis() generate enhanced HTML PDF report including formatted summary results full explanations test (also included vignette ). formatted summary results display p-value test (except Theil’s tests value statistics provided) interpretation. appreciation ‘good’, ‘uncertain’, ‘bad’ ‘severe’ indeed associated test following usual statistical interpretation p-values orientation tests. allows quick visual interpretation results similar done GUI JDemetra+. addition function revision_analysis(), user can also perform tests individually want . list functions available package (therefore finding different functions corresponding individual tests), can Use help(‘name functions’) ?‘name functions’ information examples various functions.","code":"ls(\"package:rjd3revisions\")"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"output","dir":"Articles","previous_headings":"Usage","what":"Output","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"detailed results test part output returned function revision_analysis(). Alternatively, functions associated individual test give result specific test. addition visual report can get applying function render_report() output function revision_analysis(), can also apply usual summary() print() functions output. function summary(), particular, print formatted table report main results. print() provide unformatted information together extra ones. Finally plot() function applied output function get_revisions() provide visual revisions time.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"user-defined-thresholds","dir":"Articles","previous_headings":"Usage","what":"User-defined thresholds","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"possible user change default values thresholds considered function revision_analysis() (displayed functions summary.rjd3rev_rslts() render_report()) used make quality assessment results tests. Changing default values thresholds can done test global options. latter can set via options() queried via getOption(). Note default thresholds considered residuals diagnostics can also changed necessary. ’s customize threshold. Thresholds values defined ascending numeric vector. start -Inf element vector understood upper lower bound (depending null hypothesis) corresponding assessment. Furthermore, assessment “good” always one mentioned. Depending test, interpreted adequately. Finally, assessments ‘good’ (implicitly), ‘uncertain’, ‘bad’ ‘severe’ allowed don’t used necessary. example modify threshold values tests. list name test thresholds can modified can found list . augmented t-test, defining threshold values like , means results assessed severe p-value < 0.005, bad p-value 0.005 0.05, uncertain 0.05 0.1 good higher 0.1. far Theil U2 test concerned, given definition test (see section Theil’s Inequality Coefficient), results assessed good value test lower 0.5, uncertain, 0.5 0.75, bad 0.75 1 severe higher 1. possible options user can modified, together description default value. Finally, functions set_thresholds_to_default() set_all_thresholds_to_default() can used reset test thresholds default values.","code":"options(     augmented_t_threshold = c(severe = 0.005, bad = 0.05, uncertain = 0.1),     t_threshold = c(bad = 0.05, uncertain = 0.1),     theil_u2_threshold = c(uncertain = 0.5, bad = 0.75, severe = 1) )  rslt2 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) summary(rslt2) set_thresholds_to_default(\"t_threshold\") # or to reset all threshold options set_all_thresholds_to_default()  rslt3 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) summary(rslt3)"},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"tests-description-and-interpretation","dir":"Articles","previous_headings":"","what":"Tests description and interpretation","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Recall purpose parametric tests described : check relevancy preliminary estimates detect potential mean regression bias measure efficiency preliminary estimates (.e., whether revisions somehow predictable)","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"theil","dir":"Articles","previous_headings":"Tests description and interpretation > Relevancy","what":"Theil’s Inequality Coefficient","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"context revision analysis, Theil’s inequality coefficient, also known Theil’s U, provides measure accuracy set preliminary estimates (P) compared latter version (L). exists definitions Theil’s statistics leading different interpretation results. package, two definitions considered. first statistic, U1, given $$ U_1=\\frac{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}(L_t-P_t)^2}}{\\sqrt{\\frac{1}{n}\\sum^n_{t=1}L_t^2}+\\sqrt{\\frac{1}{n}\\sum^n_{t=1}P_t^2}} \\\\ \\\\ $$ U1 bounded 0 1. closer value U1 zero, better forecast method. However, classic definition Theil’s statistic suffers number limitations. particular, set near zero preliminary estimates always give value U1 statistic close 1 even though close latter estimates. second statistic, U2, given U2=∑t=1n(Pt+1−Lt+1Lt)2∑t=1n(Lt+1−LtLt)2 U_2=\\frac{\\sqrt{\\sum^n_{t=1}\\left(\\frac{P_{t + 1}-L_{t + 1}}{L_t}\\right)^2}}{\\sqrt{\\sum^n_{t=1}\\left(\\frac{L_{t + 1}-L_t}{L_t}\\right)^2}}  interpretation U2 differs U1. value 1 longer upper bound statistic threshold () preliminary estimates less () accurate naïve random walk forecast repeating last observed value (considering Pt+1=LtP_{t + 1}=L_t). Whenever can calculated (Lt≠0∀tL_t \\neq 0 ~\\forall t), U2 statistic preferred option evaluate relevancy preliminary estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"bias","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Bias","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"bias preliminary estimates may indicate inaccurate initial data inefficient compilation methods. However, must cautious bias shown statistically significant intend correct . Biases may change overtime, might correct errors longer apply. long interval, changes methodology definitions may also occur valid reasons expect non-zero mean revision.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"t-test-and-augmented-t-test","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"T-test and Augmented T-test","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether mean revision statistically different zero sample n, employ conventional t-statistic t=R¯s2/n t=\\frac{\\overline{R}}{\\sqrt{s^2/n}}  null hypothesis bias equal zero rejected, may give insight whether bias exists earlier estimates. t-test equivalent fitting linear regression revisions constant (.e. mean). Assumptions gaussianity revisions implied. One can release assumption autocorrelation adding model. Hence Rt=μ+εt,t=1,...,n R_t=\\mu+\\varepsilon_t, ~~t=1,...,n  errors thought serially correlated according AR(1) model, εt=γεt+ut,|γ|<1andut∼iid \\varepsilon_t=\\gamma\\varepsilon_t+u_t, ~~~ |\\gamma|<1 ~~u_t \\sim{iid}   auto-correlation error terms reduces number independent observations (degrees freedom) factor n(1−γ)(1+γ)n\\frac{(1-\\gamma)}{(1+\\gamma)} thus, variance mean adjusted upward accordingly. Hence, Augmented t-test calculated tadj=R¯s2(1+γ̂)n(1−γ̂) t_{adj}=\\frac{\\overline{R}}{\\sqrt{\\frac{s^2(1+\\hat{\\gamma})}{n(1-\\hat{\\gamma})}}}  γ̂=∑t=1n−1(Rt−R¯)(Rt+1−R¯)∑t=1n(Rt−R¯)2 \\hat{\\gamma}=\\frac{\\sum^{n-1}_{t=1}(R_t-\\overline{R})(R_{t + 1}-\\overline{R})}{\\sum^n_{t=1}(R_t-\\overline{R})^2}","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"slope-and-drift","dir":"Articles","previous_headings":"Tests description and interpretation > Bias","what":"Slope and drift","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model latter vintage (L) preliminary vintage (P) estimate intercept (drift) β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Lt=β0+β1Pt+εt L_t=\\beta_0+\\beta_1P_t+\\varepsilon_t  (augmented) t-test revisions gives information mean bias, regression enables assess mean regression bias. regression bias occur, example, preliminary estimates tend low latter estimates relatively high high latter estimates relatively low. case, may result positive value intercept value β1<1\\beta_1<1. evaluate whether mean regression bias present, employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=1\\beta_1 = 1. Recall OLS regressions always come along rather strict assumptions. Users check diagnostics draw necessary conclusions .","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"efficiency","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Efficiency","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Efficiency tests evaluate whether preliminary estimates “efficient” forecast latter estimates. information used efficiently time preliminary estimate, revisions predictable therefore neither correlated preliminary estimates display relationship one vintage another. section focuses two points. Predictability revisions tested even Orthogonality SignalVSNoise sections.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-on-previous-estimates","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions on previous estimates","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions (R) preliminary vintage (P) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rt=β0+β1Pt+εt,t=1,...,n R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n  revisions affected preliminary estimates, means efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-revisions-from-latter-vintages-on-revisions-from-the-previous-vintages","dir":"Articles","previous_headings":"Tests description and interpretation > Efficiency","what":"Regression of revisions from latter vintages on revisions from the previous vintages","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions previous vintages (Rv−1R_{v-1}) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rv,t=β0+β1Rv−1,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\beta_1R_{v-1,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"orthogonality","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Orthogonality","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Orthogonality tests evaluate whether revisions older vintages affect latter revisions. section also includes autocorrelation seasonality tests given set revisions. significant correlation revisions subsequent periods, may witness degree predictability revision process.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-previous-revisions-rv_1-rv_2rv_p","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on previous revisions (Rv_1, Rv_2,…Rv_p)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions p previous vintages (Rv−1,...,Rv−pR_{v-1}, ..., R_{v-p}) estimate intercept β0\\beta_0 slope coefficients β1,...,βp\\beta_1, ..., \\beta_p OLS. model Rv,t=β0+∑=1pβiRv−,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\sum^p_{=1}\\beta_{}R_{v-,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test intercept parameter null hypothesis β0=0\\beta_0 = 0 F-test check null hypothesis β1=β2=...=βp=0\\beta_1 = \\beta_2=...=\\beta_p=0. Diagnostics residuals verified","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"regression-of-latter-revisions-rv-on-revisions-from-a-specific-vintage-rv_k","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Regression of latter revisions (Rv) on revisions from a specific vintage (Rv_k)","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"assume linear regression model revisions latter vintages (RvR_v) revisions specific vintage (Rv−kR_{v-k}) estimate intercept β0\\beta_0 slope coefficient β1\\beta_1 OLS. model Rv,t=β0+β1Rv−k,t+εt,t=1,...,n R_{v,t}=\\beta_0+\\beta_1R_{v-k,t}+\\varepsilon_t, ~~t=1,...,n  latter revisions predictable previous revisions, means preliminary estimates efficient improved. employ conventional t-test parameters null hypothesis β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. Diagnostics residuals verified.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-autocorrelations-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of autocorrelations in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether autocorrelation present revisions, employ Ljung-Box test. Ljung-Box test considers together group autocorrelation coefficients certain lag k therefore sometimes referred portmanteau test. purpose revision analysis, expect relatively small number observations, decided restrict number lags considered k=2k=2. Hence, users can also make distinction autocorrelation seasonal lags (see seasonality tests ). null hypothesis autocorrelation. test statistic given Q=n(n+2)∑=1kρ̂i2n−Q=n(n+2)\\sum^k_{=1}\\frac{\\hat{\\rho}_i^2}{n-}  n sample size, ρ̂i2\\hat{\\rho}_i^2 sample autocorrelation lag k=2k=2 number lags tested. null hypothesis, Q∼χ2(k)Q\\sim\\chi^2(k). Q statistically different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"test-of-seasonality-in-revisions","dir":"Articles","previous_headings":"Tests description and interpretation > Orthogonality","what":"Test of seasonality in revisions","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"test whether seasonality present revisions, employ two tests: parametric QS test non-parametric Friedman test. Note seasonality tests always performed first-differentiated series avoid misleading results. QS test variant Ljung-Box test computed seasonal lags, consider positive auto-correlations QS=n(n+2)∑=1k[max(0,γ̂.l)]2n−.l QS=n(n+2)\\sum^k_{=1}\\frac{\\left[max(0,\\hat{\\gamma}_{.l})\\right]^2}{n-.l}  k=2k=2, first second seasonal lags considered. Thus, test checks correlation actual observation observations lagged one two years. Note l=12l=12 dealing monthly observations, consider auto-covariances γ̂12\\hat{\\gamma}_{12} γ̂24\\hat{\\gamma}_{24} alone. turn k=4k=4 case quarterly data. null hypothesis autocorrelation seasonal lags, QS∼χmodified2(k)QS\\sim \\chi_{modified}^2(k). elimination negative correlations calls indeed modified χ2\\chi^2 distribution. done using simulation techniques. Friedman test requires distributional assumptions. uses rankings observations. constructed follows. Consider first matrix data {xij}nxk\\{x_{ij}\\}_{nxk} n rows (blocks, .e. number years sample), k columns (treatments, .e., either 12 months 4 quarters, depending frequency data). data matrix needs replaced new matrix {rij}nxk\\{r_{ij}\\}_{nxk}, entry rijr_{ij} rank xijx_{ij} within block . test statistic given Q=n∑j=1k(r̃.j−r̃)21n(k−1)∑=1n∑j=1k(rij−r̃)2 Q=\\frac{n\\sum^k_{j=1}(\\tilde{r}_{.j}-\\tilde{r})^2}{\\frac{1}{n(k-1)}\\sum^n_{=1}\\sum^k_{j=1}(r_{ij}-\\tilde{r})^2}  denominator represents variance average ranking across treatments j relative total. null hypothesis (stable) seasonality, Q∼χ2(k−1)Q\\sim \\chi^2(k-1). non-seasonal autocorrelation tests lower lags, QS Q significantly different zero, revision process may locally biased sense latter revisions related previous ones.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"signal-vs-noise","dir":"Articles","previous_headings":"Tests description and interpretation","what":"Signal vs Noise","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Regression techniques can also used determine whether revisions classified ‘news’ ‘noise’. also closely related notion efficiency developed earlier. correlation revisions preliminary estimates significantly different zero, implies fully utilize information available time preliminary estimates. sense, conclude preliminary estimates better revisions embody noise. model test whether revisions “noise” similar first model established earlier test efficiency: Rt=β0+β1Pt+εt,t=1,...,n R_t=\\beta_0+\\beta_1P_t+\\varepsilon_t, ~~t=1,...,n  employ F-test parameters test jointly β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. null hypothesis rejected, suggest revisions likely include noise. Diagnostics residuals verified. hand, revisions correlated latter estimates. case, means information becomes available compilation preliminary latter estimates captured estimation process latter estimates. sense, revision process warranted conclude revisions embody news. model test whether revisions “news” Rt=β0+β1Lt+εt,t=1,...,n R_t=\\beta_0+\\beta_1L_t+\\varepsilon_t, ~~t=1,...,n  employ F-test parameters test jointly β0=0\\beta_0 = 0 β1=0\\beta_1 = 0. null hypothesis rejected, good thing suggests revisions incorporate news. Note even reject null hypothesis conclude revisions incorporate news, necessarily mean revisions efficient might still predicted variables included estimation process.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/articles/rjd3revisions.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Revision analysis tool with JDemetra+ version 3.x algorithms","text":"Ares, David. 2013. “Tool Revision Analysis : Technical Report.” DI/06769. DG ESTAT. Cook, Steve. 2019. “Forecast Evaluation Using Theil’s Inequality Coefficients.” Swansea University; https://www.economicsnetwork.ac.uk/showcase/cook_theil. Fixler, Dennis. 2007. “Interpret Whether Revisions Economic Variables Reflect ‘News’ ‘Noise’.” OECD. McKenzie, Richard, Michela Gamba. 2007. “Interpreting Results Revision Analyses: Recommended Summary Statistics.” OECD. Pitton, Laurent, David Ares. 2013a. “Tool Revision Analysis : Regression Based Parametric Analysis.” DI/06769. DG ESTAT. Pitton, Laurent, David Ares. 2013b. “Tool Revision Analysis : VAR Based Models Final Equation.” DI/06769. DG ESTAT. Smyk, Anna, Tanguy Barthelemy, Karsten Webel al. 2024. “JDemetra+ Documentation.” INSEE; https://jdemetra-new-documentation.netlify.app/.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Corentin Lemasson. Author, maintainer. Tanguy Barthelemy. Author, artist.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lemasson C, Barthelemy T (2025). rjd3revisions: Revision analysis 'JDemetra+ 3.x'. R package version 1.4.0.9000, https://rjdverse.github.io/rjd3revisions/, https://github.com/rjdverse/rjd3revisions.","code":"@Manual{,   title = {rjd3revisions: Revision analysis with 'JDemetra+ 3.x'},   author = {Corentin Lemasson and Tanguy Barthelemy},   year = {2025},   note = {R package version 1.4.0.9000, https://rjdverse.github.io/rjd3revisions/},   url = {https://github.com/rjdverse/rjd3revisions}, }"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"rjd3revisions-","dir":"","previous_headings":"","what":"Revision analysis with JDemetra+ 3.x","title":"Revision analysis with JDemetra+ 3.x","text":"economic indicators published several times given reporting period, entails revisions time horizon changes. rjd3revisions performs battery tests revisions generates report results. various tests enable users detect potential bias sources inefficiency preliminary estimates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Revision analysis with JDemetra+ 3.x","text":"Running rjd3 packages requires Java 17 higher. set configuration R explained ","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"latest-release","dir":"","previous_headings":"Installation","what":"Latest release","title":"Revision analysis with JDemetra+ 3.x","text":"get current stable version (latest release): GitHub: r-universe:","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3revisions@*release\", build_vignettes = TRUE) install.packages(\"rjd3revisions\", repos = c(\"https://rjdverse.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Revision analysis with JDemetra+ 3.x","text":"can install development version rjd3revisions GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"rjdverse/rjd3revisions\", build_vignettes = TRUE)"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Revision analysis with JDemetra+ 3.x","text":"First need get input data set data.frame R specific format . Note missing values can either mentioned NA (example ) included input best convenience user.","code":"library(\"rjd3revisions\") #>  #> Attaching package: 'rjd3revisions' #> The following object is masked from 'package:utils': #>  #>     View"},{"path":[]},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"format-3-horizontal-view","dir":"","previous_headings":"Usage","what":"Format 3: horizontal view","title":"Revision analysis with JDemetra+ 3.x","text":"Depending location input data, can use create_vintages_from_xlsx() create_vintages_from_csv(), generic function create_vintages() create vintages. can create vintages plot vintages inspect revisions (optional)   make analysis  Finally create report get summary results, can use","code":"set.seed(7)  # Examples long_view <- simulate_long(     periodicity = 4,      n_period = 4 * 10,      n_revision = 7,      start_period = as.Date(\"2000-01-01\") ) vintages <- create_vintages(long_view, periodicity = 4) plot(vintages, lwd = 2) revisions <- get_revisions(vintages, gap = 2) plot(revisions) rslt <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3)  print(rslt) #>                                            Transf. [Release[2]]-[Release[1]] #> Relevancy - Theil U2                          None              Good (0.339) #> Bias1 T-test                                  None              Good (0.798) #> Bias2 Augmented T-test                        None              Good (0.823) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.347) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.232) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.166) #> Efficiency1 (Ols R on P) - Reg.            Delta 1              Good (0.107) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.417) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (0.993) #> Orthogonality4 Seasonality (Friedman)      Delta 1              Good (0.137) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1              Good (0.082) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.053) #>                                            [Release[3]]-[Release[2]] #> Relevancy - Theil U2                                    Good (0.225) #> Bias1 T-test                                            Good (0.805) #> Bias2 Augmented T-test                                  Good (0.806) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.584) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.624) #> Efficiency1 (Ols R on P) - Mean                         Good (0.300) #> Efficiency1 (Ols R on P) - Reg.                         Good (0.240) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.818) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.298) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.818) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.702) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.818) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.298) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.999) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                   Good (0.769) #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.248) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.856) # summary(rslt) View(rslt) render_report(     rslt,     output_file = \"my_report\",     output_dir = tempdir(),     output_format = \"pdf_document\" )"},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"additional-information","dir":"","previous_headings":"","what":"Additional information","title":"Revision analysis with JDemetra+ 3.x","text":"README.md file gives quick example proceed. Consult vignette (browseVignettes(\"rjd3revisions\")) documentation function (example: ?create_vintages, ?revision_analysis) see current possibilities tool.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"package-maintenance-and-contributing","dir":"","previous_headings":"","what":"Package Maintenance and contributing","title":"Revision analysis with JDemetra+ 3.x","text":"contribution welcome done pull requests /issues. pull requests include updated tests updated documentation. functionality changed, docstrings added updated.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Revision analysis with JDemetra+ 3.x","text":"code project licensed European Union Public Licence (EUPL).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":null,"dir":"Reference","previous_headings":"","what":"View function for objects of class ","title":"View function for objects of class ","text":"Display different view different panel visualize data table / matrix format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View function for objects of class ","text":"","code":"View(x, ...)  # Default S3 method View(x, ...)  # S3 method for class 'rjd3rev_vintages' View(x, type = c(\"all\", \"long\", \"horizontal\", \"vertical\", \"diagonal\"), ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View function for objects of class ","text":"x object class \"rjd3rev_vintages\". ... arguments passed View method. type type view display","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"View function for objects of class ","text":"Generate view vintages different format. type argument, can choose view display. can choose long, horizontal, vertical diagonal view.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","title":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","text":"View function objects class rjd3rev_rslts","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","text":"","code":"# S3 method for class 'rjd3rev_rslts' View(x, type = c(\"summary\", \"stats-desc\", \"revisions\", \"tests\"), ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/View.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"View function for objects of class rjd3rev_rslts — View.rjd3rev_rslts","text":"x object class rjd3rev_rslts type type view display ... arguments passed View.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate bias using t-test and augmented t-test — bias","title":"Estimate bias using t-test and augmented t-test — bias","text":"Estimate bias using t-test augmented t-test","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"bias(revisions.view, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate bias using t-test and augmented t-test — bias","text":"revisions.view mts object. Vertical diagonal view get_revisions() output na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/bias.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate bias using t-test and augmented t-test — bias","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) bias(revisions[[\"diagonal_view\"]]) #>                            N    estimate     stderr      tstat     pvalue #> [Release[2]]-[Release[1]] 24  0.68520075 0.51299572  1.3356851 0.19472020 #> [Release[3]]-[Release[2]] 16 -0.53245504 0.22177933 -2.4008325 0.02977643 #> [Release[4]]-[Release[3]] 14  0.09985965 0.09404693  1.0618066 0.30765162 #> [Release[5]]-[Release[4]]  6  0.04276859 0.05596890  0.7641493 0.47926710 #>                                 ar(1) stderr.adjusted tstat.adjusted #> [Release[2]]-[Release[1]]  0.37790842      0.76347841      0.8974723 #> [Release[3]]-[Release[2]]  0.18147355      0.26645061     -1.9983255 #> [Release[4]]-[Release[3]] -0.04636472      0.08978302      1.1122330 #> [Release[5]]-[Release[4]] -0.44250648      0.03479427      1.2291848 #>                           pvalue.adjusted #> [Release[2]]-[Release[1]]      0.38897309 #> [Release[3]]-[Release[2]]      0.07080973 #> [Release[4]]-[Release[3]]      0.28314198 #> [Release[5]]-[Release[4]]      0.23730793"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vector with date — check_date_year","title":"Check vector with date — check_date_year","text":"Useful functions check vector represent dates object","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vector with date — check_date_year","text":"","code":"check_date_year(x)  check_date_quarter(x)  check_date_month(x)  check_format_date(x, date_format = \"%Y-%m-%d\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vector with date — check_date_year","text":"x vector Date, character, integer POSIXt object representing date object date_format character string (vector string) corresponding format(s) used x","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vector with date — check_date_year","text":"boolean","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check vector with date — check_date_year","text":"function check_date_year checks pattern AAAA recognised. , date assimilated first January year AAAA. function check_date_quarter checks quarterly formats. accepted formats (example  third quarter 2000) : 2000 T3 2000 Q3 2000t3 2000q3 2000T3 2000Q3 2000 t3 2000 q3 one previous formats recognised, date assimilated first day quarter year (example 2000 Q3 assimilated 2000-07-01). function check_date_month checks monthly formats. accepted formats (example march 2000) : 2000 M3 2000 M03 2000 m3 2000 m03 2000M3 2000M03 2000m3 2000m03 one previous formats recognised, date assimilated first day month year (example 2000 M3 assimilated 2000-03-01). function check_format_date checks object x match pattern (one patterns) date_format.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check-date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vector with date — check_date_year","text":"","code":"# check_date_year --------------------------------------------------  # Good date (representing years) check_date_year(x = c(\"2000\", \"2001\", \"2002\", \"2003\")) #> [1] TRUE check_date_year(x = 2020:2024) #> [1] TRUE  # Bad date check_date_year(x = \"2000 \") #> [1] FALSE check_date_year(x = 1:4) #> [1] FALSE  # check_date_quarter -----------------------------------------------  # Good date check_date_quarter(x = c(\"2000 q2\", \"2000 q3\", \"2000 q4\", \"2001 q1\")) #> [1] TRUE check_date_quarter(x = c(\"2010T1\", \"2010T2\", \"2010T3\", \"2010T4\")) #> [1] TRUE check_date_quarter(x = c(\"2020Q1\", \"2020Q2\", \"2020Q3\", \"2020Q4\")) #> [1] TRUE check_date_quarter(x = c(\"2020Q01\", \"2020Q02\", \"2020Q03\", \"2020Q04\")) #> [1] TRUE  # Bad date check_date_quarter(x = \"2000 \") #> [1] FALSE check_date_quarter(x = 1:4) #> [1] FALSE check_date_quarter(x = \"2000 q 2\") #> [1] FALSE check_date_quarter(x = \"2000 q12\") #> [1] FALSE  # check_date_month -----------------------------------------------  # Good date (representing years) check_date_month(x = c(\"2000 m2\", \"2000 m3\", \"2000 m4\", \"2000 m5\")) #> [1] TRUE check_date_month(x = c(\"2010M9\", \"2010M10\", \"2010M11\", \"2010M12\")) #> [1] TRUE check_date_month(x = c(\"2020M111\", \"2020M12\", \"2021M01\", \"2021M02\")) #> [1] FALSE check_date_month(x = c(\"2020M01\", \"2020M02\", \"2020M03\", \"2020M04\")) #> [1] TRUE  # Bad date check_date_month(x = \"2000 \") #> [1] FALSE check_date_month(x = 1:4) #> [1] FALSE check_date_month(x = \"2000 m 2\") #> [1] FALSE check_date_month(x = \"2000 m13\") #> [1] FALSE  # check_format_date -----------------------------------------------  # Good date (representing years) check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = \"%Y-%m-%d\") #> [1] TRUE check_format_date(x = c(\"01/08/2010\", \"01/09/2010\", \"01/10/2010\", \"01/11/2010\",                         \"01/12/2010\", \"01/01/2011\", \"01/02/2011\", \"01/03/2011\",                         \"01/04/2011\", \"01/05/2011\"),                  date_format = \"%d/%m/%Y\") #> [1] TRUE check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = c(\"%Y-%m-%d\", \"%d/%m/%Y\")) #> [1] TRUE  # Bad date check_format_date(x = c(\"2000-01-01\", \"2000-02-01\", \"2000-03-01\", \"2000-04-01\",                         \"2000-05-01\", \"2000-06-01\", \"2000-07-01\", \"2000-08-01\",                         \"2000-09-01\", \"2000-10-01\"),                  date_format = \"%d/%m/%Y\") #> [1] FALSE check_format_date(x = c(\"01/08/2010\", \"01/09/2010\", \"01/10/2010\", \"01/11/2010\",                         \"01/12/2010\", \"01/01/2011\", \"01/02/2011\", \"01/03/2011\",                         \"01/04/2011\", \"01/05/2011\"),                  date_format = \"%Y-%m-%d\") #> [1] FALSE"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check horizontal format — check_horizontal","title":"Check horizontal format — check_horizontal","text":"Check horizontal format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check horizontal format — check_horizontal","text":"","code":"check_horizontal(x, ...)  # S3 method for class 'data.frame' check_horizontal(x, ...)  # S3 method for class 'matrix' check_horizontal(x, date_format = \"%Y-%m-%d\")  # Default S3 method check_horizontal(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check horizontal format — check_horizontal","text":"x formatted data.frame containing input horizontal format ... Arguments passed check_horizontal according class object x date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check horizontal format — check_horizontal","text":"input date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_horizontal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check horizontal format — check_horizontal","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) horizontal_format <- rjd3revisions:::from_long_to_horizontal(long_format) check_horizontal(horizontal_format) #>            2020-01-01 2020-02-01 2020-03-01 2020-04-01 2020-05-01 2020-06-01 #> 2020-01-29   5.682236         NA         NA         NA         NA         NA #> 2020-05-21   5.888302   4.477665  10.020547   18.95730   21.52292         NA #> 2021-03-28   5.882799   5.300199   9.038902   15.12845   17.89364   15.11033 #> 2021-04-28   6.011332   5.590409  10.567581   13.86146   18.14009   15.66935 #> 2021-08-19   6.176073   5.915522  10.327862   14.76595   17.55082   14.93441 #> 2021-09-05   6.165749   5.981047  10.509387   14.83770   17.45763   14.93367 #>            2020-07-01 2020-08-01 2020-09-01 2020-10-01 2020-11-01 2020-12-01 #> 2020-01-29         NA         NA         NA         NA         NA         NA #> 2020-05-21         NA         NA         NA         NA         NA         NA #> 2021-03-28   12.09543   10.45360   15.99204   19.71226   25.41950   23.85058 #> 2021-04-28   10.56493   12.11892   17.46079   23.24339   21.65623   21.21424 #> 2021-08-19   12.13422   13.29101   16.59948   21.75010   23.03324   20.84615 #> 2021-09-05   11.73156   12.85003   16.52516   21.61187   22.39867   20.50059 #>            2021-01-01 2021-02-01 2021-03-01 2021-04-01 2021-05-01 2021-06-01 #> 2020-01-29         NA         NA         NA         NA         NA         NA #> 2020-05-21         NA         NA         NA         NA         NA         NA #> 2021-03-28   16.89140   21.05332   24.57955         NA         NA         NA #> 2021-04-28   19.05996   22.54893   22.39893   22.31513         NA         NA #> 2021-08-19   18.34627   22.16829   22.83952   22.75863   23.89293   21.80339 #> 2021-09-05   18.01705   21.29107   22.26034   24.07347   24.98238   21.03514 #>            2021-07-01 2021-08-01 2021-09-01 2021-10-01 2021-11-01 2021-12-01 #> 2020-01-29         NA         NA         NA         NA         NA         NA #> 2020-05-21         NA         NA         NA         NA         NA         NA #> 2021-03-28         NA         NA         NA         NA         NA         NA #> 2021-04-28         NA         NA         NA         NA         NA         NA #> 2021-08-19   24.12522   28.26140         NA         NA         NA         NA #> 2021-09-05   22.54474   27.75989   28.86192         NA         NA         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Check long format — check_long","title":"Check long format — check_long","text":"Check long format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check long format — check_long","text":"","code":"check_long(x, date_format = \"%Y-%m-%d\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check long format — check_long","text":"x formatted data.frame containing input long format date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check long format — check_long","text":"input column date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check long format — check_long","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) check_long(long_format) #>        revdate       time  obs_values #> 1   2020-05-19 2020-01-01   7.4483440 #> 2   2020-05-19 2020-02-01  13.6484059 #> 3   2020-05-19 2020-03-01   4.1018045 #> 4   2020-05-19 2020-04-01   7.5425523 #> 5   2020-05-19 2020-05-01   5.1088680 #> 6   2020-05-19 2020-06-01          NA #> 7   2020-05-19 2020-07-01          NA #> 8   2020-05-19 2020-08-01          NA #> 9   2020-05-19 2020-09-01          NA #> 10  2020-05-19 2020-10-01          NA #> 11  2020-05-19 2020-11-01          NA #> 12  2020-05-19 2020-12-01          NA #> 13  2020-05-19 2021-01-01          NA #> 14  2020-05-19 2021-02-01          NA #> 15  2020-05-19 2021-03-01          NA #> 16  2020-05-19 2021-04-01          NA #> 17  2020-05-19 2021-05-01          NA #> 18  2020-05-19 2021-06-01          NA #> 19  2020-05-19 2021-07-01          NA #> 20  2020-05-19 2021-08-01          NA #> 21  2020-05-19 2021-09-01          NA #> 22  2020-05-19 2021-10-01          NA #> 23  2020-05-19 2021-11-01          NA #> 24  2020-05-19 2021-12-01          NA #> 25  2020-07-30 2020-01-01   8.0660644 #> 26  2020-07-30 2020-02-01   9.5815884 #> 27  2020-07-30 2020-03-01   7.0233632 #> 28  2020-07-30 2020-04-01   5.8889903 #> 29  2020-07-30 2020-05-01   3.8793858 #> 30  2020-07-30 2020-06-01   3.4633294 #> 31  2020-07-30 2020-07-01   5.5083122 #> 32  2020-07-30 2020-08-01          NA #> 33  2020-07-30 2020-09-01          NA #> 34  2020-07-30 2020-10-01          NA #> 35  2020-07-30 2020-11-01          NA #> 36  2020-07-30 2020-12-01          NA #> 37  2020-07-30 2021-01-01          NA #> 38  2020-07-30 2021-02-01          NA #> 39  2020-07-30 2021-03-01          NA #> 40  2020-07-30 2021-04-01          NA #> 41  2020-07-30 2021-05-01          NA #> 42  2020-07-30 2021-06-01          NA #> 43  2020-07-30 2021-07-01          NA #> 44  2020-07-30 2021-08-01          NA #> 45  2020-07-30 2021-09-01          NA #> 46  2020-07-30 2021-10-01          NA #> 47  2020-07-30 2021-11-01          NA #> 48  2020-07-30 2021-12-01          NA #> 49  2020-11-20 2020-01-01  10.5043611 #> 50  2020-11-20 2020-02-01   9.0909366 #> 51  2020-11-20 2020-03-01   5.3260699 #> 52  2020-11-20 2020-04-01   6.9986011 #> 53  2020-11-20 2020-05-01   4.6613056 #> 54  2020-11-20 2020-06-01   4.9309677 #> 55  2020-11-20 2020-07-01   4.8066898 #> 56  2020-11-20 2020-08-01   6.0311963 #> 57  2020-11-20 2020-09-01   6.1018909 #> 58  2020-11-20 2020-10-01   1.3572720 #> 59  2020-11-20 2020-11-01   2.7940947 #> 60  2020-11-20 2020-12-01          NA #> 61  2020-11-20 2021-01-01          NA #> 62  2020-11-20 2021-02-01          NA #> 63  2020-11-20 2021-03-01          NA #> 64  2020-11-20 2021-04-01          NA #> 65  2020-11-20 2021-05-01          NA #> 66  2020-11-20 2021-06-01          NA #> 67  2020-11-20 2021-07-01          NA #> 68  2020-11-20 2021-08-01          NA #> 69  2020-11-20 2021-09-01          NA #> 70  2020-11-20 2021-10-01          NA #> 71  2020-11-20 2021-11-01          NA #> 72  2020-11-20 2021-12-01          NA #> 73  2021-01-16 2020-01-01   9.8799381 #> 74  2021-01-16 2020-02-01   8.8005489 #> 75  2021-01-16 2020-03-01   5.3536986 #> 76  2021-01-16 2020-04-01   6.3006560 #> 77  2021-01-16 2020-05-01   4.4619811 #> 78  2021-01-16 2020-06-01   3.5093486 #> 79  2021-01-16 2020-07-01   3.6651335 #> 80  2021-01-16 2020-08-01   6.2225492 #> 81  2021-01-16 2020-09-01   3.9755353 #> 82  2021-01-16 2020-10-01   4.6526147 #> 83  2021-01-16 2020-11-01   5.9901850 #> 84  2021-01-16 2020-12-01   0.3171446 #> 85  2021-01-16 2021-01-01 -11.1926160 #> 86  2021-01-16 2021-02-01          NA #> 87  2021-01-16 2021-03-01          NA #> 88  2021-01-16 2021-04-01          NA #> 89  2021-01-16 2021-05-01          NA #> 90  2021-01-16 2021-06-01          NA #> 91  2021-01-16 2021-07-01          NA #> 92  2021-01-16 2021-08-01          NA #> 93  2021-01-16 2021-09-01          NA #> 94  2021-01-16 2021-10-01          NA #> 95  2021-01-16 2021-11-01          NA #> 96  2021-01-16 2021-12-01          NA #> 97  2021-04-26 2020-01-01   9.9905305 #> 98  2021-04-26 2020-02-01   8.4699640 #> 99  2021-04-26 2020-03-01   5.4019122 #> 100 2021-04-26 2020-04-01   6.2843512 #> 101 2021-04-26 2020-05-01   5.3090112 #> 102 2021-04-26 2020-06-01   4.2801405 #> 103 2021-04-26 2020-07-01   4.6265849 #> 104 2021-04-26 2020-08-01   6.2444954 #> 105 2021-04-26 2020-09-01   3.3987596 #> 106 2021-04-26 2020-10-01   3.7587823 #> 107 2021-04-26 2020-11-01   5.5993642 #> 108 2021-04-26 2020-12-01   0.1200310 #> 109 2021-04-26 2021-01-01  -8.0693524 #> 110 2021-04-26 2021-02-01 -11.5527353 #> 111 2021-04-26 2021-03-01 -12.5860314 #> 112 2021-04-26 2021-04-01 -18.2876905 #> 113 2021-04-26 2021-05-01          NA #> 114 2021-04-26 2021-06-01          NA #> 115 2021-04-26 2021-07-01          NA #> 116 2021-04-26 2021-08-01          NA #> 117 2021-04-26 2021-09-01          NA #> 118 2021-04-26 2021-10-01          NA #> 119 2021-04-26 2021-11-01          NA #> 120 2021-04-26 2021-12-01          NA #> 121 2021-11-14 2020-01-01   9.7317592 #> 122 2021-11-14 2020-02-01   8.4681354 #> 123 2021-11-14 2020-03-01   5.3371527 #> 124 2021-11-14 2020-04-01   6.1654529 #> 125 2021-11-14 2020-05-01   4.9058073 #> 126 2021-11-14 2020-06-01   4.1539934 #> 127 2021-11-14 2020-07-01   4.3489164 #> 128 2021-11-14 2020-08-01   5.9327367 #> 129 2021-11-14 2020-09-01   3.8122991 #> 130 2021-11-14 2020-10-01   4.6019465 #> 131 2021-11-14 2020-11-01   5.7078327 #> 132 2021-11-14 2020-12-01  -1.8765972 #> 133 2021-11-14 2021-01-01  -8.8368913 #> 134 2021-11-14 2021-02-01 -15.3915418 #> 135 2021-11-14 2021-03-01 -15.3487272 #> 136 2021-11-14 2021-04-01 -17.6904886 #> 137 2021-11-14 2021-05-01 -20.9386737 #> 138 2021-11-14 2021-06-01 -29.4164986 #> 139 2021-11-14 2021-07-01 -33.7900663 #> 140 2021-11-14 2021-08-01 -31.4756765 #> 141 2021-11-14 2021-09-01 -29.1490352 #> 142 2021-11-14 2021-10-01 -25.8862476 #> 143 2021-11-14 2021-11-01 -28.8929123 #> 144 2021-11-14 2021-12-01          NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":null,"dir":"Reference","previous_headings":"","what":"Check vertical format — check_vertical","title":"Check vertical format — check_vertical","text":"Check vertical format","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check vertical format — check_vertical","text":"","code":"check_vertical(x, ...)  # S3 method for class 'mts' check_vertical(x, periodicity, date_format = \"%Y-%m-%d\", ...)  # S3 method for class 'data.frame' check_vertical(x, ...)  # S3 method for class 'matrix' check_vertical(x, periodicity, date_format = \"%Y-%m-%d\", ...)  # Default S3 method check_vertical(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check vertical format — check_vertical","text":"x formatted data.frame containing input vertical format ... Arguments passed check_vertical according class object x periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check vertical format — check_vertical","text":"input ts object revision date formatted","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/check_vertical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check vertical format — check_vertical","text":"","code":"long_format <- rjd3revisions:::simulate_long(     start_period = as.Date(\"2020-01-01\"),     n_period = 24,     n_revision = 6,     periodicity = 12L ) vertical_format <- rjd3revisions:::from_long_to_vertical(long_format, periodicity = 12L) check_vertical(vertical_format) #>          2020-07-21 2020-09-19 2020-10-30 2021-01-27 2021-04-05 2021-05-10 #> Jan 2020   17.74438   14.81439   15.31656   15.59709   15.45832   15.67333 #> Feb 2020   19.48379   17.73673   19.46343   19.47018   19.30601   19.41495 #> Mar 2020   32.12770   27.59642   27.23370   28.05008   27.96610   27.96489 #> Apr 2020   30.41357   29.34196   29.64736   30.15862   29.45643   29.76080 #> May 2020   34.16074   32.48535   32.44867   33.32270   33.11976   32.91407 #> Jun 2020   31.06165   29.99436   29.00808   29.87555   29.99243   29.91109 #> Jul 2020   30.17426   32.54359   32.20112   32.33656   32.44320   32.42356 #> Aug 2020         NA   32.36805   29.67663   31.02521   30.56763   30.52123 #> Sep 2020         NA   30.63214   33.43325   33.01941   33.12313   33.09439 #> Oct 2020         NA         NA   31.62382   31.48291   30.99383   31.16888 #> Nov 2020         NA         NA         NA   35.63106   34.22295   34.33658 #> Dec 2020         NA         NA         NA   33.34942   36.41850   35.74701 #> Jan 2021         NA         NA         NA   41.60235   40.07063   40.20986 #> Feb 2021         NA         NA         NA         NA   41.50796   39.33363 #> Mar 2021         NA         NA         NA         NA   46.99544   48.24219 #> Apr 2021         NA         NA         NA         NA   53.36292   52.16409 #> May 2021         NA         NA         NA         NA         NA   51.29232 #> Jun 2021         NA         NA         NA         NA         NA         NA #> Jul 2021         NA         NA         NA         NA         NA         NA #> Aug 2021         NA         NA         NA         NA         NA         NA #> Sep 2021         NA         NA         NA         NA         NA         NA #> Oct 2021         NA         NA         NA         NA         NA         NA #> Nov 2021         NA         NA         NA         NA         NA         NA #> Dec 2021         NA         NA         NA         NA         NA         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":null,"dir":"Reference","previous_headings":"","what":"Cointegration tests (Engle-Granger) — cointegration","title":"Cointegration tests (Engle-Granger) — cointegration","text":"Cointegration tests (Engle-Granger)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"cointegration(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cointegration tests (Engle-Granger) — cointegration","text":"vintages.view mts object. Vertical diagonal view create_vintages() output adfk Number lags consider ADF na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/cointegration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cointegration tests (Engle-Granger) — cointegration","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) cointegration(vintages[[\"diagonal_view\"]]) #>                                 value    stderr statistic       pvalue #> [Release[1]]_[Release[2]] -0.15784481 0.2616556 -4.425071 9.381539e-05 #> [Release[1]]_[Release[3]]  0.15110482 0.2752255 -3.084362 3.579184e-03 #> [Release[1]]_[Release[4]] -0.02379187 0.3859703 -2.652514 1.065758e-02 #> [Release[1]]_[Release[5]]  0.06875468 0.2945444 -3.161647 3.534476e-03 #> [Release[2]]_[Release[3]] -0.08090398 0.2722232 -3.970654 3.798906e-04 #> [Release[2]]_[Release[4]] -0.45645464 0.3425513 -4.251786 2.691065e-04 #> [Release[2]]_[Release[5]] -0.35415901 0.4220626 -3.208432 3.184585e-03 #> [Release[3]]_[Release[4]]  0.21920701 0.3756054 -2.078759 3.774495e-02 #> [Release[3]]_[Release[5]] -0.69976276 0.5176505 -3.283611 2.692004e-03 #> [Release[4]]_[Release[5]] -0.49961153 0.5161289 -2.905498 6.226192e-03"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintage tables — create_vintages","title":"Create vintage tables — create_vintages","text":"Create vintage tables data.frame, matrix mts object R","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintage tables — create_vintages","text":"","code":"create_vintages(x, ...)  # S3 method for class 'data.frame' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # S3 method for class 'mts' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # S3 method for class 'matrix' create_vintages(   x,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   vintage_selection,   ... )  # Default S3 method create_vintages(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintage tables — create_vintages","text":"x formatted object containing input. can type data.frame, matrix mts must represent one multiple vintage views (selected argument type. ... Arguments passed create_vintages according class object x type character specifying type representation input \"long\", \"horizontal\" \"vertical\" approach. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates. vintage_selection Date vector (character vector format date_format) length <= 2, specifying range revision dates retain. example: c(start = \"2022-02-02\", end = \"2022-08-05\") c(start = .Date(\"2022-02-02\"), end = .Date(\"2022-08-05\")) keep vintages whose revision date 02 Feb. 2022 05 Aug. 2022. missing (default), whole range selected.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintage tables — create_vintages","text":"object class rjd3rev_vintages contains four different view revision","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create vintage tables — create_vintages","text":"input data.frame, function displays vintages considering three different data structures views: vertical, horizontal diagonal. See details section information different views. function returns object class rjd3rev_vintages can used input main function revision_analysis. four different vintage views: vertical view shows observed values time period different vintages. approach robust changes base year data redefinition. drawback approach comparing historical series different vintages, need look smallest common number observations consequently number observations circumstances small. Moreover, often case revision last points series number observations small test anything. horizontal view shows observed values different vintages period. quick analysis can performed rows order see data point (e.g. 2023Q1), figures first estimated, forecasted finally revised. main findings usually obvious: cases variance decreases, namely data converge towards 'true value'. Horizontal tables just transpose vertical tables used tests revision_analysis. diagonal view shows subsequent releases given time period, without regard date publication. advantage diagonal approach gives way analyse trade timing release accuracy published figures. particularly informative regular estimation intervals exist data study. However, approach requires particularly vigilant case change base year data redefinition. long view representation data allows information grouped together order facilitate manipulation. 3 columns (1 column time period, 1 column publication / revision date one column data), representation allows efficient non-redundant storage data.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintage tables — create_vintages","text":"","code":"## creating the input  # Long format long_view <- data.frame(     rev_date = rep(x = c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                          \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\"),                    each = 4L),     time_period = rep(x = c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\"), times = 8L),     obs_values = c(         .8, .2, NA, NA, .8, .1, NA, NA,         .7, .1, NA, NA, .7, .2, .5, NA,         .7, .2, .5, NA, .7, .3, .7, NA,         .7, .2, .7, .4, .7, .3, .7, .3     ) )  vintages_1 <- create_vintages(x = long_view, type = \"long\", periodicity = 4)  # Horizontal format horizontal_view <- matrix(data = c(.8, .8, .7, .7, .7, .7, .7, .7, .2, .1,                             .1, .2, .2, .3, .2, .3, NA, NA, NA, .5, .5, .7, .7,                             .7, NA, NA, NA, NA, NA, NA, .4, .3),                           ncol = 4) colnames(horizontal_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") rownames(horizontal_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  vintages_2 <- create_vintages(x = horizontal_view, type = \"horizontal\", periodicity = 4)  # Horizontal format vertical_view <- matrix(data = c(.8, .2, NA, NA, .8, .1, NA, NA, .7, .1, NA,                                  NA, .7, .2, .5, NA, .7, .2, .5, NA, .7, .3, .7, NA,                                  .7, .2, .7, .4, .7, .3, .7, .3),                           nrow = 4) rownames(vertical_view) <- c(\"2022Q1\", \"2022Q2\", \"2022Q3\", \"2022Q4\") colnames(vertical_view) <- c(\"2022-07-31\", \"2022-08-31\", \"2022-09-30\", \"2022-10-31\",                                \"2022-11-30\", \"2022-12-31\", \"2023-01-31\", \"2023-02-28\")  vintages_3 <- create_vintages(x = vertical_view, type = \"vertical\", periodicity = 4)  ## specifying the format of revision dates vintages <- create_vintages(     x = long_view,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\" )  ## including vintage selection vintages <- create_vintages(     x = long_view,     type =\"long\",     periodicity = 4L,     date_format= \"%Y-%m-%d\",     vintage_selection = c(start=\"2022-10-31\", end=\"2023-01-31\") )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from CSV or TXT files — create_vintages_from_csv","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"Create vintages table CSV TXT files","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"create_vintages_from_csv(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   date_format = \"%Y-%m-%d\",   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"file character containing name file data read . type character specifying type representation input \"long\", \"horizontal\" \"vertical\" approach. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) date_format character string corresponding format used input data.frame revision dates. ... Arguments passed read.csv(), example: sep field separator character dec character used file decimal points. row.names vector row names skip integer, number lines data file skip beginning read data. ...","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"object class rjd3rev_vintages","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from CSV or TXT files — create_vintages_from_csv","text":"","code":"if (FALSE) { # \\dontrun{ file_name <- \"myinput.csv\" vintages <- create_vintages_from_csv(     file = file_name,     type = \"vertical\",     periodicity = 12,     date_format = \"%Y-%m-%d\",     sep = \";\" ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Create vintages table from XLSX files — create_vintages_from_xlsx","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"Create vintages table XLSX files","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"create_vintages_from_xlsx(   file,   type = c(\"long\", \"horizontal\", \"vertical\"),   periodicity,   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"file character containing name file data read . type character specifying type representation input \"long\", \"horizontal\" \"vertical\" approach. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data) ... Arguments passed readxl::read_excel(), example: sheet character containing sheet read range cell range read col_names boolean use first row column names ...","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"object class rjd3rev_vintages","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/create_vintages_from_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create vintages table from XLSX files — create_vintages_from_xlsx","text":"","code":"if (FALSE) { # \\dontrun{ file_name <- \"myinput.xlsx\" sheet_name <- \"Sheet1\" vintages <- create_vintages_from_xlsx(     file = file_name,     type = \"horizontal\",     periodicity = 12L,     sheet = sheet_name ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics — descriptive_statistics","title":"Descriptive statistics — descriptive_statistics","text":"Descriptive statistics","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics — descriptive_statistics","text":"","code":"descriptive_statistics(revisions.view, rounding = 3)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics — descriptive_statistics","text":"revisions.view mts object. Vertical diagonal view get_revisions() output rounding number decimals display","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/descriptive_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics — descriptive_statistics","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and get descriptive statistics of revisions vintages <- create_vintages(df_long, periodicity = 4) revisions <- get_revisions(vintages, gap = 1) descriptive_statistics(revisions[[\"diagonal_view\"]], rounding = 1) #>                           [Release[2]]-[Release[1]] [Release[3]]-[Release[2]] #> N                                              35.0                      25.0 #> mean revision                                  -0.5                       0.0 #> st.dev.                                         2.1                       1.1 #> min                                            -3.6                      -2.4 #> q.10                                           -3.2                      -1.2 #> median                                         -0.4                       0.0 #> q.90                                            1.7                       1.3 #> max                                             4.2                       2.1 #> % positive                                      0.5                       0.5 #> % zero                                          0.0                       0.0 #> % negative                                      0.5                       0.5 #> mean absolute revision                          1.8                       0.9 #> root mean square revision                       2.1                       1.1 #>                           [Release[4]]-[Release[3]] [Release[5]]-[Release[4]] #> N                                              10.0                       5.0 #> mean revision                                  -0.1                      -0.1 #> st.dev.                                         0.6                       0.3 #> min                                            -1.4                      -0.6 #> q.10                                           -0.6                      -0.4 #> median                                         -0.1                       0.0 #> q.90                                            0.4                       0.2 #> max                                             0.9                       0.3 #> % positive                                      0.3                       0.6 #> % zero                                          0.0                       0.0 #> % negative                                      0.7                       0.4 #> mean absolute revision                          0.4                       0.2 #> root mean square revision                       0.6                       0.3"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 1 — efficiencyModel1","title":"Efficiency Model 1 — efficiencyModel1","text":"Linear regression model revisions (R) preliminary vintage (P)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"efficiencyModel1(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 1 — efficiencyModel1","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 1 — efficiencyModel1","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) efficiencyModel1(vintages[[\"diagonal_view\"]]) #>                            N          R2         F intercept.estimate #> [Release[2]]-[Release[1]] 28 0.008492489 0.2226960        0.672703365 #> [Release[3]]-[Release[2]] 27 0.013641984 0.3457665       -0.549363302 #> [Release[4]]-[Release[3]] 21 0.035302589 0.6952949        0.482883828 #> [Release[5]]-[Release[4]]  9 0.001704290 0.0119504       -0.001229736 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[2]]-[Release[1]]        1.4514313        0.6468799   -0.024457762 #> [Release[3]]-[Release[2]]        0.9049448        0.5492800    0.019082885 #> [Release[4]]-[Release[3]]        0.4144467        0.2583869   -0.013385026 #> [Release[5]]-[Release[4]]        0.3895236        0.9975692   -0.002304159 #>                           slope.stderr slope.pvalue   skewness   kurtosis #> [Release[2]]-[Release[1]]   0.05182753    0.6409299 -0.5542991  0.7361698 #> [Release[3]]-[Release[2]]   0.03245283    0.5617942 -0.9471668  1.3265725 #> [Release[4]]-[Release[3]]   0.01605221    0.4147298  0.4652984 -0.1666573 #> [Release[5]]-[Release[4]]   0.02107760    0.9160182 -0.7282686 -0.4068540 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[2]]-[Release[1]]        1.9923030        0.36929795      0.00661689 #> [Release[3]]-[Release[2]]        5.7939858        0.05518893      0.03750373 #> [Release[4]]-[Release[3]]        0.7448209        0.68907136      0.01951256 #> [Release[5]]-[Release[4]]        0.7623435        0.68306055      0.01512203 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[2]]-[Release[1]]          0.1731851           0.6807117 0.06598575 #> [Release[3]]-[Release[2]]          0.9741268           0.3331098 0.05790368 #> [Release[4]]-[Release[3]]          0.3781167           0.5459076 0.02662701 #> [Release[5]]-[Release[4]]          0.1074795           0.7526197 0.02307918 #>                           White.value White.pvalue     arch.R2 arch.value #> [Release[2]]-[Release[1]]   1.8476009    0.3970074 0.027125777 0.73239597 #> [Release[3]]-[Release[2]]   1.5633995    0.4576275 0.009572775 0.24889216 #> [Release[4]]-[Release[3]]   0.5591672    0.7560985 0.089050061 1.78100121 #> [Release[5]]-[Release[4]]   0.2077126    0.9013548 0.009981670 0.07985336 #>                           arch.pvalue #> [Release[2]]-[Release[1]]   0.3921077 #> [Release[3]]-[Release[2]]   0.6178562 #> [Release[4]]-[Release[3]]   0.1820264 #> [Release[5]]-[Release[4]]   0.7774962"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficiency Model 2 — efficiencyModel2","title":"Efficiency Model 2 — efficiencyModel2","text":"Linear regression model R_v R_{v-1}","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"efficiencyModel2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficiency Model 2 — efficiencyModel2","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/efficiencyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Efficiency Model 2 — efficiencyModel2","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) efficiencyModel2(vintages[[\"diagonal_view\"]]) #>                            N         R2        F intercept.estimate #> [Release[3]]-[Release[2]] 24 0.04873909 1.127199        -0.08866510 #> [Release[4]]-[Release[3]] 21 0.09439635 1.980481        -0.08789253 #> [Release[5]]-[Release[4]]  4 0.54198761 2.366694        -0.12299091 #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[3]]-[Release[2]]        0.1685217        0.6040588    -0.09269299 #> [Release[4]]-[Release[3]]        0.1223834        0.4813889    -0.22503317 #> [Release[5]]-[Release[4]]        0.1299782        0.4439037    -0.26028080 #>                           slope.stderr slope.pvalue   skewness   kurtosis #> [Release[3]]-[Release[2]]   0.08730652    0.2998902  0.4078714 -0.5186398 #> [Release[4]]-[Release[3]]   0.15990470    0.1754889  0.4168826 -0.1797336 #> [Release[5]]-[Release[4]]   0.16918859    0.2638019 -0.9425746  0.7489839 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]        0.8954891         0.6390679    9.407785e-03 #> [Release[4]]-[Release[3]]        0.6062238         0.7385164    1.207920e-01 #> [Release[5]]-[Release[4]]        0.5143455         0.7732346    6.290667e-06 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]       2.089369e-01           0.6520835 0.03700649 #> [Release[4]]-[Release[3]]       2.610359e+00           0.1226513 0.13732102 #> [Release[5]]-[Release[4]]       1.258141e-05           0.9974919 0.99764724 #>                           White.value White.pvalue    arch.R2 arch.value #> [Release[3]]-[Release[2]]   0.8881558    0.6414155 0.09226517  2.1220990 #> [Release[4]]-[Release[3]]   2.8837414    0.2364850 0.01095087  0.2190175 #> [Release[5]]-[Release[4]]   3.9905890    0.1359736 0.51738928  1.5521679 #>                           arch.pvalue #> [Release[3]]-[Release[2]]   0.1451874 #> [Release[4]]-[Release[3]]   0.6397896 #> [Release[5]]-[Release[4]]   0.2128157"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate revisions from vintages — get_revisions","title":"Calculate revisions from vintages — get_revisions","text":"Calculate revisions vintages","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate revisions from vintages — get_revisions","text":"","code":"get_revisions(vintages, gap = 1)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate revisions from vintages — get_revisions","text":"vintages object class rjd3rev_vintages gap Integer. Gap consider vintages calculate revision. Default 1 means revisions calculated vintages consecutively.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate revisions from vintages — get_revisions","text":"object class rjd3rev_revisions contains three different views revisions","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/get_revisions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate revisions from vintages — get_revisions","text":"","code":"df <- data.frame(rev_date = c(rep(\"2022-07-31\",4), rep(\"2022-08-31\",4),                             rep(\"2022-09-30\",4), rep(\"2022-10-31\",4),                             rep(\"2022-11-30\",4), rep(\"2022-12-31\",4),                             rep(\"2023-01-31\",4), rep(\"2023-02-28\",4)),                  time_period = c(rep(c(\"2022Q1\",\"2022Q2\",\"2022Q3\",\"2022Q4\"),8)),                  obs_values = c(.8,.2,NA,NA, .8,.1,NA,NA,                                 .7,.1,NA,NA, .7,.2,.5,NA,                                 .7,.2,.5,NA, .7,.3,.7,NA,                                 .7,.2,.7,.4, .7,.3,.7,.3)) vintages <- create_vintages(df, periodicity = 4) revisions <- get_revisions(vintages, gap = 1)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 1 — orthogonallyModel1","title":"Orthogonally Model 1 — orthogonallyModel1","text":"Linear regression model R_v R_{v-1},...,R_{v-p}. (p=nrevs)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"orthogonallyModel1(revisions.view, nrevs = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 1 — orthogonallyModel1","text":"revisions.view mts object. Vertical diagonal view get_revisions() output nrevs Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 1 — orthogonallyModel1","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) revisions <- get_revisions(vintages, gap = 1) orthogonallyModel1(revisions[[\"diagonal_view\"]]) #>                            N         R2        F intercept.estimate #> [Release[3]]-[Release[2]] 29 0.24591617 8.805038         0.08575764 #> [Release[4]]-[Release[3]] 27 0.07874309 2.136839         0.09901214 #> [Release[5]]-[Release[4]] 23 0.25484069 7.181893        -0.03872800 #>                           intercept.stderr intercept.pvalue x(1).estimate #> [Release[3]]-[Release[2]]       0.19553399        0.6644541    -0.2713391 #> [Release[4]]-[Release[3]]       0.11134016        0.3823321    -0.1360981 #> [Release[5]]-[Release[4]]       0.04141999        0.3604126    -0.1792283 #>                           x(1).stderr x(1).pvalue    skewness   kurtosis #> [Release[3]]-[Release[2]]  0.09144222 0.006223876 -0.44972705 -0.3252401 #> [Release[4]]-[Release[3]]  0.09310352 0.156255186  0.04720293 -0.1288304 #> [Release[5]]-[Release[4]]  0.06687860 0.014020100 -0.01006085 -1.1309021 #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]       1.06726527         0.5864707    0.1101192072 #> [Release[4]]-[Release[3]]       0.02763554         0.9862773    0.0250155395 #> [Release[5]]-[Release[4]]       1.17273248         0.5563452    0.0001836754 #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]        3.341142564          0.07863879 0.14560162 #> [Release[4]]-[Release[3]]        0.641434314          0.43073804 0.02512424 #> [Release[5]]-[Release[4]]        0.003857892          0.95106108 0.05599981 #>                           White.value White.pvalue      arch.R2   arch.value #> [Release[3]]-[Release[2]]   4.2224470    0.1210897 1.445946e-05 0.0004048648 #> [Release[4]]-[Release[3]]   0.6783545    0.7123562 2.565057e-02 0.6669147320 #> [Release[5]]-[Release[4]]   1.2879956    0.5251886 7.559007e-02 1.6629815149 #>                           arch.pvalue #> [Release[3]]-[Release[2]]   0.9839466 #> [Release[4]]-[Release[3]]   0.4141293 #> [Release[5]]-[Release[4]]   0.1972012"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":null,"dir":"Reference","previous_headings":"","what":"Orthogonally Model 2 — orthogonallyModel2","title":"Orthogonally Model 2 — orthogonallyModel2","text":"Linear regression model R_v R_{v-k} (k = reference)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"orthogonallyModel2(revisions.view, reference = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Orthogonally Model 2 — orthogonallyModel2","text":"revisions.view mts object. Vertical diagonal view get_revisions() output reference Integer. Number lags consider. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/orthogonallyModel2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Orthogonally Model 2 — orthogonallyModel2","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) revisions <- get_revisions(vintages, gap = 1) orthogonallyModel2(revisions[[\"diagonal_view\"]]) #>                             N        R2        F intercept.estimate #> [Release[3]]-[Release[2]]  19 0.3436164 8.899490          0.2174527 #> [Release[4]]-[Release[3]]  10 0.2725891 2.997911         -0.2159651 #> [Release[5]]-[Release[4]] NaN       NaN      NaN                NaN #>                           intercept.stderr intercept.pvalue slope.estimate #> [Release[3]]-[Release[2]]         0.232707        0.3631569     -0.3645881 #> [Release[4]]-[Release[3]]         0.160638        0.2156862     -0.1888791 #> [Release[5]]-[Release[4]]              NaN              NaN            NaN #>                           slope.stderr slope.pvalue  skewness   kurtosis #> [Release[3]]-[Release[2]]    0.1222137  0.008348265 0.1993646 -0.9786191 #> [Release[4]]-[Release[3]]    0.1090874  0.121614278 0.3260991 -0.7747700 #> [Release[5]]-[Release[4]]          NaN          NaN       NaN        NaN #>                           JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> [Release[3]]-[Release[2]]        0.8375103         0.6578653      0.11460073 #> [Release[4]]-[Release[3]]        0.3846116         0.8250545      0.01013515 #> [Release[5]]-[Release[4]]              NaN               NaN             NaN #>                           BreuschPagan.value BreuschPagan.pvalue   White.R2 #> [Release[3]]-[Release[2]]         2.20037724           0.1562798 0.20540348 #> [Release[4]]-[Release[3]]         0.08191138           0.7819952 0.09343585 #> [Release[5]]-[Release[4]]                NaN                 NaN        NaN #>                           White.value White.pvalue      arch.R2   arch.value #> [Release[3]]-[Release[2]]   3.9026661    0.1420845 8.377876e-05 0.0015080176 #> [Release[4]]-[Release[3]]   0.9343585    0.6267677 9.094415e-05 0.0008184973 #> [Release[5]]-[Release[4]]         NaN          NaN          NaN          NaN #>                           arch.pvalue #> [Release[3]]-[Release[2]]   0.9690234 #> [Release[4]]-[Release[3]]   0.9771761 #> [Release[5]]-[Release[4]]         NaN"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' plot(x, view = c(\"vertical\", \"diagonal\"), n_rev = 2, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_revisions\" view view plot. default, vertical view considered. n_rev number revision dates consider. vertical view, lasts n_rev revisions plotted. diagonal view, revisions first n_rev releases plotted. maximum number n_rev 5. ... arguments passed ts.plot().","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function for objects of class ","title":"Plot function for objects of class ","text":"Plot function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' plot(x, col, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/plot.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function for objects of class ","text":"x object class \"rjd3rev_vintages\". col color vector length number releases ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class ","title":"Print function for objects of class ","text":"Print function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' print(x, n_row = 12, n_col = 3, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class ","text":"x object class \"rjd3rev_revisions\". n_row number last rows display. horizontal view, corresponds number columns. n_col number columns display. Can either last n columns (verical view), last n rows (horizontal view) first n columns (diagonal view). ... arguments passed print function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","title":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","text":"Print function objects class rjd3rev_rslts","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","text":"","code":"# S3 method for class 'rjd3rev_rslts' print(x, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class rjd3rev_rslts — print.rjd3rev_rslts","text":"x object class rjd3rev_rslts ... arguments passed print function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Print function for objects of class ","title":"Print function for objects of class ","text":"Print function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' print(x, n_row = 8, n_col = 3, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/print.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print function for objects of class ","text":"x object class \"rjd3rev_vintages\". n_row number last rows display. horizontal view, corresponds number columns. n_col number columns display. Can either last n columns (verical view), last n rows (horizontal view) first n columns (diagonal view). argument used long view. ... arguments passed print function.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate report on Revision Analysis — render_report","title":"Generate report on Revision Analysis — render_report","text":"Generate report Revision Analysis","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate report on Revision Analysis — render_report","text":"","code":"render_report(   rslt,   output_file,   output_dir,   output_format = c(\"html_document\", \"pdf_document\", \"word_document\"),   plot_revisions = FALSE,   open_report = TRUE,   ... )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate report on Revision Analysis — render_report","text":"rslt object class \"rjd3rev_rslts\" output function revision_analysis() output_file path name output file containing report output_dir path dir containing output file (Optional) output_format either HTML document (default), PDF document Word document plot_revisions Boolean. Default FALSE meaning plot revisions added report. open_report Boolean. Default TRUE meaning report open automatically generated. ... Arguments passed rmarkdown::render(), example: output_options List output options can override options specified metadata ...","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/render_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate report on Revision Analysis — render_report","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Make analysis and generate the report  vintages <- create_vintages(df_long, periodicity = 4L, type = \"long\") rslt <- revision_analysis(vintages, view = \"diagonal\")  if (FALSE) { # \\dontrun{ render_report(     rslt,     output_file = \"my_report\",     output_dir = \"C:/Users/xxx\",     output_format = \"pdf_document\",     plot_revisions = TRUE ) } # }"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Revision analysis through a battery of tests — revision_analysis","title":"Revision analysis through a battery of tests — revision_analysis","text":"function perform parametric tests enable users detect potential bias (mean regression bias) sources inefficiency preliminary estimates. conclude inefficiency preliminary estimates revisions predictable way. results, parametric tests divided 5 categories: relevancy (check whether preliminary estimates even worth ), bias, efficiency, orthogonality (correlation higher lags), signalVSnoise. Descriptive statistics revisions also provided. parametric tests, prior transformation vintage data may important avoid misleading results. default, decision differentiate vintage data performed automatically based unit root co-integration tests whose results can found found results (section 'varbased'). Finally, running function render_report() output revision_analysis() give formatted summary results full explanations tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Revision analysis through a battery of tests — revision_analysis","text":"","code":"revision_analysis(   vintages,   gap = 1,   view = c(\"vertical\", \"diagonal\"),   n.releases = 3,   transf.diff = c(\"auto\", \"forced\", \"none\"),   transf.log = FALSE,   descriptive.rounding = 3,   nrevs = 1,   ref = 1,   na.zero = FALSE )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Revision analysis through a battery of tests — revision_analysis","text":"vintages object class \"rjd3rev_vintages\" output function create_vintages() gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. view Selected view. Can \"vertical\" (default) \"diagonal\". Vertical view shows observed values time period different vintages. Diagonal view shows subsequent releases given time period, without regard date publication, can particularly informative regular estimation intervals exist. See ?create_vintages() information interests drawbacks view. n.releases used view = \"diagonal\". Ignored otherwise. Allow user limit number releases investigation). view = \"vertical\", user invited limit number vintages upstream parameter vintage_selection create_vintages() whenever necessary. transf.diff differentiation apply data prior testing. used regressions including vintage data regressor /regressand. Regression including revision data never differentiated even transf.diff = \"forced\". Options \"automatic\" (default), \"forced\" \"none\". transf.log Boolean whether log-transformation first applied data. Default FALSE. descriptive.rounding Integer. Number decimals display descriptive statistics. Default 3. nrevs, ref Integer. Number lags consider orthogonality tests 1 2 respectively. na.zero Boolean whether missing values considered 0 rather data yet available (default).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Revision analysis through a battery of tests — revision_analysis","text":"object class 'rjd3rev_rslts'","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/revision_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Revision analysis through a battery of tests — revision_analysis","text":"Tests Transf. [2010-12-04]-[2010-07-10] [2012-01-21]-[2010-12-04] [2012-03-11]-[2012-01-21] [2013-05-25]-[2012-03-11] [2016-03-04]-[2013-05-25] [2016-10-13]-[2016-03-04] [2017-04-12]-[2016-10-13] [2018-07-24]-[2017-04-12] [2019-05-12]-[2018-07-24] Relevancy - Theil U2 None Uncertain (0.883) Good (0.586) Good (0.464) Good (0.320) Good (0.367) Good (0.238) Good (0.139) Good (0.052) Good (0.035) Bias1 T-test None Good (0.820) Good (0.859) Good (0.282) Good (0.133) Good (0.872) Good (0.605) Good (0.848) Good (0.502) Good (0.987) Bias2 Augmented T-test None Good (0.739) Good (0.743) Good (0.409) Good (0.268) Good (0.814) Good (0.538) Good (0.776) Good (0.700) Good (0.990) Bias3 SlopeAndDrift (Ols L P) - Mean None          Bias3 SlopeAndDrift (Ols L P) - Reg. None          Efficiency1 (Ols R P) - Mean Delta 1          Efficiency1 (Ols R P) - Reg. Delta 1          Efficiency2 (Ols Rv Rv_1) - Mean None  Good (NaN) Good (0.620) Good (0.273) Good (0.188) Good (0.235) Good (0.357) Good (0.609) Good (0.323) Efficiency2 (Ols Rv Rv_1) - Reg. None  Good (NaN) Good (0.431) Good (0.399) Good (0.067) Good (0.373) Good (0.058) Good (0.079) Severe (0.000) Orthogonality1 (Ols Rv Rv_(1:p)) - Mean None  Good (NaN) Good (0.620) Good (0.273) Good (0.188) Good (0.235) Good (0.357) Good (0.609) Good (0.323) Orthogonality1 (Ols Rv Rv_(1:p)) - Reg. None  Good (NaN) Good (0.569) Good (0.601) Good (0.933) Good (0.627) Good (0.942) Good (0.921) Good (1.000) Orthogonality2 (Ols Rv Rv_k.) - Mean None  Good (NaN) Good (0.620) Good (0.273) Good (0.188) Good (0.235) Good (0.357) Good (0.609) Good (0.323) Orthogonality2 (Ols Rv Rv_k) - Reg. None  Good (NaN) Good (0.431) Good (0.399) Good (0.067) Good (0.373) Good (0.058) Good (0.079) Severe (0.000) Orthogonality3 AutoCorrelation (Ljung-Box) None          Orthogonality4 Seasonality (Ljung-Box) Delta 1 Good (1.000) Good (1.000) Good (0.998) Good (0.975) Good (0.929) Good (0.821) Good (1.000) Good (1.000) Good (1.000) Orthogonality4 Seasonality (Friedman) Delta 1          SignalVsNoise1 - Noise (Ols R P) Delta 1 Good (NaN) Good (0.387) Good (0.995) Good (0.269) Good (0.207) Uncertain (0.012) Good (0.375) Good (0.947) Good (0.075) SignalVsNoise2 - Signal (Ols R L) Delta 1 Good (NaN) Uncertain (0.781) Uncertain (0.208) Uncertain (0.078) Uncertain (0.607) Uncertain (0.974) Uncertain (0.528) Uncertain (0.490) Uncertain (0.286) Tests Transf. [Release[2]]-[Release[1]] [Release[3]]-[Release[2]] Relevancy - Theil U2 None Good (0.388) Good (0.307) Bias1 T-test None Good (0.903) Good (0.130) Bias2 Augmented T-test None Good (0.860) Good (0.159) Bias3 SlopeAndDrift (Ols L P) - Mean None Good (0.672) Good (0.617) Bias3 SlopeAndDrift (Ols L P) - Reg. None Good (0.662) Good (0.083) Efficiency1 (Ols R P) - Mean Delta 1 Good (0.164) Good (0.653) Efficiency1 (Ols R P) - Reg. Delta 1 Bad (0.007) Good (0.466) Efficiency2 (Ols Rv Rv_1) - Mean None  Good (0.103) Efficiency2 (Ols Rv Rv_1) - Reg. None  Good (0.076) Orthogonality1 (Ols Rv Rv_(1:p)) - Mean None  Good (0.103) Orthogonality1 (Ols Rv Rv_(1:p)) - Reg. None  Good (0.924) Orthogonality2 (Ols Rv Rv_k.) - Mean None  Good (0.103) Orthogonality2 (Ols Rv Rv_k) - Reg. None  Good (0.076) Orthogonality3 AutoCorrelation (Ljung-Box) None Good (0.083) Good (0.205) Orthogonality4 Seasonality (Ljung-Box) Delta 1 Good (0.322) Good (0.479) Orthogonality4 Seasonality (Friedman) Delta 1 Good (0.241) Good (0.419) SignalVsNoise1 - Noise (Ols R P) Delta 1 Bad (0.003) Good (0.570) SignalVsNoise2 - Signal (Ols R L) Delta 1 Uncertain (0.445) Uncertain (0.463) Tests Transf. [2016-10-13]-[2013-05-25] [2017-04-12]-[2016-03-04] Relevancy - Theil U2 None Good (0.397) Good (0.195) Bias1 T-test None Good (0.443) Good (0.396) Bias2 Augmented T-test None Good (0.194) Good (0.350) Bias3 SlopeAndDrift (Ols L P) - Mean None Good (0.334) Good (0.854) Bias3 SlopeAndDrift (Ols L P) - Reg. None Good (0.421) Good (0.419) Efficiency1 (Ols R P) - Mean Delta 1 Good (0.860) Good (0.146) Efficiency1 (Ols R P) - Reg. Delta 1 Good (0.063) Uncertain (0.020) Efficiency2 (Ols Rv Rv_1) - Mean None  Good (0.306) Efficiency2 (Ols Rv Rv_1) - Reg. None  Good (0.610) Orthogonality1 (Ols Rv Rv_(1:p)) - Mean None  Good (0.306) Orthogonality1 (Ols Rv Rv_(1:p)) - Reg. None  Good (0.390) Orthogonality2 (Ols Rv Rv_k.) - Mean None  Good (0.306) Orthogonality2 (Ols Rv Rv_k) - Reg. None  Good (0.610) Orthogonality3 AutoCorrelation (Ljung-Box) None Good (0.163) Good (0.785) Orthogonality4 Seasonality (Ljung-Box) Delta 1 Good (1.000) Good (1.000) Orthogonality4 Seasonality (Friedman) Delta 1 Good (0.122) Good (0.753) SignalVsNoise1 - Noise (Ols R P) Delta 1 Good (0.062) Uncertain (0.013) SignalVsNoise2 - Signal (Ols R L) Delta 1 Uncertain (0.910) Uncertain (0.974) Tests Transf. [Release[2]]-[Release[1]] [Release[3]]-[Release[2]] Relevancy - Theil U2 None Good (0.321) Good (0.190) Bias1 T-test None Good (0.931) Good (0.135) Bias2 Augmented T-test None Good (0.898) Good (0.107) Bias3 SlopeAndDrift (Ols L P) - Mean None Good (0.667) Good (0.782) Bias3 SlopeAndDrift (Ols L P) - Reg. None Good (0.638) Good (0.164) Efficiency1 (Ols R P) - Mean Delta 1 Good (0.252) Good (0.366) Efficiency1 (Ols R P) - Reg. Delta 1 Uncertain (0.021) Good (0.131) Efficiency2 (Ols Rv Rv_1) - Mean None  Good (0.108) Efficiency2 (Ols Rv Rv_1) - Reg. None  Good (0.121) Orthogonality1 (Ols Rv Rv_(1:p)) - Mean None  Good (0.108) Orthogonality1 (Ols Rv Rv_(1:p)) - Reg. None  Good (0.879) Orthogonality2 (Ols Rv Rv_k.) - Mean None  Good (0.108) Orthogonality2 (Ols Rv Rv_k) - Reg. None  Good (0.121) Orthogonality3 AutoCorrelation (Ljung-Box) None Good (0.118) Good (0.251) Orthogonality4 Seasonality (Ljung-Box) Delta 1 Good (0.394) Good (0.277) Orthogonality4 Seasonality (Friedman) Delta 1 Good (0.978) Good (0.392) SignalVsNoise1 - Noise (Ols R P) Delta 1 Uncertain (0.012) Good (0.112) SignalVsNoise2 - Signal (Ols R L) Delta 1 Uncertain (0.331) Uncertain (0.898)","code":"## Simulated data  df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 10L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create a `\"rjd3rev_vintages\"` object with the input vintages <- create_vintages(x = df_long, periodicity = 4L, date_format = \"%Y-%m-%d\") # revisions <- get_revisions(vintages, gap = 1L) # just to get a first insight of the revisions  ## Call using all default parameters rslt1 <- revision_analysis(vintages) #> Warning: Slope and drift could not be performed #> Warning: efficiencyModel1 could not be performed # render_report(rslt1, output_file = \"report1\", output_dir = \"C:/Users/xxx\") summary(rslt1) # formatted summary only #> Object of class rjd3rev_rslts #> View: vertical  #> There are 9 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [2010-12-04]-[2010-07-10]  #> \t- [2]: [2012-01-21]-[2010-12-04]  #> \t- [3]: [2012-03-11]-[2012-01-21]  #> \t- [4]: [2013-05-25]-[2012-03-11]  #> \t- [5]: [2016-03-04]-[2013-05-25]  #> \t- [6]: [2016-10-13]-[2016-03-04]  #> \t- [7]: [2017-04-12]-[2016-10-13]  #> \t- [8]: [2018-07-24]-[2017-04-12]  #> \t- [9]: [2019-05-12]-[2018-07-24]  #>  #> Tests results: #>                                            Transf. [2010-12-04]-[2010-07-10] #> Relevancy - Theil U2                          None         Uncertain (0.883) #> Bias1 T-test                                  None              Good (0.820) #> Bias2 Augmented T-test                        None              Good (0.739) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None                      <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None                      <NA> #> Efficiency1 (Ols R on P) - Mean            Delta 1                      <NA> #> Efficiency1 (Ols R on P) - Reg.            Delta 1                      <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (1.000) #> Orthogonality4 Seasonality (Friedman)      Delta 1                      <NA> #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1                Good (NaN) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1                Good (NaN) #>                                            [2012-01-21]-[2010-12-04] #> Relevancy - Theil U2                                    Good (0.586) #> Bias1 T-test                                            Good (0.859) #> Bias2 Augmented T-test                                  Good (0.743) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                       Good (NaN) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                       Good (NaN) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean                Good (NaN) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.                Good (NaN) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                   Good (NaN) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                    Good (NaN) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.387) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.781) #>                                            [2012-03-11]-[2012-01-21] #> Relevancy - Theil U2                                    Good (0.464) #> Bias1 T-test                                            Good (0.282) #> Bias2 Augmented T-test                                  Good (0.409) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.620) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.431) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.620) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.569) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.620) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.431) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.998) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.995) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.208) #>                                            [2013-05-25]-[2012-03-11] #> Relevancy - Theil U2                                    Good (0.320) #> Bias1 T-test                                            Good (0.133) #> Bias2 Augmented T-test                                  Good (0.268) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.273) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.399) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.273) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.601) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.273) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.399) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.975) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.269) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.078) #>                                            [2016-03-04]-[2013-05-25] #> Relevancy - Theil U2                                    Good (0.367) #> Bias1 T-test                                            Good (0.872) #> Bias2 Augmented T-test                                  Good (0.814) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.188) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.067) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.188) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.933) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.188) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.067) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.929) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.207) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.607) #>                                            [2016-10-13]-[2016-03-04] #> Relevancy - Theil U2                                    Good (0.238) #> Bias1 T-test                                            Good (0.605) #> Bias2 Augmented T-test                                  Good (0.538) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.235) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.373) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.235) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.627) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.235) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.373) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.821) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                Uncertain (0.012) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.974) #>                                            [2017-04-12]-[2016-10-13] #> Relevancy - Theil U2                                    Good (0.139) #> Bias1 T-test                                            Good (0.848) #> Bias2 Augmented T-test                                  Good (0.776) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.357) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.058) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.357) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.942) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.357) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.058) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.375) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.528) #>                                            [2018-07-24]-[2017-04-12] #> Relevancy - Theil U2                                    Good (0.052) #> Bias1 T-test                                            Good (0.502) #> Bias2 Augmented T-test                                  Good (0.700) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.609) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.079) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.609) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.921) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.609) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.079) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.947) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.490) #>                                            [2019-05-12]-[2018-07-24] #> Relevancy - Theil U2                                    Good (0.035) #> Bias1 T-test                                            Good (0.987) #> Bias2 Augmented T-test                                  Good (0.990) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                         <NA> #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                         <NA> #> Efficiency1 (Ols R on P) - Mean                                 <NA> #> Efficiency1 (Ols R on P) - Reg.                                 <NA> #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.323) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                   Severe (0.000) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.323) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (1.000) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.323) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                Severe (0.000) #> Orthogonality3 AutoCorrelation (Ljung-Box)                      <NA> #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                           <NA> #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.075) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.286) View(rslt1) # formatted tables in viewer panel .cl-c430c28c{table-layout:auto;}.cl-c4296456{font-family:'Helvetica Neue';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c429646a{font-family:'Helvetica Neue';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(255, 255, 255, 1.00);background-color:transparent;}.cl-c42c4932{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:6pt;padding-top:6pt;padding-left:6pt;padding-right:6pt;line-height: 1;background-color:transparent;}.cl-c42c666a{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c6674{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c6675{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c667e{background-color:rgba(255, 235, 59, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c667f{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c6680{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c6681{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c6688{background-color:rgba(193, 0, 0, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c42c6689{background-color:rgba(255, 235, 59, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}TestsTransf.[2010-12-04]-[2010-07-10][2012-01-21]-[2010-12-04][2012-03-11]-[2012-01-21][2013-05-25]-[2012-03-11][2016-03-04]-[2013-05-25][2016-10-13]-[2016-03-04][2017-04-12]-[2016-10-13][2018-07-24]-[2017-04-12][2019-05-12]-[2018-07-24]Relevancy - Theil U2NoneUncertain (0.883)Good (0.586)Good (0.464)Good (0.320)Good (0.367)Good (0.238)Good (0.139)Good (0.052)Good (0.035)Bias1 T-testNoneGood (0.820)Good (0.859)Good (0.282)Good (0.133)Good (0.872)Good (0.605)Good (0.848)Good (0.502)Good (0.987)Bias2 Augmented T-testNoneGood (0.739)Good (0.743)Good (0.409)Good (0.268)Good (0.814)Good (0.538)Good (0.776)Good (0.700)Good (0.990)Bias3 SlopeAndDrift (Ols L on P) - MeanNoneBias3 SlopeAndDrift (Ols L on P) - Reg.NoneEfficiency1 (Ols R on P) - MeanDelta 1Efficiency1 (Ols R on P) - Reg.Delta 1Efficiency2 (Ols Rv on Rv_1) - MeanNoneGood (NaN)Good (0.620)Good (0.273)Good (0.188)Good (0.235)Good (0.357)Good (0.609)Good (0.323)Efficiency2 (Ols Rv on Rv_1) - Reg.NoneGood (NaN)Good (0.431)Good (0.399)Good (0.067)Good (0.373)Good (0.058)Good (0.079)Severe (0.000)Orthogonality1 (Ols Rv on Rv_(1:p)) - MeanNoneGood (NaN)Good (0.620)Good (0.273)Good (0.188)Good (0.235)Good (0.357)Good (0.609)Good (0.323)Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.NoneGood (NaN)Good (0.569)Good (0.601)Good (0.933)Good (0.627)Good (0.942)Good (0.921)Good (1.000)Orthogonality2 (Ols Rv on Rv_k.) - MeanNoneGood (NaN)Good (0.620)Good (0.273)Good (0.188)Good (0.235)Good (0.357)Good (0.609)Good (0.323)Orthogonality2 (Ols Rv on Rv_k) - Reg.NoneGood (NaN)Good (0.431)Good (0.399)Good (0.067)Good (0.373)Good (0.058)Good (0.079)Severe (0.000)Orthogonality3 AutoCorrelation (Ljung-Box)NoneOrthogonality4 Seasonality (Ljung-Box)Delta 1Good (1.000)Good (1.000)Good (0.998)Good (0.975)Good (0.929)Good (0.821)Good (1.000)Good (1.000)Good (1.000)Orthogonality4 Seasonality (Friedman)Delta 1SignalVsNoise1 - Noise (Ols R on P)Delta 1Good (NaN)Good (0.387)Good (0.995)Good (0.269)Good (0.207)Uncertain (0.012)Good (0.375)Good (0.947)Good (0.075)SignalVsNoise2 - Signal (Ols R on L)Delta 1Good (NaN)Uncertain (0.781)Uncertain (0.208)Uncertain (0.078)Uncertain (0.607)Uncertain (0.974)Uncertain (0.528)Uncertain (0.490)Uncertain (0.286) ## Calls using diagonal view (suited in many situations such as to evaluate GDP estimates) ## Note: when input are not growth rates but the gross series, differentiation is ## performed automatically (if transf.diff is let to its default option) but `transf.log` ## must be set to TRUE manually whenever a log-transformation of the data is necessary rslt2 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) # render_report(rslt2, output_file = \"report2\", output_dir = \"C:/Users/xxx\", #               output_format = \"word_document\", plot_revisions = TRUE) summary(rslt2) #> Object of class rjd3rev_rslts #> View: diagonal  #> There are 2 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [Release[2]]-[Release[1]]  #> \t- [2]: [Release[3]]-[Release[2]]  #>  #> Tests results: #>                                            Transf. [Release[2]]-[Release[1]] #> Relevancy - Theil U2                          None              Good (0.388) #> Bias1 T-test                                  None              Good (0.903) #> Bias2 Augmented T-test                        None              Good (0.860) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.672) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.662) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.164) #> Efficiency1 (Ols R on P) - Reg.            Delta 1               Bad (0.007) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.083) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (0.322) #> Orthogonality4 Seasonality (Friedman)      Delta 1              Good (0.241) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1               Bad (0.003) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.445) #>                                            [Release[3]]-[Release[2]] #> Relevancy - Theil U2                                    Good (0.307) #> Bias1 T-test                                            Good (0.130) #> Bias2 Augmented T-test                                  Good (0.159) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.617) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.083) #> Efficiency1 (Ols R on P) - Mean                         Good (0.653) #> Efficiency1 (Ols R on P) - Reg.                         Good (0.466) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.103) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.076) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.103) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.924) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.103) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.076) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.205) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.479) #> Orthogonality4 Seasonality (Friedman)                   Good (0.419) #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.570) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.463) View(rslt2) .cl-c4458a6e{table-layout:auto;}.cl-c43fada6{font-family:'Helvetica Neue';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c44204fc{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:6pt;padding-top:6pt;padding-left:6pt;padding-right:6pt;line-height: 1;background-color:transparent;}.cl-c4421e24{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e2e{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e2f{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e30{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e38{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e39{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e3a{background-color:rgba(255, 55, 55, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c4421e42{background-color:rgba(255, 235, 59, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}TestsTransf.[Release[2]]-[Release[1]][Release[3]]-[Release[2]]Relevancy - Theil U2NoneGood (0.388)Good (0.307)Bias1 T-testNoneGood (0.903)Good (0.130)Bias2 Augmented T-testNoneGood (0.860)Good (0.159)Bias3 SlopeAndDrift (Ols L on P) - MeanNoneGood (0.672)Good (0.617)Bias3 SlopeAndDrift (Ols L on P) - Reg.NoneGood (0.662)Good (0.083)Efficiency1 (Ols R on P) - MeanDelta 1Good (0.164)Good (0.653)Efficiency1 (Ols R on P) - Reg.Delta 1Bad (0.007)Good (0.466)Efficiency2 (Ols Rv on Rv_1) - MeanNoneGood (0.103)Efficiency2 (Ols Rv on Rv_1) - Reg.NoneGood (0.076)Orthogonality1 (Ols Rv on Rv_(1:p)) - MeanNoneGood (0.103)Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.NoneGood (0.924)Orthogonality2 (Ols Rv on Rv_k.) - MeanNoneGood (0.103)Orthogonality2 (Ols Rv on Rv_k) - Reg.NoneGood (0.076)Orthogonality3 AutoCorrelation (Ljung-Box)NoneGood (0.083)Good (0.205)Orthogonality4 Seasonality (Ljung-Box)Delta 1Good (0.322)Good (0.479)Orthogonality4 Seasonality (Friedman)Delta 1Good (0.241)Good (0.419)SignalVsNoise1 - Noise (Ols R on P)Delta 1Bad (0.003)Good (0.570)SignalVsNoise2 - Signal (Ols R on L)Delta 1Uncertain (0.445)Uncertain (0.463) ## Call to evaluate revisions for a specific range of vintage periods vintages <- create_vintages(     x = df_long,     periodicity = 4L,     vintage_selection = c(start = \"2012-12-31\", end = \"2018-06-30\") ) rslt3 <- revision_analysis(vintages, gap = 2, view = \"vertical\") #render_report(rslt3, output_file = \"report2\", output_dir = \"C:/Users/xxx\", plot_revisions = TRUE) summary(rslt3) #> Object of class rjd3rev_rslts #> View: vertical  #> There are 2 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [2016-10-13]-[2013-05-25]  #> \t- [2]: [2017-04-12]-[2016-03-04]  #>  #> Tests results: #>                                            Transf. [2016-10-13]-[2013-05-25] #> Relevancy - Theil U2                          None              Good (0.397) #> Bias1 T-test                                  None              Good (0.443) #> Bias2 Augmented T-test                        None              Good (0.194) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.334) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.421) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.860) #> Efficiency1 (Ols R on P) - Reg.            Delta 1              Good (0.063) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.163) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (1.000) #> Orthogonality4 Seasonality (Friedman)      Delta 1              Good (0.122) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1              Good (0.062) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.910) #>                                            [2017-04-12]-[2016-03-04] #> Relevancy - Theil U2                                    Good (0.195) #> Bias1 T-test                                            Good (0.396) #> Bias2 Augmented T-test                                  Good (0.350) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.854) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.419) #> Efficiency1 (Ols R on P) - Mean                         Good (0.146) #> Efficiency1 (Ols R on P) - Reg.                    Uncertain (0.020) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.306) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.610) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.306) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.390) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.306) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.610) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.785) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (1.000) #> Orthogonality4 Seasonality (Friedman)                   Good (0.753) #> SignalVsNoise1 - Noise (Ols R on P)                Uncertain (0.013) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.974) View(rslt3) .cl-c4600dbc{table-layout:auto;}.cl-c45974ca{font-family:'Helvetica Neue';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c45c94c0{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:6pt;padding-top:6pt;padding-left:6pt;padding-right:6pt;line-height: 1;background-color:transparent;}.cl-c45cadd4{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c45cadde{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c45caddf{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c45cade8{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c45cade9{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c45cadea{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c45cadf2{background-color:rgba(255, 235, 59, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}TestsTransf.[2016-10-13]-[2013-05-25][2017-04-12]-[2016-03-04]Relevancy - Theil U2NoneGood (0.397)Good (0.195)Bias1 T-testNoneGood (0.443)Good (0.396)Bias2 Augmented T-testNoneGood (0.194)Good (0.350)Bias3 SlopeAndDrift (Ols L on P) - MeanNoneGood (0.334)Good (0.854)Bias3 SlopeAndDrift (Ols L on P) - Reg.NoneGood (0.421)Good (0.419)Efficiency1 (Ols R on P) - MeanDelta 1Good (0.860)Good (0.146)Efficiency1 (Ols R on P) - Reg.Delta 1Good (0.063)Uncertain (0.020)Efficiency2 (Ols Rv on Rv_1) - MeanNoneGood (0.306)Efficiency2 (Ols Rv on Rv_1) - Reg.NoneGood (0.610)Orthogonality1 (Ols Rv on Rv_(1:p)) - MeanNoneGood (0.306)Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.NoneGood (0.390)Orthogonality2 (Ols Rv on Rv_k.) - MeanNoneGood (0.306)Orthogonality2 (Ols Rv on Rv_k) - Reg.NoneGood (0.610)Orthogonality3 AutoCorrelation (Ljung-Box)NoneGood (0.163)Good (0.785)Orthogonality4 Seasonality (Ljung-Box)Delta 1Good (1.000)Good (1.000)Orthogonality4 Seasonality (Friedman)Delta 1Good (0.122)Good (0.753)SignalVsNoise1 - Noise (Ols R on P)Delta 1Good (0.062)Uncertain (0.013)SignalVsNoise2 - Signal (Ols R on L)Delta 1Uncertain (0.910)Uncertain (0.974) ## Note that it is possible to change thresholds values for quality ## assessment using options (see vignette for details) options(     augmented_t_threshold = c(severe = 0.005, bad = 0.01, uncertain = 0.05),     slope_and_drift_threshold = c(severe = 0.005, bad = 0.05, uncertain = 0.10),     theil_u2_threshold = c(uncertain = .5, bad = .7, severe = 1) ) rslt4 <- revision_analysis(vintages, gap = 1, view = \"diagonal\", n.releases = 3) summary(rslt4) #> Object of class rjd3rev_rslts #> View: diagonal  #> There are 2 from 2010 1 to 2019 4  #>  #> List of all tests: #> - summary.residuals : #> \t- slope_and_drift #> \t- efficiency1 #> \t- efficiency2 #> \t- orthogonality1 #> \t- orthogonality2 #> - relevancy : #> \t- theil #> - bias : #> \t- t_ta_test #> \t- slope_and_drift #> - efficiency : #> \t- efficiency1 #> \t- efficiency2 #> - orthogonality : #> \t- orthogonality1 #> \t- orthogonality2 #> \t- autocorrelation_test #> \t- seasonality_test #> - signalnoise : #> \t- signal_noise #> - varbased : #> \t- unit_root_test #> \t- cointegration_test #> \t- vecm #>  #> Revisions analysis dates:  #> \t- [1]: [Release[2]]-[Release[1]]  #> \t- [2]: [Release[3]]-[Release[2]]  #>  #> Tests results: #>                                            Transf. [Release[2]]-[Release[1]] #> Relevancy - Theil U2                          None              Good (0.321) #> Bias1 T-test                                  None              Good (0.931) #> Bias2 Augmented T-test                        None              Good (0.898) #> Bias3 SlopeAndDrift (Ols L on P) - Mean       None              Good (0.667) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.       None              Good (0.638) #> Efficiency1 (Ols R on P) - Mean            Delta 1              Good (0.252) #> Efficiency1 (Ols R on P) - Reg.            Delta 1         Uncertain (0.021) #> Efficiency2 (Ols Rv on Rv_1) - Mean           None                           #> Efficiency2 (Ols Rv on Rv_1) - Reg.           None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean    None                           #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.    None                           #> Orthogonality2 (Ols Rv on Rv_k.) - Mean       None                           #> Orthogonality2 (Ols Rv on Rv_k) - Reg.        None                           #> Orthogonality3 AutoCorrelation (Ljung-Box)    None              Good (0.118) #> Orthogonality4 Seasonality (Ljung-Box)     Delta 1              Good (0.394) #> Orthogonality4 Seasonality (Friedman)      Delta 1              Good (0.978) #> SignalVsNoise1 - Noise (Ols R on P)        Delta 1         Uncertain (0.012) #> SignalVsNoise2 - Signal (Ols R on L)       Delta 1         Uncertain (0.331) #>                                            [Release[3]]-[Release[2]] #> Relevancy - Theil U2                                    Good (0.190) #> Bias1 T-test                                            Good (0.135) #> Bias2 Augmented T-test                                  Good (0.107) #> Bias3 SlopeAndDrift (Ols L on P) - Mean                 Good (0.782) #> Bias3 SlopeAndDrift (Ols L on P) - Reg.                 Good (0.164) #> Efficiency1 (Ols R on P) - Mean                         Good (0.366) #> Efficiency1 (Ols R on P) - Reg.                         Good (0.131) #> Efficiency2 (Ols Rv on Rv_1) - Mean                     Good (0.108) #> Efficiency2 (Ols Rv on Rv_1) - Reg.                     Good (0.121) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Mean              Good (0.108) #> Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.              Good (0.879) #> Orthogonality2 (Ols Rv on Rv_k.) - Mean                 Good (0.108) #> Orthogonality2 (Ols Rv on Rv_k) - Reg.                  Good (0.121) #> Orthogonality3 AutoCorrelation (Ljung-Box)              Good (0.251) #> Orthogonality4 Seasonality (Ljung-Box)                  Good (0.277) #> Orthogonality4 Seasonality (Friedman)                   Good (0.392) #> SignalVsNoise1 - Noise (Ols R on P)                     Good (0.112) #> SignalVsNoise2 - Signal (Ols R on L)               Uncertain (0.898) View(rslt4) .cl-c484b1bc{table-layout:auto;}.cl-c47ef998{font-family:'Helvetica Neue';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-c4814a68{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:6pt;padding-top:6pt;padding-left:6pt;padding-right:6pt;line-height: 1;background-color:transparent;}.cl-c48163cc{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c48163d6{background-color:rgba(189, 189, 189, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c48163d7{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c48163e0{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c48163e1{background-color:rgba(240, 240, 240, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c48163ea{background-color:rgba(76, 175, 80, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-c48163eb{background-color:rgba(255, 235, 59, 1.00);vertical-align: middle;border-bottom: 4pt solid rgba(255, 255, 255, 1.00);border-top: 4pt solid rgba(255, 255, 255, 1.00);border-left: 4pt solid rgba(255, 255, 255, 1.00);border-right: 4pt solid rgba(255, 255, 255, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}TestsTransf.[Release[2]]-[Release[1]][Release[3]]-[Release[2]]Relevancy - Theil U2NoneGood (0.321)Good (0.190)Bias1 T-testNoneGood (0.931)Good (0.135)Bias2 Augmented T-testNoneGood (0.898)Good (0.107)Bias3 SlopeAndDrift (Ols L on P) - MeanNoneGood (0.667)Good (0.782)Bias3 SlopeAndDrift (Ols L on P) - Reg.NoneGood (0.638)Good (0.164)Efficiency1 (Ols R on P) - MeanDelta 1Good (0.252)Good (0.366)Efficiency1 (Ols R on P) - Reg.Delta 1Uncertain (0.021)Good (0.131)Efficiency2 (Ols Rv on Rv_1) - MeanNoneGood (0.108)Efficiency2 (Ols Rv on Rv_1) - Reg.NoneGood (0.121)Orthogonality1 (Ols Rv on Rv_(1:p)) - MeanNoneGood (0.108)Orthogonality1 (Ols Rv on Rv_(1:p)) - Reg.NoneGood (0.879)Orthogonality2 (Ols Rv on Rv_k.) - MeanNoneGood (0.108)Orthogonality2 (Ols Rv on Rv_k) - Reg.NoneGood (0.121)Orthogonality3 AutoCorrelation (Ljung-Box)NoneGood (0.118)Good (0.251)Orthogonality4 Seasonality (Ljung-Box)Delta 1Good (0.394)Good (0.277)Orthogonality4 Seasonality (Friedman)Delta 1Good (0.978)Good (0.392)SignalVsNoise1 - Noise (Ols R on P)Delta 1Uncertain (0.012)Good (0.112)SignalVsNoise2 - Signal (Ols R on L)Delta 1Uncertain (0.331)Uncertain (0.898)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/rjd3revisions-package.html","id":null,"dir":"Reference","previous_headings":"","what":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","title":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","text":"Revision analysis tool part 'JDemetra+ 3.x' (https://github.com/jdemetra) time series analysis software. performs battery tests revisions submit report results. various tests enable users detect potential bias sources inefficiency preliminary estimates.","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/rjd3revisions-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rjd3revisions: Revision analysis with 'JDemetra+ 3.x' — rjd3revisions-package","text":"Maintainer: Corentin Lemasson corentin.lemasson@nbb.Authors: Tanguy Barthelemy tanguy.barthelemy@insee.fr [artist]","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Set all test thresholds to their default values — set_all_thresholds_to_default","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"Set test thresholds default values","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"","code":"set_all_thresholds_to_default(diagnostic_tests = TRUE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"diagnostic_tests Boolean. Whether reset thresholds diagnostics tests residuals well addition parametric tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_all_thresholds_to_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set all test thresholds to their default values — set_all_thresholds_to_default","text":"","code":"set_all_thresholds_to_default()"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Set thresholds of a given test to their default values — set_thresholds_to_default","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"Set thresholds given test default values","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"","code":"set_thresholds_to_default(threshold_option_name)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"threshold_option_name Boolean. Whether reset thresholds diagnostics tests residuals well addition parametric tests.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/set_thresholds_to_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set thresholds of a given test to their default values — set_thresholds_to_default","text":"","code":"set_thresholds_to_default(\"t_threshold\")"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":null,"dir":"Reference","previous_headings":"","what":"Signal VS Noise — signalnoise","title":"Signal VS Noise — signalnoise","text":"Linear regression models determine whether revisions ‘news’ ‘noise’. 'noise': R (revisions) P (preliminary estimate). 'news': R L (latter estimate).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signal VS Noise — signalnoise","text":"","code":"signalnoise(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signal VS Noise — signalnoise","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/signalnoise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signal VS Noise — signalnoise","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) signalnoise(vintages[[\"diagonal_view\"]]) #>                              News.R2    News.F News.pvalue    Noise.R2 #> [Release[2]]-[Release[1]] 0.01952634 0.6248429   0.5421682 0.002009833 #> [Release[3]]-[Release[2]] 0.03125519 0.6876142   0.5142713 0.054619515 #> [Release[4]]-[Release[3]] 0.05215226 0.5215226   0.6124930 0.113613559 #> [Release[5]]-[Release[4]] 1.00000000 2.0000000         NaN 1.000000000 #>                              Noise.F Noise.pvalue #> [Release[2]]-[Release[1]] 0.06431466    0.9378388 #> [Release[3]]-[Release[2]] 1.20162933    0.3215052 #> [Release[4]]-[Release[3]] 1.13613559    0.3678697 #> [Release[5]]-[Release[4]] 2.00000000          NaN"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate long datasets with revisions — simulate_long","title":"Simulate long datasets with revisions — simulate_long","text":"Simulate long datasets revisions","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate long datasets with revisions — simulate_long","text":"","code":"simulate_long(   n_period = 50,   n_revision = 10,   start_period = as.Date(\"2012-01-01\"),   periodicity = 12L )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate long datasets with revisions — simulate_long","text":"n_period Integer. Number different time-period (length simulated series). n_revision Integer. Number different revision dates. start_period Date. Start series. periodicity Integer. Periodicity time period (12, 4 1 resp. monthly, quarterly annual data).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate long datasets with revisions — simulate_long","text":"dataset long format. See create_vintages information different data formats.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/simulate_long.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate long datasets with revisions — simulate_long","text":"","code":"simulate_long(n_period = 100L, n_revision = 10L) #>        rev_date time_period   obs_values #> 1    2015-05-24  2012-01-01  10.16450701 #> 2    2015-05-24  2012-02-01   5.24454095 #> 3    2015-05-24  2012-03-01  15.24689067 #> 4    2015-05-24  2012-04-01  14.09641383 #> 5    2015-05-24  2012-05-01  14.42209861 #> 6    2015-05-24  2012-06-01  27.47966818 #> 7    2015-05-24  2012-07-01  35.91147343 #> 8    2015-05-24  2012-08-01  33.60251189 #> 9    2015-05-24  2012-09-01  31.40727652 #> 10   2015-05-24  2012-10-01  20.82057061 #> 11   2015-05-24  2012-11-01  24.54118191 #> 12   2015-05-24  2012-12-01  19.41627191 #> 13   2015-05-24  2013-01-01  19.70326086 #> 14   2015-05-24  2013-02-01  17.12222208 #> 15   2015-05-24  2013-03-01  16.63290851 #> 16   2015-05-24  2013-04-01  13.63329955 #> 17   2015-05-24  2013-05-01  19.02829771 #> 18   2015-05-24  2013-06-01  30.93940441 #> 19   2015-05-24  2013-07-01  35.45345553 #> 20   2015-05-24  2013-08-01  33.66848055 #> 21   2015-05-24  2013-09-01  36.50881960 #> 22   2015-05-24  2013-10-01  22.81688565 #> 23   2015-05-24  2013-11-01  26.10143943 #> 24   2015-05-24  2013-12-01  24.87366254 #> 25   2015-05-24  2014-01-01  17.90349240 #> 26   2015-05-24  2014-02-01  23.48330871 #> 27   2015-05-24  2014-03-01  22.29119777 #> 28   2015-05-24  2014-04-01  22.82360364 #> 29   2015-05-24  2014-05-01  28.08765654 #> 30   2015-05-24  2014-06-01  41.93829627 #> 31   2015-05-24  2014-07-01  43.85161271 #> 32   2015-05-24  2014-08-01  39.39275713 #> 33   2015-05-24  2014-09-01  38.90237524 #> 34   2015-05-24  2014-10-01  25.19758911 #> 35   2015-05-24  2014-11-01  26.47731498 #> 36   2015-05-24  2014-12-01  26.30648829 #> 37   2015-05-24  2015-01-01  16.78139864 #> 38   2015-05-24  2015-02-01  18.50993551 #> 39   2015-05-24  2015-03-01  12.59903227 #> 40   2015-05-24  2015-04-01   8.02058680 #> 41   2015-05-24  2015-05-01  11.47562895 #> 42   2015-05-24  2015-06-01           NA #> 43   2015-05-24  2015-07-01           NA #> 44   2015-05-24  2015-08-01           NA #> 45   2015-05-24  2015-09-01           NA #> 46   2015-05-24  2015-10-01           NA #> 47   2015-05-24  2015-11-01           NA #> 48   2015-05-24  2015-12-01           NA #> 49   2015-05-24  2016-01-01           NA #> 50   2015-05-24  2016-02-01           NA #> 51   2015-05-24  2016-03-01           NA #> 52   2015-05-24  2016-04-01           NA #> 53   2015-05-24  2016-05-01           NA #> 54   2015-05-24  2016-06-01           NA #> 55   2015-05-24  2016-07-01           NA #> 56   2015-05-24  2016-08-01           NA #> 57   2015-05-24  2016-09-01           NA #> 58   2015-05-24  2016-10-01           NA #> 59   2015-05-24  2016-11-01           NA #> 60   2015-05-24  2016-12-01           NA #> 61   2015-05-24  2017-01-01           NA #> 62   2015-05-24  2017-02-01           NA #> 63   2015-05-24  2017-03-01           NA #> 64   2015-05-24  2017-04-01           NA #> 65   2015-05-24  2017-05-01           NA #> 66   2015-05-24  2017-06-01           NA #> 67   2015-05-24  2017-07-01           NA #> 68   2015-05-24  2017-08-01           NA #> 69   2015-05-24  2017-09-01           NA #> 70   2015-05-24  2017-10-01           NA #> 71   2015-05-24  2017-11-01           NA #> 72   2015-05-24  2017-12-01           NA #> 73   2015-05-24  2018-01-01           NA #> 74   2015-05-24  2018-02-01           NA #> 75   2015-05-24  2018-03-01           NA #> 76   2015-05-24  2018-04-01           NA #> 77   2015-05-24  2018-05-01           NA #> 78   2015-05-24  2018-06-01           NA #> 79   2015-05-24  2018-07-01           NA #> 80   2015-05-24  2018-08-01           NA #> 81   2015-05-24  2018-09-01           NA #> 82   2015-05-24  2018-10-01           NA #> 83   2015-05-24  2018-11-01           NA #> 84   2015-05-24  2018-12-01           NA #> 85   2015-05-24  2019-01-01           NA #> 86   2015-05-24  2019-02-01           NA #> 87   2015-05-24  2019-03-01           NA #> 88   2015-05-24  2019-04-01           NA #> 89   2015-05-24  2019-05-01           NA #> 90   2015-05-24  2019-06-01           NA #> 91   2015-05-24  2019-07-01           NA #> 92   2015-05-24  2019-08-01           NA #> 93   2015-05-24  2019-09-01           NA #> 94   2015-05-24  2019-10-01           NA #> 95   2015-05-24  2019-11-01           NA #> 96   2015-05-24  2019-12-01           NA #> 97   2015-05-24  2020-01-01           NA #> 98   2015-05-24  2020-02-01           NA #> 99   2015-05-24  2020-03-01           NA #> 100  2015-05-24  2020-04-01           NA #> 101  2015-09-15  2012-01-01   8.41518430 #> 102  2015-09-15  2012-02-01  10.85402395 #> 103  2015-09-15  2012-03-01  14.03988597 #> 104  2015-09-15  2012-04-01  15.21192947 #> 105  2015-09-15  2012-05-01  21.41448690 #> 106  2015-09-15  2012-06-01  30.55379883 #> 107  2015-09-15  2012-07-01  33.81797579 #> 108  2015-09-15  2012-08-01  33.07970286 #> 109  2015-09-15  2012-09-01  30.69237596 #> 110  2015-09-15  2012-10-01  22.92190778 #> 111  2015-09-15  2012-11-01  23.48383414 #> 112  2015-09-15  2012-12-01  20.24803092 #> 113  2015-09-15  2013-01-01  18.01740243 #> 114  2015-09-15  2013-02-01  17.12507037 #> 115  2015-09-15  2013-03-01  19.28492239 #> 116  2015-09-15  2013-04-01  15.47641495 #> 117  2015-09-15  2013-05-01  22.64356630 #> 118  2015-09-15  2013-06-01  29.14660573 #> 119  2015-09-15  2013-07-01  36.53422281 #> 120  2015-09-15  2013-08-01  31.29889566 #> 121  2015-09-15  2013-09-01  31.38192554 #> 122  2015-09-15  2013-10-01  22.42105302 #> 123  2015-09-15  2013-11-01  26.28597739 #> 124  2015-09-15  2013-12-01  22.93139787 #> 125  2015-09-15  2014-01-01  17.06781219 #> 126  2015-09-15  2014-02-01  21.97986608 #> 127  2015-09-15  2014-03-01  22.29276738 #> 128  2015-09-15  2014-04-01  20.88816091 #> 129  2015-09-15  2014-05-01  26.10354075 #> 130  2015-09-15  2014-06-01  38.17664762 #> 131  2015-09-15  2014-07-01  44.94266215 #> 132  2015-09-15  2014-08-01  41.18289508 #> 133  2015-09-15  2014-09-01  38.77103239 #> 134  2015-09-15  2014-10-01  29.02666063 #> 135  2015-09-15  2014-11-01  27.22518138 #> 136  2015-09-15  2014-12-01  24.48536142 #> 137  2015-09-15  2015-01-01  15.83723529 #> 138  2015-09-15  2015-02-01  18.75682367 #> 139  2015-09-15  2015-03-01  13.99641463 #> 140  2015-09-15  2015-04-01   6.20017180 #> 141  2015-09-15  2015-05-01  11.81383199 #> 142  2015-09-15  2015-06-01  23.45645759 #> 143  2015-09-15  2015-07-01  27.66474611 #> 144  2015-09-15  2015-08-01  20.59347283 #> 145  2015-09-15  2015-09-01  14.15783337 #> 146  2015-09-15  2015-10-01           NA #> 147  2015-09-15  2015-11-01           NA #> 148  2015-09-15  2015-12-01           NA #> 149  2015-09-15  2016-01-01           NA #> 150  2015-09-15  2016-02-01           NA #> 151  2015-09-15  2016-03-01           NA #> 152  2015-09-15  2016-04-01           NA #> 153  2015-09-15  2016-05-01           NA #> 154  2015-09-15  2016-06-01           NA #> 155  2015-09-15  2016-07-01           NA #> 156  2015-09-15  2016-08-01           NA #> 157  2015-09-15  2016-09-01           NA #> 158  2015-09-15  2016-10-01           NA #> 159  2015-09-15  2016-11-01           NA #> 160  2015-09-15  2016-12-01           NA #> 161  2015-09-15  2017-01-01           NA #> 162  2015-09-15  2017-02-01           NA #> 163  2015-09-15  2017-03-01           NA #> 164  2015-09-15  2017-04-01           NA #> 165  2015-09-15  2017-05-01           NA #> 166  2015-09-15  2017-06-01           NA #> 167  2015-09-15  2017-07-01           NA #> 168  2015-09-15  2017-08-01           NA #> 169  2015-09-15  2017-09-01           NA #> 170  2015-09-15  2017-10-01           NA #> 171  2015-09-15  2017-11-01           NA #> 172  2015-09-15  2017-12-01           NA #> 173  2015-09-15  2018-01-01           NA #> 174  2015-09-15  2018-02-01           NA #> 175  2015-09-15  2018-03-01           NA #> 176  2015-09-15  2018-04-01           NA #> 177  2015-09-15  2018-05-01           NA #> 178  2015-09-15  2018-06-01           NA #> 179  2015-09-15  2018-07-01           NA #> 180  2015-09-15  2018-08-01           NA #> 181  2015-09-15  2018-09-01           NA #> 182  2015-09-15  2018-10-01           NA #> 183  2015-09-15  2018-11-01           NA #> 184  2015-09-15  2018-12-01           NA #> 185  2015-09-15  2019-01-01           NA #> 186  2015-09-15  2019-02-01           NA #> 187  2015-09-15  2019-03-01           NA #> 188  2015-09-15  2019-04-01           NA #> 189  2015-09-15  2019-05-01           NA #> 190  2015-09-15  2019-06-01           NA #> 191  2015-09-15  2019-07-01           NA #> 192  2015-09-15  2019-08-01           NA #> 193  2015-09-15  2019-09-01           NA #> 194  2015-09-15  2019-10-01           NA #> 195  2015-09-15  2019-11-01           NA #> 196  2015-09-15  2019-12-01           NA #> 197  2015-09-15  2020-01-01           NA #> 198  2015-09-15  2020-02-01           NA #> 199  2015-09-15  2020-03-01           NA #> 200  2015-09-15  2020-04-01           NA #> 201  2015-11-20  2012-01-01   9.22525339 #> 202  2015-11-20  2012-02-01  12.40245329 #> 203  2015-11-20  2012-03-01  14.24637448 #> 204  2015-11-20  2012-04-01  15.63222456 #> 205  2015-11-20  2012-05-01  21.58699810 #> 206  2015-11-20  2012-06-01  30.34642461 #> 207  2015-11-20  2012-07-01  33.43733438 #> 208  2015-11-20  2012-08-01  32.52000960 #> 209  2015-11-20  2012-09-01  30.75140033 #> 210  2015-11-20  2012-10-01  21.39927789 #> 211  2015-11-20  2012-11-01  22.56098506 #> 212  2015-11-20  2012-12-01  21.41188941 #> 213  2015-11-20  2013-01-01  18.73221590 #> 214  2015-11-20  2013-02-01  17.55178001 #> 215  2015-11-20  2013-03-01  19.94460238 #> 216  2015-11-20  2013-04-01  16.66622786 #> 217  2015-11-20  2013-05-01  21.87534360 #> 218  2015-11-20  2013-06-01  29.36666239 #> 219  2015-11-20  2013-07-01  35.45184663 #> 220  2015-11-20  2013-08-01  32.19216565 #> 221  2015-11-20  2013-09-01  31.95945845 #> 222  2015-11-20  2013-10-01  22.59212480 #> 223  2015-11-20  2013-11-01  25.97384269 #> 224  2015-11-20  2013-12-01  22.89300149 #> 225  2015-11-20  2014-01-01  17.68038771 #> 226  2015-11-20  2014-02-01  21.36744578 #> 227  2015-11-20  2014-03-01  23.74201796 #> 228  2015-11-20  2014-04-01  21.20255649 #> 229  2015-11-20  2014-05-01  26.34066757 #> 230  2015-11-20  2014-06-01  37.71496915 #> 231  2015-11-20  2014-07-01  46.36613754 #> 232  2015-11-20  2014-08-01  40.71283285 #> 233  2015-11-20  2014-09-01  39.58805377 #> 234  2015-11-20  2014-10-01  27.84017384 #> 235  2015-11-20  2014-11-01  26.64352520 #> 236  2015-11-20  2014-12-01  23.25734133 #> 237  2015-11-20  2015-01-01  15.54250362 #> 238  2015-11-20  2015-02-01  17.51772503 #> 239  2015-11-20  2015-03-01  13.64313066 #> 240  2015-11-20  2015-04-01   5.85795897 #> 241  2015-11-20  2015-05-01  12.38433547 #> 242  2015-11-20  2015-06-01  21.94731287 #> 243  2015-11-20  2015-07-01  28.76009507 #> 244  2015-11-20  2015-08-01  19.90961844 #> 245  2015-11-20  2015-09-01  13.16033115 #> 246  2015-11-20  2015-10-01   1.72556176 #> 247  2015-11-20  2015-11-01   8.29416811 #> 248  2015-11-20  2015-12-01           NA #> 249  2015-11-20  2016-01-01           NA #> 250  2015-11-20  2016-02-01           NA #> 251  2015-11-20  2016-03-01           NA #> 252  2015-11-20  2016-04-01           NA #> 253  2015-11-20  2016-05-01           NA #> 254  2015-11-20  2016-06-01           NA #> 255  2015-11-20  2016-07-01           NA #> 256  2015-11-20  2016-08-01           NA #> 257  2015-11-20  2016-09-01           NA #> 258  2015-11-20  2016-10-01           NA #> 259  2015-11-20  2016-11-01           NA #> 260  2015-11-20  2016-12-01           NA #> 261  2015-11-20  2017-01-01           NA #> 262  2015-11-20  2017-02-01           NA #> 263  2015-11-20  2017-03-01           NA #> 264  2015-11-20  2017-04-01           NA #> 265  2015-11-20  2017-05-01           NA #> 266  2015-11-20  2017-06-01           NA #> 267  2015-11-20  2017-07-01           NA #> 268  2015-11-20  2017-08-01           NA #> 269  2015-11-20  2017-09-01           NA #> 270  2015-11-20  2017-10-01           NA #> 271  2015-11-20  2017-11-01           NA #> 272  2015-11-20  2017-12-01           NA #> 273  2015-11-20  2018-01-01           NA #> 274  2015-11-20  2018-02-01           NA #> 275  2015-11-20  2018-03-01           NA #> 276  2015-11-20  2018-04-01           NA #> 277  2015-11-20  2018-05-01           NA #> 278  2015-11-20  2018-06-01           NA #> 279  2015-11-20  2018-07-01           NA #> 280  2015-11-20  2018-08-01           NA #> 281  2015-11-20  2018-09-01           NA #> 282  2015-11-20  2018-10-01           NA #> 283  2015-11-20  2018-11-01           NA #> 284  2015-11-20  2018-12-01           NA #> 285  2015-11-20  2019-01-01           NA #> 286  2015-11-20  2019-02-01           NA #> 287  2015-11-20  2019-03-01           NA #> 288  2015-11-20  2019-04-01           NA #> 289  2015-11-20  2019-05-01           NA #> 290  2015-11-20  2019-06-01           NA #> 291  2015-11-20  2019-07-01           NA #> 292  2015-11-20  2019-08-01           NA #> 293  2015-11-20  2019-09-01           NA #> 294  2015-11-20  2019-10-01           NA #> 295  2015-11-20  2019-11-01           NA #> 296  2015-11-20  2019-12-01           NA #> 297  2015-11-20  2020-01-01           NA #> 298  2015-11-20  2020-02-01           NA #> 299  2015-11-20  2020-03-01           NA #> 300  2015-11-20  2020-04-01           NA #> 301  2015-11-21  2012-01-01   9.25070651 #> 302  2015-11-21  2012-02-01  11.79419935 #> 303  2015-11-21  2012-03-01  15.06071314 #> 304  2015-11-21  2012-04-01  15.21289582 #> 305  2015-11-21  2012-05-01  21.40161713 #> 306  2015-11-21  2012-06-01  30.10558780 #> 307  2015-11-21  2012-07-01  33.50055788 #> 308  2015-11-21  2012-08-01  33.46463426 #> 309  2015-11-21  2012-09-01  30.57392507 #> 310  2015-11-21  2012-10-01  21.87199326 #> 311  2015-11-21  2012-11-01  22.90612764 #> 312  2015-11-21  2012-12-01  21.27730110 #> 313  2015-11-21  2013-01-01  18.55911098 #> 314  2015-11-21  2013-02-01  17.52406252 #> 315  2015-11-21  2013-03-01  18.46147078 #> 316  2015-11-21  2013-04-01  15.81265166 #> 317  2015-11-21  2013-05-01  21.81503881 #> 318  2015-11-21  2013-06-01  30.04508256 #> 319  2015-11-21  2013-07-01  35.66584362 #> 320  2015-11-21  2013-08-01  31.67788126 #> 321  2015-11-21  2013-09-01  31.79198810 #> 322  2015-11-21  2013-10-01  22.06674627 #> 323  2015-11-21  2013-11-01  26.19197573 #> 324  2015-11-21  2013-12-01  23.57682611 #> 325  2015-11-21  2014-01-01  18.08399434 #> 326  2015-11-21  2014-02-01  21.02092302 #> 327  2015-11-21  2014-03-01  23.40505616 #> 328  2015-11-21  2014-04-01  20.58951794 #> 329  2015-11-21  2014-05-01  25.90198532 #> 330  2015-11-21  2014-06-01  37.38356841 #> 331  2015-11-21  2014-07-01  46.21315326 #> 332  2015-11-21  2014-08-01  40.91380432 #> 333  2015-11-21  2014-09-01  38.58387341 #> 334  2015-11-21  2014-10-01  28.05301357 #> 335  2015-11-21  2014-11-01  26.94092933 #> 336  2015-11-21  2014-12-01  23.52647513 #> 337  2015-11-21  2015-01-01  15.81234931 #> 338  2015-11-21  2015-02-01  17.69603328 #> 339  2015-11-21  2015-03-01  13.56063963 #> 340  2015-11-21  2015-04-01   6.19845690 #> 341  2015-11-21  2015-05-01  12.00532396 #> 342  2015-11-21  2015-06-01  24.22589249 #> 343  2015-11-21  2015-07-01  29.02168251 #> 344  2015-11-21  2015-08-01  18.81884393 #> 345  2015-11-21  2015-09-01  12.99763223 #> 346  2015-11-21  2015-10-01   5.35126047 #> 347  2015-11-21  2015-11-01   5.72728033 #> 348  2015-11-21  2015-12-01           NA #> 349  2015-11-21  2016-01-01           NA #> 350  2015-11-21  2016-02-01           NA #> 351  2015-11-21  2016-03-01           NA #> 352  2015-11-21  2016-04-01           NA #> 353  2015-11-21  2016-05-01           NA #> 354  2015-11-21  2016-06-01           NA #> 355  2015-11-21  2016-07-01           NA #> 356  2015-11-21  2016-08-01           NA #> 357  2015-11-21  2016-09-01           NA #> 358  2015-11-21  2016-10-01           NA #> 359  2015-11-21  2016-11-01           NA #> 360  2015-11-21  2016-12-01           NA #> 361  2015-11-21  2017-01-01           NA #> 362  2015-11-21  2017-02-01           NA #> 363  2015-11-21  2017-03-01           NA #> 364  2015-11-21  2017-04-01           NA #> 365  2015-11-21  2017-05-01           NA #> 366  2015-11-21  2017-06-01           NA #> 367  2015-11-21  2017-07-01           NA #> 368  2015-11-21  2017-08-01           NA #> 369  2015-11-21  2017-09-01           NA #> 370  2015-11-21  2017-10-01           NA #> 371  2015-11-21  2017-11-01           NA #> 372  2015-11-21  2017-12-01           NA #> 373  2015-11-21  2018-01-01           NA #> 374  2015-11-21  2018-02-01           NA #> 375  2015-11-21  2018-03-01           NA #> 376  2015-11-21  2018-04-01           NA #> 377  2015-11-21  2018-05-01           NA #> 378  2015-11-21  2018-06-01           NA #> 379  2015-11-21  2018-07-01           NA #> 380  2015-11-21  2018-08-01           NA #> 381  2015-11-21  2018-09-01           NA #> 382  2015-11-21  2018-10-01           NA #> 383  2015-11-21  2018-11-01           NA #> 384  2015-11-21  2018-12-01           NA #> 385  2015-11-21  2019-01-01           NA #> 386  2015-11-21  2019-02-01           NA #> 387  2015-11-21  2019-03-01           NA #> 388  2015-11-21  2019-04-01           NA #> 389  2015-11-21  2019-05-01           NA #> 390  2015-11-21  2019-06-01           NA #> 391  2015-11-21  2019-07-01           NA #> 392  2015-11-21  2019-08-01           NA #> 393  2015-11-21  2019-09-01           NA #> 394  2015-11-21  2019-10-01           NA #> 395  2015-11-21  2019-11-01           NA #> 396  2015-11-21  2019-12-01           NA #> 397  2015-11-21  2020-01-01           NA #> 398  2015-11-21  2020-02-01           NA #> 399  2015-11-21  2020-03-01           NA #> 400  2015-11-21  2020-04-01           NA #> 401  2017-02-27  2012-01-01   9.02717830 #> 402  2017-02-27  2012-02-01  11.58129204 #> 403  2017-02-27  2012-03-01  14.91557831 #> 404  2017-02-27  2012-04-01  15.16075145 #> 405  2017-02-27  2012-05-01  21.50916922 #> 406  2017-02-27  2012-06-01  29.74773782 #> 407  2017-02-27  2012-07-01  33.33990272 #> 408  2017-02-27  2012-08-01  33.02990278 #> 409  2017-02-27  2012-09-01  30.82038718 #> 410  2017-02-27  2012-10-01  21.96335610 #> 411  2017-02-27  2012-11-01  22.75922770 #> 412  2017-02-27  2012-12-01  21.44695953 #> 413  2017-02-27  2013-01-01  18.49890099 #> 414  2017-02-27  2013-02-01  17.38932357 #> 415  2017-02-27  2013-03-01  18.70719480 #> 416  2017-02-27  2013-04-01  15.79885789 #> 417  2017-02-27  2013-05-01  21.90661537 #> 418  2017-02-27  2013-06-01  29.99383784 #> 419  2017-02-27  2013-07-01  35.70298459 #> 420  2017-02-27  2013-08-01  31.96659217 #> 421  2017-02-27  2013-09-01  32.00002944 #> 422  2017-02-27  2013-10-01  22.57394092 #> 423  2017-02-27  2013-11-01  26.35177025 #> 424  2017-02-27  2013-12-01  23.20831718 #> 425  2017-02-27  2014-01-01  18.15752883 #> 426  2017-02-27  2014-02-01  21.39615309 #> 427  2017-02-27  2014-03-01  23.26162455 #> 428  2017-02-27  2014-04-01  20.76701267 #> 429  2017-02-27  2014-05-01  26.00404828 #> 430  2017-02-27  2014-06-01  37.91405283 #> 431  2017-02-27  2014-07-01  46.26868387 #> 432  2017-02-27  2014-08-01  41.06551664 #> 433  2017-02-27  2014-09-01  39.15965138 #> 434  2017-02-27  2014-10-01  28.26791075 #> 435  2017-02-27  2014-11-01  27.02286858 #> 436  2017-02-27  2014-12-01  23.58809148 #> 437  2017-02-27  2015-01-01  15.58177274 #> 438  2017-02-27  2015-02-01  17.98162316 #> 439  2017-02-27  2015-03-01  13.36806550 #> 440  2017-02-27  2015-04-01   6.38675318 #> 441  2017-02-27  2015-05-01  11.75313678 #> 442  2017-02-27  2015-06-01  24.07093117 #> 443  2017-02-27  2015-07-01  29.71636210 #> 444  2017-02-27  2015-08-01  18.99381625 #> 445  2017-02-27  2015-09-01  13.16494894 #> 446  2017-02-27  2015-10-01   4.57691100 #> 447  2017-02-27  2015-11-01   7.53391386 #> 448  2017-02-27  2015-12-01   3.56177045 #> 449  2017-02-27  2016-01-01  -3.97043442 #> 450  2017-02-27  2016-02-01  -2.08033267 #> 451  2017-02-27  2016-03-01   0.44843189 #> 452  2017-02-27  2016-04-01  -6.50025565 #> 453  2017-02-27  2016-05-01  -6.69430730 #> 454  2017-02-27  2016-06-01   6.68320533 #> 455  2017-02-27  2016-07-01  11.52521778 #> 456  2017-02-27  2016-08-01   9.31763072 #> 457  2017-02-27  2016-09-01   8.70640032 #> 458  2017-02-27  2016-10-01  -2.90990936 #> 459  2017-02-27  2016-11-01   1.07068020 #> 460  2017-02-27  2016-12-01  -4.15413755 #> 461  2017-02-27  2017-01-01  -1.77420227 #> 462  2017-02-27  2017-02-01  -0.16761969 #> 463  2017-02-27  2017-03-01           NA #> 464  2017-02-27  2017-04-01           NA #> 465  2017-02-27  2017-05-01           NA #> 466  2017-02-27  2017-06-01           NA #> 467  2017-02-27  2017-07-01           NA #> 468  2017-02-27  2017-08-01           NA #> 469  2017-02-27  2017-09-01           NA #> 470  2017-02-27  2017-10-01           NA #> 471  2017-02-27  2017-11-01           NA #> 472  2017-02-27  2017-12-01           NA #> 473  2017-02-27  2018-01-01           NA #> 474  2017-02-27  2018-02-01           NA #> 475  2017-02-27  2018-03-01           NA #> 476  2017-02-27  2018-04-01           NA #> 477  2017-02-27  2018-05-01           NA #> 478  2017-02-27  2018-06-01           NA #> 479  2017-02-27  2018-07-01           NA #> 480  2017-02-27  2018-08-01           NA #> 481  2017-02-27  2018-09-01           NA #> 482  2017-02-27  2018-10-01           NA #> 483  2017-02-27  2018-11-01           NA #> 484  2017-02-27  2018-12-01           NA #> 485  2017-02-27  2019-01-01           NA #> 486  2017-02-27  2019-02-01           NA #> 487  2017-02-27  2019-03-01           NA #> 488  2017-02-27  2019-04-01           NA #> 489  2017-02-27  2019-05-01           NA #> 490  2017-02-27  2019-06-01           NA #> 491  2017-02-27  2019-07-01           NA #> 492  2017-02-27  2019-08-01           NA #> 493  2017-02-27  2019-09-01           NA #> 494  2017-02-27  2019-10-01           NA #> 495  2017-02-27  2019-11-01           NA #> 496  2017-02-27  2019-12-01           NA #> 497  2017-02-27  2020-01-01           NA #> 498  2017-02-27  2020-02-01           NA #> 499  2017-02-27  2020-03-01           NA #> 500  2017-02-27  2020-04-01           NA #> 501  2017-03-17  2012-01-01   8.97337730 #> 502  2017-03-17  2012-02-01  11.77395835 #> 503  2017-03-17  2012-03-01  14.70251207 #> 504  2017-03-17  2012-04-01  15.21778046 #> 505  2017-03-17  2012-05-01  21.46295209 #> 506  2017-03-17  2012-06-01  29.75831283 #> 507  2017-03-17  2012-07-01  33.52404331 #> 508  2017-03-17  2012-08-01  32.96027897 #> 509  2017-03-17  2012-09-01  30.80272905 #> 510  2017-03-17  2012-10-01  22.06270403 #> 511  2017-03-17  2012-11-01  22.95292716 #> 512  2017-03-17  2012-12-01  21.57975290 #> 513  2017-03-17  2013-01-01  18.57337604 #> 514  2017-03-17  2013-02-01  17.45559030 #> 515  2017-03-17  2013-03-01  18.73552397 #> 516  2017-03-17  2013-04-01  15.73470548 #> 517  2017-03-17  2013-05-01  21.78187607 #> 518  2017-03-17  2013-06-01  29.96051366 #> 519  2017-03-17  2013-07-01  35.75379266 #> 520  2017-03-17  2013-08-01  32.02914750 #> 521  2017-03-17  2013-09-01  32.06943574 #> 522  2017-03-17  2013-10-01  22.32793373 #> 523  2017-03-17  2013-11-01  26.24296240 #> 524  2017-03-17  2013-12-01  23.38215124 #> 525  2017-03-17  2014-01-01  18.32079377 #> 526  2017-03-17  2014-02-01  21.58647177 #> 527  2017-03-17  2014-03-01  23.46558155 #> 528  2017-03-17  2014-04-01  20.90146948 #> 529  2017-03-17  2014-05-01  25.96159049 #> 530  2017-03-17  2014-06-01  37.94746869 #> 531  2017-03-17  2014-07-01  46.32751596 #> 532  2017-03-17  2014-08-01  41.20030467 #> 533  2017-03-17  2014-09-01  38.80816496 #> 534  2017-03-17  2014-10-01  28.11532093 #> 535  2017-03-17  2014-11-01  26.73801148 #> 536  2017-03-17  2014-12-01  23.64514113 #> 537  2017-03-17  2015-01-01  15.65741442 #> 538  2017-03-17  2015-02-01  17.82766513 #> 539  2017-03-17  2015-03-01  13.50203742 #> 540  2017-03-17  2015-04-01   6.39622767 #> 541  2017-03-17  2015-05-01  11.75879131 #> 542  2017-03-17  2015-06-01  23.73243790 #> 543  2017-03-17  2015-07-01  29.74216701 #> 544  2017-03-17  2015-08-01  19.04877959 #> 545  2017-03-17  2015-09-01  13.67906728 #> 546  2017-03-17  2015-10-01   5.23412626 #> 547  2017-03-17  2015-11-01   6.49310443 #> 548  2017-03-17  2015-12-01   5.13409202 #> 549  2017-03-17  2016-01-01   0.11507126 #> 550  2017-03-17  2016-02-01   3.34740103 #> 551  2017-03-17  2016-03-01  -1.76685849 #> 552  2017-03-17  2016-04-01  -4.61116839 #> 553  2017-03-17  2016-05-01  -3.46221065 #> 554  2017-03-17  2016-06-01   3.63859766 #> 555  2017-03-17  2016-07-01  12.20552901 #> 556  2017-03-17  2016-08-01   5.43037534 #> 557  2017-03-17  2016-09-01   6.94063291 #> 558  2017-03-17  2016-10-01  -4.08320292 #> 559  2017-03-17  2016-11-01   0.84024567 #> 560  2017-03-17  2016-12-01  -3.11010454 #> 561  2017-03-17  2017-01-01  -0.70195923 #> 562  2017-03-17  2017-02-01  -1.49342115 #> 563  2017-03-17  2017-03-01  -6.30334493 #> 564  2017-03-17  2017-04-01           NA #> 565  2017-03-17  2017-05-01           NA #> 566  2017-03-17  2017-06-01           NA #> 567  2017-03-17  2017-07-01           NA #> 568  2017-03-17  2017-08-01           NA #> 569  2017-03-17  2017-09-01           NA #> 570  2017-03-17  2017-10-01           NA #> 571  2017-03-17  2017-11-01           NA #> 572  2017-03-17  2017-12-01           NA #> 573  2017-03-17  2018-01-01           NA #> 574  2017-03-17  2018-02-01           NA #> 575  2017-03-17  2018-03-01           NA #> 576  2017-03-17  2018-04-01           NA #> 577  2017-03-17  2018-05-01           NA #> 578  2017-03-17  2018-06-01           NA #> 579  2017-03-17  2018-07-01           NA #> 580  2017-03-17  2018-08-01           NA #> 581  2017-03-17  2018-09-01           NA #> 582  2017-03-17  2018-10-01           NA #> 583  2017-03-17  2018-11-01           NA #> 584  2017-03-17  2018-12-01           NA #> 585  2017-03-17  2019-01-01           NA #> 586  2017-03-17  2019-02-01           NA #> 587  2017-03-17  2019-03-01           NA #> 588  2017-03-17  2019-04-01           NA #> 589  2017-03-17  2019-05-01           NA #> 590  2017-03-17  2019-06-01           NA #> 591  2017-03-17  2019-07-01           NA #> 592  2017-03-17  2019-08-01           NA #> 593  2017-03-17  2019-09-01           NA #> 594  2017-03-17  2019-10-01           NA #> 595  2017-03-17  2019-11-01           NA #> 596  2017-03-17  2019-12-01           NA #> 597  2017-03-17  2020-01-01           NA #> 598  2017-03-17  2020-02-01           NA #> 599  2017-03-17  2020-03-01           NA #> 600  2017-03-17  2020-04-01           NA #> 601  2017-12-14  2012-01-01   9.06528608 #> 602  2017-12-14  2012-02-01  11.70302915 #> 603  2017-12-14  2012-03-01  14.81299936 #> 604  2017-12-14  2012-04-01  15.21350200 #> 605  2017-12-14  2012-05-01  21.50150016 #> 606  2017-12-14  2012-06-01  29.83075979 #> 607  2017-12-14  2012-07-01  33.52865584 #> 608  2017-12-14  2012-08-01  32.99872645 #> 609  2017-12-14  2012-09-01  30.80668792 #> 610  2017-12-14  2012-10-01  21.95780308 #> 611  2017-12-14  2012-11-01  22.84895635 #> 612  2017-12-14  2012-12-01  21.57592177 #> 613  2017-12-14  2013-01-01  18.44414163 #> 614  2017-12-14  2013-02-01  17.33640072 #> 615  2017-12-14  2013-03-01  18.70609994 #> 616  2017-12-14  2013-04-01  15.64953151 #> 617  2017-12-14  2013-05-01  21.81647707 #> 618  2017-12-14  2013-06-01  29.94238117 #> 619  2017-12-14  2013-07-01  35.73721668 #> 620  2017-12-14  2013-08-01  32.06009884 #> 621  2017-12-14  2013-09-01  32.00577117 #> 622  2017-12-14  2013-10-01  22.39576276 #> 623  2017-12-14  2013-11-01  26.23024852 #> 624  2017-12-14  2013-12-01  23.43761120 #> 625  2017-12-14  2014-01-01  18.35908474 #> 626  2017-12-14  2014-02-01  21.51212515 #> 627  2017-12-14  2014-03-01  23.41800025 #> 628  2017-12-14  2014-04-01  20.75866310 #> 629  2017-12-14  2014-05-01  26.01489007 #> 630  2017-12-14  2014-06-01  37.91789472 #> 631  2017-12-14  2014-07-01  46.36816557 #> 632  2017-12-14  2014-08-01  41.24478449 #> 633  2017-12-14  2014-09-01  38.97194161 #> 634  2017-12-14  2014-10-01  28.10426829 #> 635  2017-12-14  2014-11-01  26.78792887 #> 636  2017-12-14  2014-12-01  23.54916403 #> 637  2017-12-14  2015-01-01  15.62684271 #> 638  2017-12-14  2015-02-01  17.82239066 #> 639  2017-12-14  2015-03-01  13.44683024 #> 640  2017-12-14  2015-04-01   6.40522214 #> 641  2017-12-14  2015-05-01  11.67066683 #> 642  2017-12-14  2015-06-01  23.66045919 #> 643  2017-12-14  2015-07-01  29.74767752 #> 644  2017-12-14  2015-08-01  19.09060953 #> 645  2017-12-14  2015-09-01  13.46848922 #> 646  2017-12-14  2015-10-01   4.81261754 #> 647  2017-12-14  2015-11-01   6.46099995 #> 648  2017-12-14  2015-12-01   4.65125273 #> 649  2017-12-14  2016-01-01  -0.06271837 #> 650  2017-12-14  2016-02-01   0.94967876 #> 651  2017-12-14  2016-03-01  -1.80420130 #> 652  2017-12-14  2016-04-01  -5.18042272 #> 653  2017-12-14  2016-05-01  -3.99781455 #> 654  2017-12-14  2016-06-01   5.82941053 #> 655  2017-12-14  2016-07-01  12.84933172 #> 656  2017-12-14  2016-08-01   5.31655067 #> 657  2017-12-14  2016-09-01   7.41069368 #> 658  2017-12-14  2016-10-01  -3.39602517 #> 659  2017-12-14  2016-11-01  -0.83853213 #> 660  2017-12-14  2016-12-01  -3.36649896 #> 661  2017-12-14  2017-01-01  -1.63708823 #> 662  2017-12-14  2017-02-01  -1.51480402 #> 663  2017-12-14  2017-03-01  -6.39050477 #> 664  2017-12-14  2017-04-01 -13.33834577 #> 665  2017-12-14  2017-05-01  -2.11187854 #> 666  2017-12-14  2017-06-01   7.84153057 #> 667  2017-12-14  2017-07-01  15.19586033 #> 668  2017-12-14  2017-08-01   5.62761459 #> 669  2017-12-14  2017-09-01   5.51734397 #> 670  2017-12-14  2017-10-01  -6.27408358 #> 671  2017-12-14  2017-11-01  -2.12815613 #> 672  2017-12-14  2017-12-01  -9.27488029 #> 673  2017-12-14  2018-01-01           NA #> 674  2017-12-14  2018-02-01           NA #> 675  2017-12-14  2018-03-01           NA #> 676  2017-12-14  2018-04-01           NA #> 677  2017-12-14  2018-05-01           NA #> 678  2017-12-14  2018-06-01           NA #> 679  2017-12-14  2018-07-01           NA #> 680  2017-12-14  2018-08-01           NA #> 681  2017-12-14  2018-09-01           NA #> 682  2017-12-14  2018-10-01           NA #> 683  2017-12-14  2018-11-01           NA #> 684  2017-12-14  2018-12-01           NA #> 685  2017-12-14  2019-01-01           NA #> 686  2017-12-14  2019-02-01           NA #> 687  2017-12-14  2019-03-01           NA #> 688  2017-12-14  2019-04-01           NA #> 689  2017-12-14  2019-05-01           NA #> 690  2017-12-14  2019-06-01           NA #> 691  2017-12-14  2019-07-01           NA #> 692  2017-12-14  2019-08-01           NA #> 693  2017-12-14  2019-09-01           NA #> 694  2017-12-14  2019-10-01           NA #> 695  2017-12-14  2019-11-01           NA #> 696  2017-12-14  2019-12-01           NA #> 697  2017-12-14  2020-01-01           NA #> 698  2017-12-14  2020-02-01           NA #> 699  2017-12-14  2020-03-01           NA #> 700  2017-12-14  2020-04-01           NA #> 701  2018-01-26  2012-01-01   9.03220142 #> 702  2018-01-26  2012-02-01  11.77543307 #> 703  2018-01-26  2012-03-01  14.77230890 #> 704  2018-01-26  2012-04-01  15.24766114 #> 705  2018-01-26  2012-05-01  21.47277411 #> 706  2018-01-26  2012-06-01  29.79680989 #> 707  2018-01-26  2012-07-01  33.49744752 #> 708  2018-01-26  2012-08-01  33.00394561 #> 709  2018-01-26  2012-09-01  30.83951723 #> 710  2018-01-26  2012-10-01  21.88219292 #> 711  2018-01-26  2012-11-01  22.87358999 #> 712  2018-01-26  2012-12-01  21.58433261 #> 713  2018-01-26  2013-01-01  18.44263497 #> 714  2018-01-26  2013-02-01  17.37269803 #> 715  2018-01-26  2013-03-01  18.70859949 #> 716  2018-01-26  2013-04-01  15.65011393 #> 717  2018-01-26  2013-05-01  21.81912566 #> 718  2018-01-26  2013-06-01  29.92688453 #> 719  2018-01-26  2013-07-01  35.75875443 #> 720  2018-01-26  2013-08-01  32.05322043 #> 721  2018-01-26  2013-09-01  31.99923501 #> 722  2018-01-26  2013-10-01  22.41989388 #> 723  2018-01-26  2013-11-01  26.22704945 #> 724  2018-01-26  2013-12-01  23.41367961 #> 725  2018-01-26  2014-01-01  18.35206563 #> 726  2018-01-26  2014-02-01  21.55868177 #> 727  2018-01-26  2014-03-01  23.39736010 #> 728  2018-01-26  2014-04-01  20.75655262 #> 729  2018-01-26  2014-05-01  26.07035058 #> 730  2018-01-26  2014-06-01  37.95492223 #> 731  2018-01-26  2014-07-01  46.32001395 #> 732  2018-01-26  2014-08-01  41.26606917 #> 733  2018-01-26  2014-09-01  38.94436552 #> 734  2018-01-26  2014-10-01  28.11387491 #> 735  2018-01-26  2014-11-01  26.77925144 #> 736  2018-01-26  2014-12-01  23.59850443 #> 737  2018-01-26  2015-01-01  15.69232330 #> 738  2018-01-26  2015-02-01  17.87457732 #> 739  2018-01-26  2015-03-01  13.41167870 #> 740  2018-01-26  2015-04-01   6.47761660 #> 741  2018-01-26  2015-05-01  11.73965344 #> 742  2018-01-26  2015-06-01  23.69683151 #> 743  2018-01-26  2015-07-01  29.79258643 #> 744  2018-01-26  2015-08-01  19.07421758 #> 745  2018-01-26  2015-09-01  13.48468641 #> 746  2018-01-26  2015-10-01   4.71874251 #> 747  2018-01-26  2015-11-01   6.37541815 #> 748  2018-01-26  2015-12-01   4.74771003 #> 749  2018-01-26  2016-01-01  -0.27814126 #> 750  2018-01-26  2016-02-01   0.82058063 #> 751  2018-01-26  2016-03-01  -1.93081266 #> 752  2018-01-26  2016-04-01  -5.53672406 #> 753  2018-01-26  2016-05-01  -4.09163511 #> 754  2018-01-26  2016-06-01   6.98142268 #> 755  2018-01-26  2016-07-01  12.96707041 #> 756  2018-01-26  2016-08-01   5.63783811 #> 757  2018-01-26  2016-09-01   6.69083680 #> 758  2018-01-26  2016-10-01  -3.36783090 #> 759  2018-01-26  2016-11-01  -0.37706159 #> 760  2018-01-26  2016-12-01  -3.48255285 #> 761  2018-01-26  2017-01-01  -2.39037960 #> 762  2018-01-26  2017-02-01  -1.80710232 #> 763  2018-01-26  2017-03-01  -5.48814176 #> 764  2018-01-26  2017-04-01 -11.28655516 #> 765  2018-01-26  2017-05-01  -2.77588938 #> 766  2018-01-26  2017-06-01   8.67363890 #> 767  2018-01-26  2017-07-01  14.15088529 #> 768  2018-01-26  2017-08-01   4.41255535 #> 769  2018-01-26  2017-09-01   5.19475155 #> 770  2018-01-26  2017-10-01  -5.53467019 #> 771  2018-01-26  2017-11-01  -5.13286674 #> 772  2018-01-26  2017-12-01 -10.08145039 #> 773  2018-01-26  2018-01-01  -6.59996989 #> 774  2018-01-26  2018-02-01           NA #> 775  2018-01-26  2018-03-01           NA #> 776  2018-01-26  2018-04-01           NA #> 777  2018-01-26  2018-05-01           NA #> 778  2018-01-26  2018-06-01           NA #> 779  2018-01-26  2018-07-01           NA #> 780  2018-01-26  2018-08-01           NA #> 781  2018-01-26  2018-09-01           NA #> 782  2018-01-26  2018-10-01           NA #> 783  2018-01-26  2018-11-01           NA #> 784  2018-01-26  2018-12-01           NA #> 785  2018-01-26  2019-01-01           NA #> 786  2018-01-26  2019-02-01           NA #> 787  2018-01-26  2019-03-01           NA #> 788  2018-01-26  2019-04-01           NA #> 789  2018-01-26  2019-05-01           NA #> 790  2018-01-26  2019-06-01           NA #> 791  2018-01-26  2019-07-01           NA #> 792  2018-01-26  2019-08-01           NA #> 793  2018-01-26  2019-09-01           NA #> 794  2018-01-26  2019-10-01           NA #> 795  2018-01-26  2019-11-01           NA #> 796  2018-01-26  2019-12-01           NA #> 797  2018-01-26  2020-01-01           NA #> 798  2018-01-26  2020-02-01           NA #> 799  2018-01-26  2020-03-01           NA #> 800  2018-01-26  2020-04-01           NA #> 801  2019-05-05  2012-01-01   9.02044511 #> 802  2019-05-05  2012-02-01  11.78274478 #> 803  2019-05-05  2012-03-01  14.80635616 #> 804  2019-05-05  2012-04-01  15.27748591 #> 805  2019-05-05  2012-05-01  21.46834389 #> 806  2019-05-05  2012-06-01  29.79692376 #> 807  2019-05-05  2012-07-01  33.49635954 #> 808  2019-05-05  2012-08-01  33.00720145 #> 809  2019-05-05  2012-09-01  30.81486936 #> 810  2019-05-05  2012-10-01  21.90093645 #> 811  2019-05-05  2012-11-01  22.89295523 #> 812  2019-05-05  2012-12-01  21.59949090 #> 813  2019-05-05  2013-01-01  18.46807422 #> 814  2019-05-05  2013-02-01  17.38098828 #> 815  2019-05-05  2013-03-01  18.70935921 #> 816  2019-05-05  2013-04-01  15.66379833 #> 817  2019-05-05  2013-05-01  21.81086533 #> 818  2019-05-05  2013-06-01  29.91770967 #> 819  2019-05-05  2013-07-01  35.73702055 #> 820  2019-05-05  2013-08-01  32.07040429 #> 821  2019-05-05  2013-09-01  31.99763321 #> 822  2019-05-05  2013-10-01  22.41393323 #> 823  2019-05-05  2013-11-01  26.24990384 #> 824  2019-05-05  2013-12-01  23.45090610 #> 825  2019-05-05  2014-01-01  18.35342514 #> 826  2019-05-05  2014-02-01  21.54638625 #> 827  2019-05-05  2014-03-01  23.39815186 #> 828  2019-05-05  2014-04-01  20.76166780 #> 829  2019-05-05  2014-05-01  26.04834188 #> 830  2019-05-05  2014-06-01  37.93192835 #> 831  2019-05-05  2014-07-01  46.32179525 #> 832  2019-05-05  2014-08-01  41.27328519 #> 833  2019-05-05  2014-09-01  38.93743877 #> 834  2019-05-05  2014-10-01  28.12388241 #> 835  2019-05-05  2014-11-01  26.75923167 #> 836  2019-05-05  2014-12-01  23.57884909 #> 837  2019-05-05  2015-01-01  15.67492588 #> 838  2019-05-05  2015-02-01  17.84001749 #> 839  2019-05-05  2015-03-01  13.42006413 #> 840  2019-05-05  2015-04-01   6.44784426 #> 841  2019-05-05  2015-05-01  11.71467507 #> 842  2019-05-05  2015-06-01  23.67210633 #> 843  2019-05-05  2015-07-01  29.73213253 #> 844  2019-05-05  2015-08-01  19.04163084 #> 845  2019-05-05  2015-09-01  13.47706356 #> 846  2019-05-05  2015-10-01   4.88501517 #> 847  2019-05-05  2015-11-01   6.38514699 #> 848  2019-05-05  2015-12-01   4.44274660 #> 849  2019-05-05  2016-01-01  -0.35671151 #> 850  2019-05-05  2016-02-01   1.00766363 #> 851  2019-05-05  2016-03-01  -1.89247667 #> 852  2019-05-05  2016-04-01  -5.28296277 #> 853  2019-05-05  2016-05-01  -4.01966383 #> 854  2019-05-05  2016-06-01   6.68035718 #> 855  2019-05-05  2016-07-01  12.90205802 #> 856  2019-05-05  2016-08-01   5.70681339 #> 857  2019-05-05  2016-09-01   7.02103941 #> 858  2019-05-05  2016-10-01  -3.32729312 #> 859  2019-05-05  2016-11-01   0.01605897 #> 860  2019-05-05  2016-12-01  -3.49424152 #> 861  2019-05-05  2017-01-01  -2.01674349 #> 862  2019-05-05  2017-02-01  -1.40448570 #> 863  2019-05-05  2017-03-01  -6.08609369 #> 864  2019-05-05  2017-04-01 -10.77221036 #> 865  2019-05-05  2017-05-01  -2.92454315 #> 866  2019-05-05  2017-06-01   7.27662132 #> 867  2019-05-05  2017-07-01  14.31523293 #> 868  2019-05-05  2017-08-01   5.09303797 #> 869  2019-05-05  2017-09-01   4.38992442 #> 870  2019-05-05  2017-10-01  -4.78829838 #> 871  2019-05-05  2017-11-01  -5.91074683 #> 872  2019-05-05  2017-12-01  -8.95600575 #> 873  2019-05-05  2018-01-01  -5.14165190 #> 874  2019-05-05  2018-02-01  -3.60835693 #> 875  2019-05-05  2018-03-01  -2.31492524 #> 876  2019-05-05  2018-04-01  -3.82104917 #> 877  2019-05-05  2018-05-01  -4.95991589 #> 878  2019-05-05  2018-06-01   5.69841661 #> 879  2019-05-05  2018-07-01  12.81932551 #> 880  2019-05-05  2018-08-01   8.45095557 #> 881  2019-05-05  2018-09-01   9.70327333 #> 882  2019-05-05  2018-10-01  -8.79629582 #> 883  2019-05-05  2018-11-01  -1.49506521 #> 884  2019-05-05  2018-12-01  -4.67813063 #> 885  2019-05-05  2019-01-01  -1.37805908 #> 886  2019-05-05  2019-02-01   3.61005887 #> 887  2019-05-05  2019-03-01   6.28755846 #> 888  2019-05-05  2019-04-01   3.60091722 #> 889  2019-05-05  2019-05-01   7.49978501 #> 890  2019-05-05  2019-06-01           NA #> 891  2019-05-05  2019-07-01           NA #> 892  2019-05-05  2019-08-01           NA #> 893  2019-05-05  2019-09-01           NA #> 894  2019-05-05  2019-10-01           NA #> 895  2019-05-05  2019-11-01           NA #> 896  2019-05-05  2019-12-01           NA #> 897  2019-05-05  2020-01-01           NA #> 898  2019-05-05  2020-02-01           NA #> 899  2019-05-05  2020-03-01           NA #> 900  2019-05-05  2020-04-01           NA #> 901  2020-04-16  2012-01-01   9.02495995 #> 902  2020-04-16  2012-02-01  11.77780249 #> 903  2020-04-16  2012-03-01  14.80648079 #> 904  2020-04-16  2012-04-01  15.25723030 #> 905  2020-04-16  2012-05-01  21.45945781 #> 906  2020-04-16  2012-06-01  29.80045229 #> 907  2020-04-16  2012-07-01  33.48832905 #> 908  2020-04-16  2012-08-01  32.99086760 #> 909  2020-04-16  2012-09-01  30.82935970 #> 910  2020-04-16  2012-10-01  21.89703066 #> 911  2020-04-16  2012-11-01  22.88716006 #> 912  2020-04-16  2012-12-01  21.59663972 #> 913  2020-04-16  2013-01-01  18.46242293 #> 914  2020-04-16  2013-02-01  17.38915358 #> 915  2020-04-16  2013-03-01  18.71005170 #> 916  2020-04-16  2013-04-01  15.65460587 #> 917  2020-04-16  2013-05-01  21.79653411 #> 918  2020-04-16  2013-06-01  29.92702552 #> 919  2020-04-16  2013-07-01  35.73902790 #> 920  2020-04-16  2013-08-01  32.07259897 #> 921  2020-04-16  2013-09-01  31.99333006 #> 922  2020-04-16  2013-10-01  22.41781502 #> 923  2020-04-16  2013-11-01  26.25573793 #> 924  2020-04-16  2013-12-01  23.44351098 #> 925  2020-04-16  2014-01-01  18.35136452 #> 926  2020-04-16  2014-02-01  21.56107900 #> 927  2020-04-16  2014-03-01  23.40681439 #> 928  2020-04-16  2014-04-01  20.76308078 #> 929  2020-04-16  2014-05-01  26.05408900 #> 930  2020-04-16  2014-06-01  37.92339766 #> 931  2020-04-16  2014-07-01  46.30775134 #> 932  2020-04-16  2014-08-01  41.28003658 #> 933  2020-04-16  2014-09-01  38.94184337 #> 934  2020-04-16  2014-10-01  28.12432186 #> 935  2020-04-16  2014-11-01  26.77643234 #> 936  2020-04-16  2014-12-01  23.57504424 #> 937  2020-04-16  2015-01-01  15.67158881 #> 938  2020-04-16  2015-02-01  17.84697417 #> 939  2020-04-16  2015-03-01  13.42968425 #> 940  2020-04-16  2015-04-01   6.46079173 #> 941  2020-04-16  2015-05-01  11.72650365 #> 942  2020-04-16  2015-06-01  23.68338852 #> 943  2020-04-16  2015-07-01  29.75164059 #> 944  2020-04-16  2015-08-01  19.05151406 #> 945  2020-04-16  2015-09-01  13.48567788 #> 946  2020-04-16  2015-10-01   4.87350425 #> 947  2020-04-16  2015-11-01   6.37088469 #> 948  2020-04-16  2015-12-01   4.60535013 #> 949  2020-04-16  2016-01-01  -0.40603257 #> 950  2020-04-16  2016-02-01   0.80015163 #> 951  2020-04-16  2016-03-01  -1.93005715 #> 952  2020-04-16  2016-04-01  -5.45645895 #> 953  2020-04-16  2016-05-01  -3.96248713 #> 954  2020-04-16  2016-06-01   6.54693242 #> 955  2020-04-16  2016-07-01  12.79532667 #> 956  2020-04-16  2016-08-01   5.77994116 #> 957  2020-04-16  2016-09-01   6.90556295 #> 958  2020-04-16  2016-10-01  -3.18430472 #> 959  2020-04-16  2016-11-01  -0.28284125 #> 960  2020-04-16  2016-12-01  -3.47924980 #> 961  2020-04-16  2017-01-01  -1.94233084 #> 962  2020-04-16  2017-02-01  -1.60776908 #> 963  2020-04-16  2017-03-01  -6.21830567 #> 964  2020-04-16  2017-04-01  -9.58633249 #> 965  2020-04-16  2017-05-01  -3.47093358 #> 966  2020-04-16  2017-06-01   7.40904025 #> 967  2020-04-16  2017-07-01  13.42754216 #> 968  2020-04-16  2017-08-01   4.89155531 #> 969  2020-04-16  2017-09-01   5.70812455 #> 970  2020-04-16  2017-10-01  -5.60229020 #> 971  2020-04-16  2017-11-01  -4.95688746 #> 972  2020-04-16  2017-12-01  -8.25552945 #> 973  2020-04-16  2018-01-01  -6.39525386 #> 974  2020-04-16  2018-02-01  -1.04002161 #> 975  2020-04-16  2018-03-01  -3.21098234 #> 976  2020-04-16  2018-04-01  -6.75690564 #> 977  2020-04-16  2018-05-01  -2.77242525 #> 978  2020-04-16  2018-06-01   8.06491689 #> 979  2020-04-16  2018-07-01  14.82189809 #> 980  2020-04-16  2018-08-01   5.94862426 #> 981  2020-04-16  2018-09-01   9.84031215 #> 982  2020-04-16  2018-10-01  -2.94458153 #> 983  2020-04-16  2018-11-01   0.01419082 #> 984  2020-04-16  2018-12-01  -6.85307364 #> 985  2020-04-16  2019-01-01   0.31329376 #> 986  2020-04-16  2019-02-01   7.09346925 #> 987  2020-04-16  2019-03-01   4.74673815 #> 988  2020-04-16  2019-04-01   2.17925719 #> 989  2020-04-16  2019-05-01   6.17545176 #> 990  2020-04-16  2019-06-01  19.77197077 #> 991  2020-04-16  2019-07-01  20.97957249 #> 992  2020-04-16  2019-08-01  15.45945127 #> 993  2020-04-16  2019-09-01  12.03249790 #> 994  2020-04-16  2019-10-01  -1.51075472 #> 995  2020-04-16  2019-11-01   1.44746690 #> 996  2020-04-16  2019-12-01  -7.29229756 #> 997  2020-04-16  2020-01-01  -8.04330654 #> 998  2020-04-16  2020-02-01   1.37461624 #> 999  2020-04-16  2020-03-01  -5.39538916 #> 1000 2020-04-16  2020-04-01  -7.72044851 simulate_long(periodicity = 1L) #>       rev_date time_period  obs_values #> 1   2027-06-23  2012-01-01   7.1617106 #> 2   2027-06-23  2013-01-01   4.7072914 #> 3   2027-06-23  2014-01-01   2.4930494 #> 4   2027-06-23  2015-01-01   0.7533933 #> 5   2027-06-23  2016-01-01  10.3806843 #> 6   2027-06-23  2017-01-01  16.9585211 #> 7   2027-06-23  2018-01-01  22.6195351 #> 8   2027-06-23  2019-01-01  34.9950649 #> 9   2027-06-23  2020-01-01  47.6751868 #> 10  2027-06-23  2021-01-01  57.5243730 #> 11  2027-06-23  2022-01-01  73.5213278 #> 12  2027-06-23  2023-01-01  82.7060447 #> 13  2027-06-23  2024-01-01  90.7229932 #> 14  2027-06-23  2025-01-01 100.7142150 #> 15  2027-06-23  2026-01-01 106.7754057 #> 16  2027-06-23  2027-01-01 114.8614839 #> 17  2027-06-23  2028-01-01          NA #> 18  2027-06-23  2029-01-01          NA #> 19  2027-06-23  2030-01-01          NA #> 20  2027-06-23  2031-01-01          NA #> 21  2027-06-23  2032-01-01          NA #> 22  2027-06-23  2033-01-01          NA #> 23  2027-06-23  2034-01-01          NA #> 24  2027-06-23  2035-01-01          NA #> 25  2027-06-23  2036-01-01          NA #> 26  2027-06-23  2037-01-01          NA #> 27  2027-06-23  2038-01-01          NA #> 28  2027-06-23  2039-01-01          NA #> 29  2027-06-23  2040-01-01          NA #> 30  2027-06-23  2041-01-01          NA #> 31  2027-06-23  2042-01-01          NA #> 32  2027-06-23  2043-01-01          NA #> 33  2027-06-23  2044-01-01          NA #> 34  2027-06-23  2045-01-01          NA #> 35  2027-06-23  2046-01-01          NA #> 36  2027-06-23  2047-01-01          NA #> 37  2027-06-23  2048-01-01          NA #> 38  2027-06-23  2049-01-01          NA #> 39  2027-06-23  2050-01-01          NA #> 40  2027-06-23  2051-01-01          NA #> 41  2027-06-23  2052-01-01          NA #> 42  2027-06-23  2053-01-01          NA #> 43  2027-06-23  2054-01-01          NA #> 44  2027-06-23  2055-01-01          NA #> 45  2027-06-23  2056-01-01          NA #> 46  2027-06-23  2057-01-01          NA #> 47  2027-06-23  2058-01-01          NA #> 48  2027-06-23  2059-01-01          NA #> 49  2027-06-23  2060-01-01          NA #> 50  2027-06-23  2061-01-01          NA #> 51  2035-11-28  2012-01-01   5.2487162 #> 52  2035-11-28  2013-01-01   2.2610217 #> 53  2035-11-28  2014-01-01   3.8488236 #> 54  2035-11-28  2015-01-01   2.1859960 #> 55  2035-11-28  2016-01-01   8.9708595 #> 56  2035-11-28  2017-01-01  16.2289344 #> 57  2035-11-28  2018-01-01  28.2284970 #> 58  2035-11-28  2019-01-01  36.1776261 #> 59  2035-11-28  2020-01-01  46.6152344 #> 60  2035-11-28  2021-01-01  59.7754006 #> 61  2035-11-28  2022-01-01  68.7795325 #> 62  2035-11-28  2023-01-01  81.4956068 #> 63  2035-11-28  2024-01-01  89.9148970 #> 64  2035-11-28  2025-01-01  99.0793300 #> 65  2035-11-28  2026-01-01 104.5828818 #> 66  2035-11-28  2027-01-01 110.7880675 #> 67  2035-11-28  2028-01-01 119.9610392 #> 68  2035-11-28  2029-01-01 129.5194513 #> 69  2035-11-28  2030-01-01 137.6299146 #> 70  2035-11-28  2031-01-01 148.5270181 #> 71  2035-11-28  2032-01-01 148.9752086 #> 72  2035-11-28  2033-01-01 150.5319349 #> 73  2035-11-28  2034-01-01 152.2947626 #> 74  2035-11-28  2035-01-01 158.2136399 #> 75  2035-11-28  2036-01-01          NA #> 76  2035-11-28  2037-01-01          NA #> 77  2035-11-28  2038-01-01          NA #> 78  2035-11-28  2039-01-01          NA #> 79  2035-11-28  2040-01-01          NA #> 80  2035-11-28  2041-01-01          NA #> 81  2035-11-28  2042-01-01          NA #> 82  2035-11-28  2043-01-01          NA #> 83  2035-11-28  2044-01-01          NA #> 84  2035-11-28  2045-01-01          NA #> 85  2035-11-28  2046-01-01          NA #> 86  2035-11-28  2047-01-01          NA #> 87  2035-11-28  2048-01-01          NA #> 88  2035-11-28  2049-01-01          NA #> 89  2035-11-28  2050-01-01          NA #> 90  2035-11-28  2051-01-01          NA #> 91  2035-11-28  2052-01-01          NA #> 92  2035-11-28  2053-01-01          NA #> 93  2035-11-28  2054-01-01          NA #> 94  2035-11-28  2055-01-01          NA #> 95  2035-11-28  2056-01-01          NA #> 96  2035-11-28  2057-01-01          NA #> 97  2035-11-28  2058-01-01          NA #> 98  2035-11-28  2059-01-01          NA #> 99  2035-11-28  2060-01-01          NA #> 100 2035-11-28  2061-01-01          NA #> 101 2035-12-20  2012-01-01   7.1785778 #> 102 2035-12-20  2013-01-01   2.0653766 #> 103 2035-12-20  2014-01-01   2.8466556 #> 104 2035-12-20  2015-01-01   2.6140254 #> 105 2035-12-20  2016-01-01   8.5817845 #> 106 2035-12-20  2017-01-01  16.1875986 #> 107 2035-12-20  2018-01-01  27.9522924 #> 108 2035-12-20  2019-01-01  36.0500219 #> 109 2035-12-20  2020-01-01  45.3659936 #> 110 2035-12-20  2021-01-01  59.5938774 #> 111 2035-12-20  2022-01-01  71.3615913 #> 112 2035-12-20  2023-01-01  81.2322698 #> 113 2035-12-20  2024-01-01  90.3283332 #> 114 2035-12-20  2025-01-01  98.3269554 #> 115 2035-12-20  2026-01-01 106.2123426 #> 116 2035-12-20  2027-01-01 111.3236928 #> 117 2035-12-20  2028-01-01 119.8352182 #> 118 2035-12-20  2029-01-01 131.3056562 #> 119 2035-12-20  2030-01-01 137.8680998 #> 120 2035-12-20  2031-01-01 144.6966924 #> 121 2035-12-20  2032-01-01 146.1333311 #> 122 2035-12-20  2033-01-01 148.9208609 #> 123 2035-12-20  2034-01-01 152.5746904 #> 124 2035-12-20  2035-01-01 158.0145246 #> 125 2035-12-20  2036-01-01          NA #> 126 2035-12-20  2037-01-01          NA #> 127 2035-12-20  2038-01-01          NA #> 128 2035-12-20  2039-01-01          NA #> 129 2035-12-20  2040-01-01          NA #> 130 2035-12-20  2041-01-01          NA #> 131 2035-12-20  2042-01-01          NA #> 132 2035-12-20  2043-01-01          NA #> 133 2035-12-20  2044-01-01          NA #> 134 2035-12-20  2045-01-01          NA #> 135 2035-12-20  2046-01-01          NA #> 136 2035-12-20  2047-01-01          NA #> 137 2035-12-20  2048-01-01          NA #> 138 2035-12-20  2049-01-01          NA #> 139 2035-12-20  2050-01-01          NA #> 140 2035-12-20  2051-01-01          NA #> 141 2035-12-20  2052-01-01          NA #> 142 2035-12-20  2053-01-01          NA #> 143 2035-12-20  2054-01-01          NA #> 144 2035-12-20  2055-01-01          NA #> 145 2035-12-20  2056-01-01          NA #> 146 2035-12-20  2057-01-01          NA #> 147 2035-12-20  2058-01-01          NA #> 148 2035-12-20  2059-01-01          NA #> 149 2035-12-20  2060-01-01          NA #> 150 2035-12-20  2061-01-01          NA #> 151 2036-03-01  2012-01-01   6.5461882 #> 152 2036-03-01  2013-01-01   3.0462876 #> 153 2036-03-01  2014-01-01   3.1106088 #> 154 2036-03-01  2015-01-01   2.5098996 #> 155 2036-03-01  2016-01-01   8.3043338 #> 156 2036-03-01  2017-01-01  16.7087676 #> 157 2036-03-01  2018-01-01  28.7536474 #> 158 2036-03-01  2019-01-01  37.1992233 #> 159 2036-03-01  2020-01-01  46.1563999 #> 160 2036-03-01  2021-01-01  58.9789708 #> 161 2036-03-01  2022-01-01  71.4626369 #> 162 2036-03-01  2023-01-01  80.8288997 #> 163 2036-03-01  2024-01-01  90.1377649 #> 164 2036-03-01  2025-01-01  98.5346042 #> 165 2036-03-01  2026-01-01 105.5551258 #> 166 2036-03-01  2027-01-01 111.5607599 #> 167 2036-03-01  2028-01-01 120.2171920 #> 168 2036-03-01  2029-01-01 132.0423784 #> 169 2036-03-01  2030-01-01 139.0543864 #> 170 2036-03-01  2031-01-01 145.1057066 #> 171 2036-03-01  2032-01-01 146.6410416 #> 172 2036-03-01  2033-01-01 148.7976158 #> 173 2036-03-01  2034-01-01 153.3973230 #> 174 2036-03-01  2035-01-01 158.8541569 #> 175 2036-03-01  2036-01-01 163.9983804 #> 176 2036-03-01  2037-01-01          NA #> 177 2036-03-01  2038-01-01          NA #> 178 2036-03-01  2039-01-01          NA #> 179 2036-03-01  2040-01-01          NA #> 180 2036-03-01  2041-01-01          NA #> 181 2036-03-01  2042-01-01          NA #> 182 2036-03-01  2043-01-01          NA #> 183 2036-03-01  2044-01-01          NA #> 184 2036-03-01  2045-01-01          NA #> 185 2036-03-01  2046-01-01          NA #> 186 2036-03-01  2047-01-01          NA #> 187 2036-03-01  2048-01-01          NA #> 188 2036-03-01  2049-01-01          NA #> 189 2036-03-01  2050-01-01          NA #> 190 2036-03-01  2051-01-01          NA #> 191 2036-03-01  2052-01-01          NA #> 192 2036-03-01  2053-01-01          NA #> 193 2036-03-01  2054-01-01          NA #> 194 2036-03-01  2055-01-01          NA #> 195 2036-03-01  2056-01-01          NA #> 196 2036-03-01  2057-01-01          NA #> 197 2036-03-01  2058-01-01          NA #> 198 2036-03-01  2059-01-01          NA #> 199 2036-03-01  2060-01-01          NA #> 200 2036-03-01  2061-01-01          NA #> 201 2036-07-04  2012-01-01   6.5250221 #> 202 2036-07-04  2013-01-01   2.8088976 #> 203 2036-07-04  2014-01-01   2.5315714 #> 204 2036-07-04  2015-01-01   2.5415521 #> 205 2036-07-04  2016-01-01   8.4588606 #> 206 2036-07-04  2017-01-01  16.7405939 #> 207 2036-07-04  2018-01-01  28.4070834 #> 208 2036-07-04  2019-01-01  36.5543935 #> 209 2036-07-04  2020-01-01  46.3993843 #> 210 2036-07-04  2021-01-01  59.0183217 #> 211 2036-07-04  2022-01-01  71.4775893 #> 212 2036-07-04  2023-01-01  80.5888302 #> 213 2036-07-04  2024-01-01  90.4733957 #> 214 2036-07-04  2025-01-01  98.1416479 #> 215 2036-07-04  2026-01-01 105.6074823 #> 216 2036-07-04  2027-01-01 111.5428113 #> 217 2036-07-04  2028-01-01 120.2021906 #> 218 2036-07-04  2029-01-01 131.4982178 #> 219 2036-07-04  2030-01-01 139.7766451 #> 220 2036-07-04  2031-01-01 145.4549450 #> 221 2036-07-04  2032-01-01 146.0606903 #> 222 2036-07-04  2033-01-01 149.2623154 #> 223 2036-07-04  2034-01-01 153.0425364 #> 224 2036-07-04  2035-01-01 158.5052450 #> 225 2036-07-04  2036-01-01 164.1273072 #> 226 2036-07-04  2037-01-01          NA #> 227 2036-07-04  2038-01-01          NA #> 228 2036-07-04  2039-01-01          NA #> 229 2036-07-04  2040-01-01          NA #> 230 2036-07-04  2041-01-01          NA #> 231 2036-07-04  2042-01-01          NA #> 232 2036-07-04  2043-01-01          NA #> 233 2036-07-04  2044-01-01          NA #> 234 2036-07-04  2045-01-01          NA #> 235 2036-07-04  2046-01-01          NA #> 236 2036-07-04  2047-01-01          NA #> 237 2036-07-04  2048-01-01          NA #> 238 2036-07-04  2049-01-01          NA #> 239 2036-07-04  2050-01-01          NA #> 240 2036-07-04  2051-01-01          NA #> 241 2036-07-04  2052-01-01          NA #> 242 2036-07-04  2053-01-01          NA #> 243 2036-07-04  2054-01-01          NA #> 244 2036-07-04  2055-01-01          NA #> 245 2036-07-04  2056-01-01          NA #> 246 2036-07-04  2057-01-01          NA #> 247 2036-07-04  2058-01-01          NA #> 248 2036-07-04  2059-01-01          NA #> 249 2036-07-04  2060-01-01          NA #> 250 2036-07-04  2061-01-01          NA #> 251 2036-12-28  2012-01-01   6.5195952 #> 252 2036-12-28  2013-01-01   2.8773849 #> 253 2036-12-28  2014-01-01   2.5764236 #> 254 2036-12-28  2015-01-01   2.4467099 #> 255 2036-12-28  2016-01-01   8.4639810 #> 256 2036-12-28  2017-01-01  16.6258324 #> 257 2036-12-28  2018-01-01  28.4800317 #> 258 2036-12-28  2019-01-01  36.5947513 #> 259 2036-12-28  2020-01-01  46.2264989 #> 260 2036-12-28  2021-01-01  58.8712796 #> 261 2036-12-28  2022-01-01  71.5150789 #> 262 2036-12-28  2023-01-01  80.5913269 #> 263 2036-12-28  2024-01-01  90.5060185 #> 264 2036-12-28  2025-01-01  98.2385884 #> 265 2036-12-28  2026-01-01 105.7058758 #> 266 2036-12-28  2027-01-01 111.4598672 #> 267 2036-12-28  2028-01-01 120.2265997 #> 268 2036-12-28  2029-01-01 131.3508249 #> 269 2036-12-28  2030-01-01 139.9259534 #> 270 2036-12-28  2031-01-01 144.9836987 #> 271 2036-12-28  2032-01-01 146.1980973 #> 272 2036-12-28  2033-01-01 149.0107926 #> 273 2036-12-28  2034-01-01 152.7229922 #> 274 2036-12-28  2035-01-01 158.3312540 #> 275 2036-12-28  2036-01-01 162.3735023 #> 276 2036-12-28  2037-01-01          NA #> 277 2036-12-28  2038-01-01          NA #> 278 2036-12-28  2039-01-01          NA #> 279 2036-12-28  2040-01-01          NA #> 280 2036-12-28  2041-01-01          NA #> 281 2036-12-28  2042-01-01          NA #> 282 2036-12-28  2043-01-01          NA #> 283 2036-12-28  2044-01-01          NA #> 284 2036-12-28  2045-01-01          NA #> 285 2036-12-28  2046-01-01          NA #> 286 2036-12-28  2047-01-01          NA #> 287 2036-12-28  2048-01-01          NA #> 288 2036-12-28  2049-01-01          NA #> 289 2036-12-28  2050-01-01          NA #> 290 2036-12-28  2051-01-01          NA #> 291 2036-12-28  2052-01-01          NA #> 292 2036-12-28  2053-01-01          NA #> 293 2036-12-28  2054-01-01          NA #> 294 2036-12-28  2055-01-01          NA #> 295 2036-12-28  2056-01-01          NA #> 296 2036-12-28  2057-01-01          NA #> 297 2036-12-28  2058-01-01          NA #> 298 2036-12-28  2059-01-01          NA #> 299 2036-12-28  2060-01-01          NA #> 300 2036-12-28  2061-01-01          NA #> 301 2037-11-10  2012-01-01   6.5482424 #> 302 2037-11-10  2013-01-01   2.9739078 #> 303 2037-11-10  2014-01-01   2.6450711 #> 304 2037-11-10  2015-01-01   2.3893402 #> 305 2037-11-10  2016-01-01   8.4939527 #> 306 2037-11-10  2017-01-01  16.7576370 #> 307 2037-11-10  2018-01-01  28.5051267 #> 308 2037-11-10  2019-01-01  36.6501356 #> 309 2037-11-10  2020-01-01  46.3081916 #> 310 2037-11-10  2021-01-01  58.8986419 #> 311 2037-11-10  2022-01-01  71.4626510 #> 312 2037-11-10  2023-01-01  80.5502002 #> 313 2037-11-10  2024-01-01  90.4157705 #> 314 2037-11-10  2025-01-01  98.2954351 #> 315 2037-11-10  2026-01-01 105.6073119 #> 316 2037-11-10  2027-01-01 111.4012332 #> 317 2037-11-10  2028-01-01 120.0546613 #> 318 2037-11-10  2029-01-01 131.2478013 #> 319 2037-11-10  2030-01-01 139.7264723 #> 320 2037-11-10  2031-01-01 145.2384428 #> 321 2037-11-10  2032-01-01 146.3536312 #> 322 2037-11-10  2033-01-01 148.8585946 #> 323 2037-11-10  2034-01-01 153.0259360 #> 324 2037-11-10  2035-01-01 158.7493111 #> 325 2037-11-10  2036-01-01 163.2982885 #> 326 2037-11-10  2037-01-01 177.4570062 #> 327 2037-11-10  2038-01-01          NA #> 328 2037-11-10  2039-01-01          NA #> 329 2037-11-10  2040-01-01          NA #> 330 2037-11-10  2041-01-01          NA #> 331 2037-11-10  2042-01-01          NA #> 332 2037-11-10  2043-01-01          NA #> 333 2037-11-10  2044-01-01          NA #> 334 2037-11-10  2045-01-01          NA #> 335 2037-11-10  2046-01-01          NA #> 336 2037-11-10  2047-01-01          NA #> 337 2037-11-10  2048-01-01          NA #> 338 2037-11-10  2049-01-01          NA #> 339 2037-11-10  2050-01-01          NA #> 340 2037-11-10  2051-01-01          NA #> 341 2037-11-10  2052-01-01          NA #> 342 2037-11-10  2053-01-01          NA #> 343 2037-11-10  2054-01-01          NA #> 344 2037-11-10  2055-01-01          NA #> 345 2037-11-10  2056-01-01          NA #> 346 2037-11-10  2057-01-01          NA #> 347 2037-11-10  2058-01-01          NA #> 348 2037-11-10  2059-01-01          NA #> 349 2037-11-10  2060-01-01          NA #> 350 2037-11-10  2061-01-01          NA #> 351 2038-09-21  2012-01-01   6.5827737 #> 352 2038-09-21  2013-01-01   2.9911397 #> 353 2038-09-21  2014-01-01   2.6741826 #> 354 2038-09-21  2015-01-01   2.3769412 #> 355 2038-09-21  2016-01-01   8.4748776 #> 356 2038-09-21  2017-01-01  16.6655368 #> 357 2038-09-21  2018-01-01  28.4866430 #> 358 2038-09-21  2019-01-01  36.7261832 #> 359 2038-09-21  2020-01-01  46.2946571 #> 360 2038-09-21  2021-01-01  58.9308633 #> 361 2038-09-21  2022-01-01  71.4402553 #> 362 2038-09-21  2023-01-01  80.5540073 #> 363 2038-09-21  2024-01-01  90.4162912 #> 364 2038-09-21  2025-01-01  98.2601659 #> 365 2038-09-21  2026-01-01 105.5614215 #> 366 2038-09-21  2027-01-01 111.4262207 #> 367 2038-09-21  2028-01-01 120.1345396 #> 368 2038-09-21  2029-01-01 131.2303342 #> 369 2038-09-21  2030-01-01 139.8274638 #> 370 2038-09-21  2031-01-01 145.0912207 #> 371 2038-09-21  2032-01-01 146.3293344 #> 372 2038-09-21  2033-01-01 148.8683004 #> 373 2038-09-21  2034-01-01 153.0319381 #> 374 2038-09-21  2035-01-01 158.6471339 #> 375 2038-09-21  2036-01-01 163.0142738 #> 376 2038-09-21  2037-01-01 173.3347637 #> 377 2038-09-21  2038-01-01 184.2289879 #> 378 2038-09-21  2039-01-01          NA #> 379 2038-09-21  2040-01-01          NA #> 380 2038-09-21  2041-01-01          NA #> 381 2038-09-21  2042-01-01          NA #> 382 2038-09-21  2043-01-01          NA #> 383 2038-09-21  2044-01-01          NA #> 384 2038-09-21  2045-01-01          NA #> 385 2038-09-21  2046-01-01          NA #> 386 2038-09-21  2047-01-01          NA #> 387 2038-09-21  2048-01-01          NA #> 388 2038-09-21  2049-01-01          NA #> 389 2038-09-21  2050-01-01          NA #> 390 2038-09-21  2051-01-01          NA #> 391 2038-09-21  2052-01-01          NA #> 392 2038-09-21  2053-01-01          NA #> 393 2038-09-21  2054-01-01          NA #> 394 2038-09-21  2055-01-01          NA #> 395 2038-09-21  2056-01-01          NA #> 396 2038-09-21  2057-01-01          NA #> 397 2038-09-21  2058-01-01          NA #> 398 2038-09-21  2059-01-01          NA #> 399 2038-09-21  2060-01-01          NA #> 400 2038-09-21  2061-01-01          NA #> 401 2043-09-04  2012-01-01   6.5827006 #> 402 2043-09-04  2013-01-01   2.9987627 #> 403 2043-09-04  2014-01-01   2.6582058 #> 404 2043-09-04  2015-01-01   2.3558267 #> 405 2043-09-04  2016-01-01   8.4553982 #> 406 2043-09-04  2017-01-01  16.6764388 #> 407 2043-09-04  2018-01-01  28.4781571 #> 408 2043-09-04  2019-01-01  36.6989554 #> 409 2043-09-04  2020-01-01  46.2969729 #> 410 2043-09-04  2021-01-01  58.9109672 #> 411 2043-09-04  2022-01-01  71.4354228 #> 412 2043-09-04  2023-01-01  80.5596518 #> 413 2043-09-04  2024-01-01  90.4354998 #> 414 2043-09-04  2025-01-01  98.2493339 #> 415 2043-09-04  2026-01-01 105.6053266 #> 416 2043-09-04  2027-01-01 111.4362953 #> 417 2043-09-04  2028-01-01 120.1038540 #> 418 2043-09-04  2029-01-01 131.2710933 #> 419 2043-09-04  2030-01-01 139.8018659 #> 420 2043-09-04  2031-01-01 145.0862595 #> 421 2043-09-04  2032-01-01 146.3891031 #> 422 2043-09-04  2033-01-01 148.8412342 #> 423 2043-09-04  2034-01-01 153.0260006 #> 424 2043-09-04  2035-01-01 158.6567331 #> 425 2043-09-04  2036-01-01 163.0235616 #> 426 2043-09-04  2037-01-01 173.5818001 #> 427 2043-09-04  2038-01-01 183.7346736 #> 428 2043-09-04  2039-01-01 192.1605178 #> 429 2043-09-04  2040-01-01 199.5743211 #> 430 2043-09-04  2041-01-01 204.7861098 #> 431 2043-09-04  2042-01-01 208.0394372 #> 432 2043-09-04  2043-01-01 210.3968866 #> 433 2043-09-04  2044-01-01          NA #> 434 2043-09-04  2045-01-01          NA #> 435 2043-09-04  2046-01-01          NA #> 436 2043-09-04  2047-01-01          NA #> 437 2043-09-04  2048-01-01          NA #> 438 2043-09-04  2049-01-01          NA #> 439 2043-09-04  2050-01-01          NA #> 440 2043-09-04  2051-01-01          NA #> 441 2043-09-04  2052-01-01          NA #> 442 2043-09-04  2053-01-01          NA #> 443 2043-09-04  2054-01-01          NA #> 444 2043-09-04  2055-01-01          NA #> 445 2043-09-04  2056-01-01          NA #> 446 2043-09-04  2057-01-01          NA #> 447 2043-09-04  2058-01-01          NA #> 448 2043-09-04  2059-01-01          NA #> 449 2043-09-04  2060-01-01          NA #> 450 2043-09-04  2061-01-01          NA #> 451 2054-11-02  2012-01-01   6.5790604 #> 452 2054-11-02  2013-01-01   2.9846223 #> 453 2054-11-02  2014-01-01   2.6447680 #> 454 2054-11-02  2015-01-01   2.3591534 #> 455 2054-11-02  2016-01-01   8.4473288 #> 456 2054-11-02  2017-01-01  16.6885089 #> 457 2054-11-02  2018-01-01  28.4897144 #> 458 2054-11-02  2019-01-01  36.6828420 #> 459 2054-11-02  2020-01-01  46.3066078 #> 460 2054-11-02  2021-01-01  58.9163698 #> 461 2054-11-02  2022-01-01  71.4340816 #> 462 2054-11-02  2023-01-01  80.5683624 #> 463 2054-11-02  2024-01-01  90.4373693 #> 464 2054-11-02  2025-01-01  98.2624513 #> 465 2054-11-02  2026-01-01 105.5863427 #> 466 2054-11-02  2027-01-01 111.4320419 #> 467 2054-11-02  2028-01-01 120.1248095 #> 468 2054-11-02  2029-01-01 131.2529583 #> 469 2054-11-02  2030-01-01 139.8208648 #> 470 2054-11-02  2031-01-01 145.0931925 #> 471 2054-11-02  2032-01-01 146.3628288 #> 472 2054-11-02  2033-01-01 148.8600021 #> 473 2054-11-02  2034-01-01 153.0397746 #> 474 2054-11-02  2035-01-01 158.6774677 #> 475 2054-11-02  2036-01-01 163.0252758 #> 476 2054-11-02  2037-01-01 173.1838365 #> 477 2054-11-02  2038-01-01 181.5965386 #> 478 2054-11-02  2039-01-01 190.0582888 #> 479 2054-11-02  2040-01-01 198.1380978 #> 480 2054-11-02  2041-01-01 203.3573919 #> 481 2054-11-02  2042-01-01 208.7055914 #> 482 2054-11-02  2043-01-01 208.9739174 #> 483 2054-11-02  2044-01-01 214.9749337 #> 484 2054-11-02  2045-01-01 218.9584768 #> 485 2054-11-02  2046-01-01 236.2731025 #> 486 2054-11-02  2047-01-01 253.2995949 #> 487 2054-11-02  2048-01-01 268.3845850 #> 488 2054-11-02  2049-01-01 288.4840277 #> 489 2054-11-02  2050-01-01 307.9590060 #> 490 2054-11-02  2051-01-01 323.7912091 #> 491 2054-11-02  2052-01-01 344.8132543 #> 492 2054-11-02  2053-01-01 361.9521219 #> 493 2054-11-02  2054-01-01 382.5256280 #> 494 2054-11-02  2055-01-01          NA #> 495 2054-11-02  2056-01-01          NA #> 496 2054-11-02  2057-01-01          NA #> 497 2054-11-02  2058-01-01          NA #> 498 2054-11-02  2059-01-01          NA #> 499 2054-11-02  2060-01-01          NA #> 500 2054-11-02  2061-01-01          NA simulate_long(start_period = as.Date(\"2000-01-01\"),               n_period = 10L * 12L,               periodicity = 12L) #>        rev_date time_period   obs_values #> 1    2000-05-13  2000-01-01    8.4328505 #> 2    2000-05-13  2000-02-01    6.4059793 #> 3    2000-05-13  2000-03-01    8.4893613 #> 4    2000-05-13  2000-04-01    9.2775281 #> 5    2000-05-13  2000-05-01    6.3529027 #> 6    2000-05-13  2000-06-01           NA #> 7    2000-05-13  2000-07-01           NA #> 8    2000-05-13  2000-08-01           NA #> 9    2000-05-13  2000-09-01           NA #> 10   2000-05-13  2000-10-01           NA #> 11   2000-05-13  2000-11-01           NA #> 12   2000-05-13  2000-12-01           NA #> 13   2000-05-13  2001-01-01           NA #> 14   2000-05-13  2001-02-01           NA #> 15   2000-05-13  2001-03-01           NA #> 16   2000-05-13  2001-04-01           NA #> 17   2000-05-13  2001-05-01           NA #> 18   2000-05-13  2001-06-01           NA #> 19   2000-05-13  2001-07-01           NA #> 20   2000-05-13  2001-08-01           NA #> 21   2000-05-13  2001-09-01           NA #> 22   2000-05-13  2001-10-01           NA #> 23   2000-05-13  2001-11-01           NA #> 24   2000-05-13  2001-12-01           NA #> 25   2000-05-13  2002-01-01           NA #> 26   2000-05-13  2002-02-01           NA #> 27   2000-05-13  2002-03-01           NA #> 28   2000-05-13  2002-04-01           NA #> 29   2000-05-13  2002-05-01           NA #> 30   2000-05-13  2002-06-01           NA #> 31   2000-05-13  2002-07-01           NA #> 32   2000-05-13  2002-08-01           NA #> 33   2000-05-13  2002-09-01           NA #> 34   2000-05-13  2002-10-01           NA #> 35   2000-05-13  2002-11-01           NA #> 36   2000-05-13  2002-12-01           NA #> 37   2000-05-13  2003-01-01           NA #> 38   2000-05-13  2003-02-01           NA #> 39   2000-05-13  2003-03-01           NA #> 40   2000-05-13  2003-04-01           NA #> 41   2000-05-13  2003-05-01           NA #> 42   2000-05-13  2003-06-01           NA #> 43   2000-05-13  2003-07-01           NA #> 44   2000-05-13  2003-08-01           NA #> 45   2000-05-13  2003-09-01           NA #> 46   2000-05-13  2003-10-01           NA #> 47   2000-05-13  2003-11-01           NA #> 48   2000-05-13  2003-12-01           NA #> 49   2000-05-13  2004-01-01           NA #> 50   2000-05-13  2004-02-01           NA #> 51   2000-05-13  2004-03-01           NA #> 52   2000-05-13  2004-04-01           NA #> 53   2000-05-13  2004-05-01           NA #> 54   2000-05-13  2004-06-01           NA #> 55   2000-05-13  2004-07-01           NA #> 56   2000-05-13  2004-08-01           NA #> 57   2000-05-13  2004-09-01           NA #> 58   2000-05-13  2004-10-01           NA #> 59   2000-05-13  2004-11-01           NA #> 60   2000-05-13  2004-12-01           NA #> 61   2000-05-13  2005-01-01           NA #> 62   2000-05-13  2005-02-01           NA #> 63   2000-05-13  2005-03-01           NA #> 64   2000-05-13  2005-04-01           NA #> 65   2000-05-13  2005-05-01           NA #> 66   2000-05-13  2005-06-01           NA #> 67   2000-05-13  2005-07-01           NA #> 68   2000-05-13  2005-08-01           NA #> 69   2000-05-13  2005-09-01           NA #> 70   2000-05-13  2005-10-01           NA #> 71   2000-05-13  2005-11-01           NA #> 72   2000-05-13  2005-12-01           NA #> 73   2000-05-13  2006-01-01           NA #> 74   2000-05-13  2006-02-01           NA #> 75   2000-05-13  2006-03-01           NA #> 76   2000-05-13  2006-04-01           NA #> 77   2000-05-13  2006-05-01           NA #> 78   2000-05-13  2006-06-01           NA #> 79   2000-05-13  2006-07-01           NA #> 80   2000-05-13  2006-08-01           NA #> 81   2000-05-13  2006-09-01           NA #> 82   2000-05-13  2006-10-01           NA #> 83   2000-05-13  2006-11-01           NA #> 84   2000-05-13  2006-12-01           NA #> 85   2000-05-13  2007-01-01           NA #> 86   2000-05-13  2007-02-01           NA #> 87   2000-05-13  2007-03-01           NA #> 88   2000-05-13  2007-04-01           NA #> 89   2000-05-13  2007-05-01           NA #> 90   2000-05-13  2007-06-01           NA #> 91   2000-05-13  2007-07-01           NA #> 92   2000-05-13  2007-08-01           NA #> 93   2000-05-13  2007-09-01           NA #> 94   2000-05-13  2007-10-01           NA #> 95   2000-05-13  2007-11-01           NA #> 96   2000-05-13  2007-12-01           NA #> 97   2000-05-13  2008-01-01           NA #> 98   2000-05-13  2008-02-01           NA #> 99   2000-05-13  2008-03-01           NA #> 100  2000-05-13  2008-04-01           NA #> 101  2000-05-13  2008-05-01           NA #> 102  2000-05-13  2008-06-01           NA #> 103  2000-05-13  2008-07-01           NA #> 104  2000-05-13  2008-08-01           NA #> 105  2000-05-13  2008-09-01           NA #> 106  2000-05-13  2008-10-01           NA #> 107  2000-05-13  2008-11-01           NA #> 108  2000-05-13  2008-12-01           NA #> 109  2000-05-13  2009-01-01           NA #> 110  2000-05-13  2009-02-01           NA #> 111  2000-05-13  2009-03-01           NA #> 112  2000-05-13  2009-04-01           NA #> 113  2000-05-13  2009-05-01           NA #> 114  2000-05-13  2009-06-01           NA #> 115  2000-05-13  2009-07-01           NA #> 116  2000-05-13  2009-08-01           NA #> 117  2000-05-13  2009-09-01           NA #> 118  2000-05-13  2009-10-01           NA #> 119  2000-05-13  2009-11-01           NA #> 120  2000-05-13  2009-12-01           NA #> 121  2000-07-31  2000-01-01    7.3330921 #> 122  2000-07-31  2000-02-01    7.5279608 #> 123  2000-07-31  2000-03-01    8.3409169 #> 124  2000-07-31  2000-04-01   10.7188967 #> 125  2000-07-31  2000-05-01    9.0025441 #> 126  2000-07-31  2000-06-01   10.2797035 #> 127  2000-07-31  2000-07-01   20.8728257 #> 128  2000-07-31  2000-08-01           NA #> 129  2000-07-31  2000-09-01           NA #> 130  2000-07-31  2000-10-01           NA #> 131  2000-07-31  2000-11-01           NA #> 132  2000-07-31  2000-12-01           NA #> 133  2000-07-31  2001-01-01           NA #> 134  2000-07-31  2001-02-01           NA #> 135  2000-07-31  2001-03-01           NA #> 136  2000-07-31  2001-04-01           NA #> 137  2000-07-31  2001-05-01           NA #> 138  2000-07-31  2001-06-01           NA #> 139  2000-07-31  2001-07-01           NA #> 140  2000-07-31  2001-08-01           NA #> 141  2000-07-31  2001-09-01           NA #> 142  2000-07-31  2001-10-01           NA #> 143  2000-07-31  2001-11-01           NA #> 144  2000-07-31  2001-12-01           NA #> 145  2000-07-31  2002-01-01           NA #> 146  2000-07-31  2002-02-01           NA #> 147  2000-07-31  2002-03-01           NA #> 148  2000-07-31  2002-04-01           NA #> 149  2000-07-31  2002-05-01           NA #> 150  2000-07-31  2002-06-01           NA #> 151  2000-07-31  2002-07-01           NA #> 152  2000-07-31  2002-08-01           NA #> 153  2000-07-31  2002-09-01           NA #> 154  2000-07-31  2002-10-01           NA #> 155  2000-07-31  2002-11-01           NA #> 156  2000-07-31  2002-12-01           NA #> 157  2000-07-31  2003-01-01           NA #> 158  2000-07-31  2003-02-01           NA #> 159  2000-07-31  2003-03-01           NA #> 160  2000-07-31  2003-04-01           NA #> 161  2000-07-31  2003-05-01           NA #> 162  2000-07-31  2003-06-01           NA #> 163  2000-07-31  2003-07-01           NA #> 164  2000-07-31  2003-08-01           NA #> 165  2000-07-31  2003-09-01           NA #> 166  2000-07-31  2003-10-01           NA #> 167  2000-07-31  2003-11-01           NA #> 168  2000-07-31  2003-12-01           NA #> 169  2000-07-31  2004-01-01           NA #> 170  2000-07-31  2004-02-01           NA #> 171  2000-07-31  2004-03-01           NA #> 172  2000-07-31  2004-04-01           NA #> 173  2000-07-31  2004-05-01           NA #> 174  2000-07-31  2004-06-01           NA #> 175  2000-07-31  2004-07-01           NA #> 176  2000-07-31  2004-08-01           NA #> 177  2000-07-31  2004-09-01           NA #> 178  2000-07-31  2004-10-01           NA #> 179  2000-07-31  2004-11-01           NA #> 180  2000-07-31  2004-12-01           NA #> 181  2000-07-31  2005-01-01           NA #> 182  2000-07-31  2005-02-01           NA #> 183  2000-07-31  2005-03-01           NA #> 184  2000-07-31  2005-04-01           NA #> 185  2000-07-31  2005-05-01           NA #> 186  2000-07-31  2005-06-01           NA #> 187  2000-07-31  2005-07-01           NA #> 188  2000-07-31  2005-08-01           NA #> 189  2000-07-31  2005-09-01           NA #> 190  2000-07-31  2005-10-01           NA #> 191  2000-07-31  2005-11-01           NA #> 192  2000-07-31  2005-12-01           NA #> 193  2000-07-31  2006-01-01           NA #> 194  2000-07-31  2006-02-01           NA #> 195  2000-07-31  2006-03-01           NA #> 196  2000-07-31  2006-04-01           NA #> 197  2000-07-31  2006-05-01           NA #> 198  2000-07-31  2006-06-01           NA #> 199  2000-07-31  2006-07-01           NA #> 200  2000-07-31  2006-08-01           NA #> 201  2000-07-31  2006-09-01           NA #> 202  2000-07-31  2006-10-01           NA #> 203  2000-07-31  2006-11-01           NA #> 204  2000-07-31  2006-12-01           NA #> 205  2000-07-31  2007-01-01           NA #> 206  2000-07-31  2007-02-01           NA #> 207  2000-07-31  2007-03-01           NA #> 208  2000-07-31  2007-04-01           NA #> 209  2000-07-31  2007-05-01           NA #> 210  2000-07-31  2007-06-01           NA #> 211  2000-07-31  2007-07-01           NA #> 212  2000-07-31  2007-08-01           NA #> 213  2000-07-31  2007-09-01           NA #> 214  2000-07-31  2007-10-01           NA #> 215  2000-07-31  2007-11-01           NA #> 216  2000-07-31  2007-12-01           NA #> 217  2000-07-31  2008-01-01           NA #> 218  2000-07-31  2008-02-01           NA #> 219  2000-07-31  2008-03-01           NA #> 220  2000-07-31  2008-04-01           NA #> 221  2000-07-31  2008-05-01           NA #> 222  2000-07-31  2008-06-01           NA #> 223  2000-07-31  2008-07-01           NA #> 224  2000-07-31  2008-08-01           NA #> 225  2000-07-31  2008-09-01           NA #> 226  2000-07-31  2008-10-01           NA #> 227  2000-07-31  2008-11-01           NA #> 228  2000-07-31  2008-12-01           NA #> 229  2000-07-31  2009-01-01           NA #> 230  2000-07-31  2009-02-01           NA #> 231  2000-07-31  2009-03-01           NA #> 232  2000-07-31  2009-04-01           NA #> 233  2000-07-31  2009-05-01           NA #> 234  2000-07-31  2009-06-01           NA #> 235  2000-07-31  2009-07-01           NA #> 236  2000-07-31  2009-08-01           NA #> 237  2000-07-31  2009-09-01           NA #> 238  2000-07-31  2009-10-01           NA #> 239  2000-07-31  2009-11-01           NA #> 240  2000-07-31  2009-12-01           NA #> 241  2001-04-23  2000-01-01    9.5146482 #> 242  2001-04-23  2000-02-01    9.0867775 #> 243  2001-04-23  2000-03-01   10.6995858 #> 244  2001-04-23  2000-04-01    8.6392120 #> 245  2001-04-23  2000-05-01    8.7563874 #> 246  2001-04-23  2000-06-01    9.5078516 #> 247  2001-04-23  2000-07-01   18.2127622 #> 248  2001-04-23  2000-08-01   22.6388929 #> 249  2001-04-23  2000-09-01   21.1623673 #> 250  2001-04-23  2000-10-01   21.5364635 #> 251  2001-04-23  2000-11-01   21.2676741 #> 252  2001-04-23  2000-12-01   11.6364785 #> 253  2001-04-23  2001-01-01    9.5762748 #> 254  2001-04-23  2001-02-01   21.2846902 #> 255  2001-04-23  2001-03-01   17.5479755 #> 256  2001-04-23  2001-04-01   18.6732426 #> 257  2001-04-23  2001-05-01           NA #> 258  2001-04-23  2001-06-01           NA #> 259  2001-04-23  2001-07-01           NA #> 260  2001-04-23  2001-08-01           NA #> 261  2001-04-23  2001-09-01           NA #> 262  2001-04-23  2001-10-01           NA #> 263  2001-04-23  2001-11-01           NA #> 264  2001-04-23  2001-12-01           NA #> 265  2001-04-23  2002-01-01           NA #> 266  2001-04-23  2002-02-01           NA #> 267  2001-04-23  2002-03-01           NA #> 268  2001-04-23  2002-04-01           NA #> 269  2001-04-23  2002-05-01           NA #> 270  2001-04-23  2002-06-01           NA #> 271  2001-04-23  2002-07-01           NA #> 272  2001-04-23  2002-08-01           NA #> 273  2001-04-23  2002-09-01           NA #> 274  2001-04-23  2002-10-01           NA #> 275  2001-04-23  2002-11-01           NA #> 276  2001-04-23  2002-12-01           NA #> 277  2001-04-23  2003-01-01           NA #> 278  2001-04-23  2003-02-01           NA #> 279  2001-04-23  2003-03-01           NA #> 280  2001-04-23  2003-04-01           NA #> 281  2001-04-23  2003-05-01           NA #> 282  2001-04-23  2003-06-01           NA #> 283  2001-04-23  2003-07-01           NA #> 284  2001-04-23  2003-08-01           NA #> 285  2001-04-23  2003-09-01           NA #> 286  2001-04-23  2003-10-01           NA #> 287  2001-04-23  2003-11-01           NA #> 288  2001-04-23  2003-12-01           NA #> 289  2001-04-23  2004-01-01           NA #> 290  2001-04-23  2004-02-01           NA #> 291  2001-04-23  2004-03-01           NA #> 292  2001-04-23  2004-04-01           NA #> 293  2001-04-23  2004-05-01           NA #> 294  2001-04-23  2004-06-01           NA #> 295  2001-04-23  2004-07-01           NA #> 296  2001-04-23  2004-08-01           NA #> 297  2001-04-23  2004-09-01           NA #> 298  2001-04-23  2004-10-01           NA #> 299  2001-04-23  2004-11-01           NA #> 300  2001-04-23  2004-12-01           NA #> 301  2001-04-23  2005-01-01           NA #> 302  2001-04-23  2005-02-01           NA #> 303  2001-04-23  2005-03-01           NA #> 304  2001-04-23  2005-04-01           NA #> 305  2001-04-23  2005-05-01           NA #> 306  2001-04-23  2005-06-01           NA #> 307  2001-04-23  2005-07-01           NA #> 308  2001-04-23  2005-08-01           NA #> 309  2001-04-23  2005-09-01           NA #> 310  2001-04-23  2005-10-01           NA #> 311  2001-04-23  2005-11-01           NA #> 312  2001-04-23  2005-12-01           NA #> 313  2001-04-23  2006-01-01           NA #> 314  2001-04-23  2006-02-01           NA #> 315  2001-04-23  2006-03-01           NA #> 316  2001-04-23  2006-04-01           NA #> 317  2001-04-23  2006-05-01           NA #> 318  2001-04-23  2006-06-01           NA #> 319  2001-04-23  2006-07-01           NA #> 320  2001-04-23  2006-08-01           NA #> 321  2001-04-23  2006-09-01           NA #> 322  2001-04-23  2006-10-01           NA #> 323  2001-04-23  2006-11-01           NA #> 324  2001-04-23  2006-12-01           NA #> 325  2001-04-23  2007-01-01           NA #> 326  2001-04-23  2007-02-01           NA #> 327  2001-04-23  2007-03-01           NA #> 328  2001-04-23  2007-04-01           NA #> 329  2001-04-23  2007-05-01           NA #> 330  2001-04-23  2007-06-01           NA #> 331  2001-04-23  2007-07-01           NA #> 332  2001-04-23  2007-08-01           NA #> 333  2001-04-23  2007-09-01           NA #> 334  2001-04-23  2007-10-01           NA #> 335  2001-04-23  2007-11-01           NA #> 336  2001-04-23  2007-12-01           NA #> 337  2001-04-23  2008-01-01           NA #> 338  2001-04-23  2008-02-01           NA #> 339  2001-04-23  2008-03-01           NA #> 340  2001-04-23  2008-04-01           NA #> 341  2001-04-23  2008-05-01           NA #> 342  2001-04-23  2008-06-01           NA #> 343  2001-04-23  2008-07-01           NA #> 344  2001-04-23  2008-08-01           NA #> 345  2001-04-23  2008-09-01           NA #> 346  2001-04-23  2008-10-01           NA #> 347  2001-04-23  2008-11-01           NA #> 348  2001-04-23  2008-12-01           NA #> 349  2001-04-23  2009-01-01           NA #> 350  2001-04-23  2009-02-01           NA #> 351  2001-04-23  2009-03-01           NA #> 352  2001-04-23  2009-04-01           NA #> 353  2001-04-23  2009-05-01           NA #> 354  2001-04-23  2009-06-01           NA #> 355  2001-04-23  2009-07-01           NA #> 356  2001-04-23  2009-08-01           NA #> 357  2001-04-23  2009-09-01           NA #> 358  2001-04-23  2009-10-01           NA #> 359  2001-04-23  2009-11-01           NA #> 360  2001-04-23  2009-12-01           NA #> 361  2002-12-10  2000-01-01    8.6213693 #> 362  2002-12-10  2000-02-01    8.7818225 #> 363  2002-12-10  2000-03-01   10.2313029 #> 364  2002-12-10  2000-04-01    9.8391771 #> 365  2002-12-10  2000-05-01    8.9418453 #> 366  2002-12-10  2000-06-01    8.3722697 #> 367  2002-12-10  2000-07-01   17.4972076 #> 368  2002-12-10  2000-08-01   20.5728910 #> 369  2002-12-10  2000-09-01   23.0064074 #> 370  2002-12-10  2000-10-01   24.0105890 #> 371  2002-12-10  2000-11-01   20.2964399 #> 372  2002-12-10  2000-12-01   17.0261457 #> 373  2002-12-10  2001-01-01   13.5204494 #> 374  2002-12-10  2001-02-01   15.7675815 #> 375  2002-12-10  2001-03-01   15.8304415 #> 376  2002-12-10  2001-04-01   15.0448438 #> 377  2002-12-10  2001-05-01   12.3393701 #> 378  2002-12-10  2001-06-01    8.6534300 #> 379  2002-12-10  2001-07-01   23.3840838 #> 380  2002-12-10  2001-08-01   16.9583893 #> 381  2002-12-10  2001-09-01   16.0305469 #> 382  2002-12-10  2001-10-01   17.1858788 #> 383  2002-12-10  2001-11-01   17.2511174 #> 384  2002-12-10  2001-12-01    7.0193567 #> 385  2002-12-10  2002-01-01    3.2166896 #> 386  2002-12-10  2002-02-01    4.3552685 #> 387  2002-12-10  2002-03-01    7.5834875 #> 388  2002-12-10  2002-04-01    7.2513197 #> 389  2002-12-10  2002-05-01    0.6698554 #> 390  2002-12-10  2002-06-01    3.2174140 #> 391  2002-12-10  2002-07-01   15.7879443 #> 392  2002-12-10  2002-08-01   16.8918245 #> 393  2002-12-10  2002-09-01   14.8974280 #> 394  2002-12-10  2002-10-01   13.7018565 #> 395  2002-12-10  2002-11-01   12.0209448 #> 396  2002-12-10  2002-12-01    2.7603768 #> 397  2002-12-10  2003-01-01           NA #> 398  2002-12-10  2003-02-01           NA #> 399  2002-12-10  2003-03-01           NA #> 400  2002-12-10  2003-04-01           NA #> 401  2002-12-10  2003-05-01           NA #> 402  2002-12-10  2003-06-01           NA #> 403  2002-12-10  2003-07-01           NA #> 404  2002-12-10  2003-08-01           NA #> 405  2002-12-10  2003-09-01           NA #> 406  2002-12-10  2003-10-01           NA #> 407  2002-12-10  2003-11-01           NA #> 408  2002-12-10  2003-12-01           NA #> 409  2002-12-10  2004-01-01           NA #> 410  2002-12-10  2004-02-01           NA #> 411  2002-12-10  2004-03-01           NA #> 412  2002-12-10  2004-04-01           NA #> 413  2002-12-10  2004-05-01           NA #> 414  2002-12-10  2004-06-01           NA #> 415  2002-12-10  2004-07-01           NA #> 416  2002-12-10  2004-08-01           NA #> 417  2002-12-10  2004-09-01           NA #> 418  2002-12-10  2004-10-01           NA #> 419  2002-12-10  2004-11-01           NA #> 420  2002-12-10  2004-12-01           NA #> 421  2002-12-10  2005-01-01           NA #> 422  2002-12-10  2005-02-01           NA #> 423  2002-12-10  2005-03-01           NA #> 424  2002-12-10  2005-04-01           NA #> 425  2002-12-10  2005-05-01           NA #> 426  2002-12-10  2005-06-01           NA #> 427  2002-12-10  2005-07-01           NA #> 428  2002-12-10  2005-08-01           NA #> 429  2002-12-10  2005-09-01           NA #> 430  2002-12-10  2005-10-01           NA #> 431  2002-12-10  2005-11-01           NA #> 432  2002-12-10  2005-12-01           NA #> 433  2002-12-10  2006-01-01           NA #> 434  2002-12-10  2006-02-01           NA #> 435  2002-12-10  2006-03-01           NA #> 436  2002-12-10  2006-04-01           NA #> 437  2002-12-10  2006-05-01           NA #> 438  2002-12-10  2006-06-01           NA #> 439  2002-12-10  2006-07-01           NA #> 440  2002-12-10  2006-08-01           NA #> 441  2002-12-10  2006-09-01           NA #> 442  2002-12-10  2006-10-01           NA #> 443  2002-12-10  2006-11-01           NA #> 444  2002-12-10  2006-12-01           NA #> 445  2002-12-10  2007-01-01           NA #> 446  2002-12-10  2007-02-01           NA #> 447  2002-12-10  2007-03-01           NA #> 448  2002-12-10  2007-04-01           NA #> 449  2002-12-10  2007-05-01           NA #> 450  2002-12-10  2007-06-01           NA #> 451  2002-12-10  2007-07-01           NA #> 452  2002-12-10  2007-08-01           NA #> 453  2002-12-10  2007-09-01           NA #> 454  2002-12-10  2007-10-01           NA #> 455  2002-12-10  2007-11-01           NA #> 456  2002-12-10  2007-12-01           NA #> 457  2002-12-10  2008-01-01           NA #> 458  2002-12-10  2008-02-01           NA #> 459  2002-12-10  2008-03-01           NA #> 460  2002-12-10  2008-04-01           NA #> 461  2002-12-10  2008-05-01           NA #> 462  2002-12-10  2008-06-01           NA #> 463  2002-12-10  2008-07-01           NA #> 464  2002-12-10  2008-08-01           NA #> 465  2002-12-10  2008-09-01           NA #> 466  2002-12-10  2008-10-01           NA #> 467  2002-12-10  2008-11-01           NA #> 468  2002-12-10  2008-12-01           NA #> 469  2002-12-10  2009-01-01           NA #> 470  2002-12-10  2009-02-01           NA #> 471  2002-12-10  2009-03-01           NA #> 472  2002-12-10  2009-04-01           NA #> 473  2002-12-10  2009-05-01           NA #> 474  2002-12-10  2009-06-01           NA #> 475  2002-12-10  2009-07-01           NA #> 476  2002-12-10  2009-08-01           NA #> 477  2002-12-10  2009-09-01           NA #> 478  2002-12-10  2009-10-01           NA #> 479  2002-12-10  2009-11-01           NA #> 480  2002-12-10  2009-12-01           NA #> 481  2003-02-15  2000-01-01    8.9066941 #> 482  2003-02-15  2000-02-01    8.9183783 #> 483  2003-02-15  2000-03-01   10.2775441 #> 484  2003-02-15  2000-04-01    9.7473226 #> 485  2003-02-15  2000-05-01    8.5852923 #> 486  2003-02-15  2000-06-01    8.7311432 #> 487  2003-02-15  2000-07-01   18.4237034 #> 488  2003-02-15  2000-08-01   21.4711844 #> 489  2003-02-15  2000-09-01   22.3116852 #> 490  2003-02-15  2000-10-01   23.2491303 #> 491  2003-02-15  2000-11-01   20.6689691 #> 492  2003-02-15  2000-12-01   14.4850209 #> 493  2003-02-15  2001-01-01   14.1606539 #> 494  2003-02-15  2001-02-01   15.2832262 #> 495  2003-02-15  2001-03-01   16.5234711 #> 496  2003-02-15  2001-04-01   15.9862044 #> 497  2003-02-15  2001-05-01   12.0415596 #> 498  2003-02-15  2001-06-01   11.7694337 #> 499  2003-02-15  2001-07-01   16.6742341 #> 500  2003-02-15  2001-08-01   16.4014108 #> 501  2003-02-15  2001-09-01   15.9710834 #> 502  2003-02-15  2001-10-01   17.8191502 #> 503  2003-02-15  2001-11-01   15.4695115 #> 504  2003-02-15  2001-12-01    8.1153469 #> 505  2003-02-15  2002-01-01    1.5049180 #> 506  2003-02-15  2002-02-01    5.7982680 #> 507  2003-02-15  2002-03-01    7.1668399 #> 508  2003-02-15  2002-04-01    4.1322763 #> 509  2003-02-15  2002-05-01    2.3932576 #> 510  2003-02-15  2002-06-01    3.2608325 #> 511  2003-02-15  2002-07-01   15.3331140 #> 512  2003-02-15  2002-08-01   16.4492100 #> 513  2003-02-15  2002-09-01   13.5762861 #> 514  2003-02-15  2002-10-01   13.9912397 #> 515  2003-02-15  2002-11-01   11.4638973 #> 516  2003-02-15  2002-12-01    3.0467418 #> 517  2003-02-15  2003-01-01   -8.6521461 #> 518  2003-02-15  2003-02-01  -12.7629207 #> 519  2003-02-15  2003-03-01           NA #> 520  2003-02-15  2003-04-01           NA #> 521  2003-02-15  2003-05-01           NA #> 522  2003-02-15  2003-06-01           NA #> 523  2003-02-15  2003-07-01           NA #> 524  2003-02-15  2003-08-01           NA #> 525  2003-02-15  2003-09-01           NA #> 526  2003-02-15  2003-10-01           NA #> 527  2003-02-15  2003-11-01           NA #> 528  2003-02-15  2003-12-01           NA #> 529  2003-02-15  2004-01-01           NA #> 530  2003-02-15  2004-02-01           NA #> 531  2003-02-15  2004-03-01           NA #> 532  2003-02-15  2004-04-01           NA #> 533  2003-02-15  2004-05-01           NA #> 534  2003-02-15  2004-06-01           NA #> 535  2003-02-15  2004-07-01           NA #> 536  2003-02-15  2004-08-01           NA #> 537  2003-02-15  2004-09-01           NA #> 538  2003-02-15  2004-10-01           NA #> 539  2003-02-15  2004-11-01           NA #> 540  2003-02-15  2004-12-01           NA #> 541  2003-02-15  2005-01-01           NA #> 542  2003-02-15  2005-02-01           NA #> 543  2003-02-15  2005-03-01           NA #> 544  2003-02-15  2005-04-01           NA #> 545  2003-02-15  2005-05-01           NA #> 546  2003-02-15  2005-06-01           NA #> 547  2003-02-15  2005-07-01           NA #> 548  2003-02-15  2005-08-01           NA #> 549  2003-02-15  2005-09-01           NA #> 550  2003-02-15  2005-10-01           NA #> 551  2003-02-15  2005-11-01           NA #> 552  2003-02-15  2005-12-01           NA #> 553  2003-02-15  2006-01-01           NA #> 554  2003-02-15  2006-02-01           NA #> 555  2003-02-15  2006-03-01           NA #> 556  2003-02-15  2006-04-01           NA #> 557  2003-02-15  2006-05-01           NA #> 558  2003-02-15  2006-06-01           NA #> 559  2003-02-15  2006-07-01           NA #> 560  2003-02-15  2006-08-01           NA #> 561  2003-02-15  2006-09-01           NA #> 562  2003-02-15  2006-10-01           NA #> 563  2003-02-15  2006-11-01           NA #> 564  2003-02-15  2006-12-01           NA #> 565  2003-02-15  2007-01-01           NA #> 566  2003-02-15  2007-02-01           NA #> 567  2003-02-15  2007-03-01           NA #> 568  2003-02-15  2007-04-01           NA #> 569  2003-02-15  2007-05-01           NA #> 570  2003-02-15  2007-06-01           NA #> 571  2003-02-15  2007-07-01           NA #> 572  2003-02-15  2007-08-01           NA #> 573  2003-02-15  2007-09-01           NA #> 574  2003-02-15  2007-10-01           NA #> 575  2003-02-15  2007-11-01           NA #> 576  2003-02-15  2007-12-01           NA #> 577  2003-02-15  2008-01-01           NA #> 578  2003-02-15  2008-02-01           NA #> 579  2003-02-15  2008-03-01           NA #> 580  2003-02-15  2008-04-01           NA #> 581  2003-02-15  2008-05-01           NA #> 582  2003-02-15  2008-06-01           NA #> 583  2003-02-15  2008-07-01           NA #> 584  2003-02-15  2008-08-01           NA #> 585  2003-02-15  2008-09-01           NA #> 586  2003-02-15  2008-10-01           NA #> 587  2003-02-15  2008-11-01           NA #> 588  2003-02-15  2008-12-01           NA #> 589  2003-02-15  2009-01-01           NA #> 590  2003-02-15  2009-02-01           NA #> 591  2003-02-15  2009-03-01           NA #> 592  2003-02-15  2009-04-01           NA #> 593  2003-02-15  2009-05-01           NA #> 594  2003-02-15  2009-06-01           NA #> 595  2003-02-15  2009-07-01           NA #> 596  2003-02-15  2009-08-01           NA #> 597  2003-02-15  2009-09-01           NA #> 598  2003-02-15  2009-10-01           NA #> 599  2003-02-15  2009-11-01           NA #> 600  2003-02-15  2009-12-01           NA #> 601  2003-05-05  2000-01-01    8.9042733 #> 602  2003-05-05  2000-02-01    8.9863540 #> 603  2003-05-05  2000-03-01   10.2221837 #> 604  2003-05-05  2000-04-01    9.7132451 #> 605  2003-05-05  2000-05-01    8.6885442 #> 606  2003-05-05  2000-06-01    8.5275933 #> 607  2003-05-05  2000-07-01   18.2171334 #> 608  2003-05-05  2000-08-01   20.8881018 #> 609  2003-05-05  2000-09-01   22.6254780 #> 610  2003-05-05  2000-10-01   23.5663014 #> 611  2003-05-05  2000-11-01   21.5265520 #> 612  2003-05-05  2000-12-01   14.8775718 #> 613  2003-05-05  2001-01-01   13.4032167 #> 614  2003-05-05  2001-02-01   14.8805181 #> 615  2003-05-05  2001-03-01   17.4330466 #> 616  2003-05-05  2001-04-01   14.8364556 #> 617  2003-05-05  2001-05-01   12.4732055 #> 618  2003-05-05  2001-06-01   12.5021819 #> 619  2003-05-05  2001-07-01   18.1890650 #> 620  2003-05-05  2001-08-01   16.4320645 #> 621  2003-05-05  2001-09-01   14.0982051 #> 622  2003-05-05  2001-10-01   16.7671659 #> 623  2003-05-05  2001-11-01   15.1793548 #> 624  2003-05-05  2001-12-01    8.6119128 #> 625  2003-05-05  2002-01-01    2.6982806 #> 626  2003-05-05  2002-02-01    6.3479365 #> 627  2003-05-05  2002-03-01    7.7651348 #> 628  2003-05-05  2002-04-01    4.9256878 #> 629  2003-05-05  2002-05-01    1.9927415 #> 630  2003-05-05  2002-06-01    3.8877414 #> 631  2003-05-05  2002-07-01   15.3666090 #> 632  2003-05-05  2002-08-01   16.6793930 #> 633  2003-05-05  2002-09-01   14.2481746 #> 634  2003-05-05  2002-10-01   15.0423811 #> 635  2003-05-05  2002-11-01   12.6078677 #> 636  2003-05-05  2002-12-01    2.3266646 #> 637  2003-05-05  2003-01-01   -9.6458948 #> 638  2003-05-05  2003-02-01   -8.0590463 #> 639  2003-05-05  2003-03-01  -12.9088296 #> 640  2003-05-05  2003-04-01  -19.1960311 #> 641  2003-05-05  2003-05-01  -28.1936831 #> 642  2003-05-05  2003-06-01           NA #> 643  2003-05-05  2003-07-01           NA #> 644  2003-05-05  2003-08-01           NA #> 645  2003-05-05  2003-09-01           NA #> 646  2003-05-05  2003-10-01           NA #> 647  2003-05-05  2003-11-01           NA #> 648  2003-05-05  2003-12-01           NA #> 649  2003-05-05  2004-01-01           NA #> 650  2003-05-05  2004-02-01           NA #> 651  2003-05-05  2004-03-01           NA #> 652  2003-05-05  2004-04-01           NA #> 653  2003-05-05  2004-05-01           NA #> 654  2003-05-05  2004-06-01           NA #> 655  2003-05-05  2004-07-01           NA #> 656  2003-05-05  2004-08-01           NA #> 657  2003-05-05  2004-09-01           NA #> 658  2003-05-05  2004-10-01           NA #> 659  2003-05-05  2004-11-01           NA #> 660  2003-05-05  2004-12-01           NA #> 661  2003-05-05  2005-01-01           NA #> 662  2003-05-05  2005-02-01           NA #> 663  2003-05-05  2005-03-01           NA #> 664  2003-05-05  2005-04-01           NA #> 665  2003-05-05  2005-05-01           NA #> 666  2003-05-05  2005-06-01           NA #> 667  2003-05-05  2005-07-01           NA #> 668  2003-05-05  2005-08-01           NA #> 669  2003-05-05  2005-09-01           NA #> 670  2003-05-05  2005-10-01           NA #> 671  2003-05-05  2005-11-01           NA #> 672  2003-05-05  2005-12-01           NA #> 673  2003-05-05  2006-01-01           NA #> 674  2003-05-05  2006-02-01           NA #> 675  2003-05-05  2006-03-01           NA #> 676  2003-05-05  2006-04-01           NA #> 677  2003-05-05  2006-05-01           NA #> 678  2003-05-05  2006-06-01           NA #> 679  2003-05-05  2006-07-01           NA #> 680  2003-05-05  2006-08-01           NA #> 681  2003-05-05  2006-09-01           NA #> 682  2003-05-05  2006-10-01           NA #> 683  2003-05-05  2006-11-01           NA #> 684  2003-05-05  2006-12-01           NA #> 685  2003-05-05  2007-01-01           NA #> 686  2003-05-05  2007-02-01           NA #> 687  2003-05-05  2007-03-01           NA #> 688  2003-05-05  2007-04-01           NA #> 689  2003-05-05  2007-05-01           NA #> 690  2003-05-05  2007-06-01           NA #> 691  2003-05-05  2007-07-01           NA #> 692  2003-05-05  2007-08-01           NA #> 693  2003-05-05  2007-09-01           NA #> 694  2003-05-05  2007-10-01           NA #> 695  2003-05-05  2007-11-01           NA #> 696  2003-05-05  2007-12-01           NA #> 697  2003-05-05  2008-01-01           NA #> 698  2003-05-05  2008-02-01           NA #> 699  2003-05-05  2008-03-01           NA #> 700  2003-05-05  2008-04-01           NA #> 701  2003-05-05  2008-05-01           NA #> 702  2003-05-05  2008-06-01           NA #> 703  2003-05-05  2008-07-01           NA #> 704  2003-05-05  2008-08-01           NA #> 705  2003-05-05  2008-09-01           NA #> 706  2003-05-05  2008-10-01           NA #> 707  2003-05-05  2008-11-01           NA #> 708  2003-05-05  2008-12-01           NA #> 709  2003-05-05  2009-01-01           NA #> 710  2003-05-05  2009-02-01           NA #> 711  2003-05-05  2009-03-01           NA #> 712  2003-05-05  2009-04-01           NA #> 713  2003-05-05  2009-05-01           NA #> 714  2003-05-05  2009-06-01           NA #> 715  2003-05-05  2009-07-01           NA #> 716  2003-05-05  2009-08-01           NA #> 717  2003-05-05  2009-09-01           NA #> 718  2003-05-05  2009-10-01           NA #> 719  2003-05-05  2009-11-01           NA #> 720  2003-05-05  2009-12-01           NA #> 721  2006-09-16  2000-01-01    8.9188613 #> 722  2006-09-16  2000-02-01    8.8804674 #> 723  2006-09-16  2000-03-01   10.1675888 #> 724  2006-09-16  2000-04-01    9.6829918 #> 725  2006-09-16  2000-05-01    8.6558688 #> 726  2006-09-16  2000-06-01    8.6575108 #> 727  2006-09-16  2000-07-01   18.1801388 #> 728  2006-09-16  2000-08-01   20.6853626 #> 729  2006-09-16  2000-09-01   22.8658534 #> 730  2006-09-16  2000-10-01   23.5365968 #> 731  2006-09-16  2000-11-01   20.9347216 #> 732  2006-09-16  2000-12-01   14.5446179 #> 733  2006-09-16  2001-01-01   13.3884978 #> 734  2006-09-16  2001-02-01   15.0239753 #> 735  2006-09-16  2001-03-01   17.1817629 #> 736  2006-09-16  2001-04-01   15.2095428 #> 737  2006-09-16  2001-05-01   12.4668751 #> 738  2006-09-16  2001-06-01   11.5727077 #> 739  2006-09-16  2001-07-01   17.9915338 #> 740  2006-09-16  2001-08-01   16.3829906 #> 741  2006-09-16  2001-09-01   14.6943889 #> 742  2006-09-16  2001-10-01   16.8505673 #> 743  2006-09-16  2001-11-01   15.4541660 #> 744  2006-09-16  2001-12-01    8.7731531 #> 745  2006-09-16  2002-01-01    2.5749213 #> 746  2006-09-16  2002-02-01    5.7872708 #> 747  2006-09-16  2002-03-01    6.8976243 #> 748  2006-09-16  2002-04-01    4.8697538 #> 749  2006-09-16  2002-05-01    1.6479556 #> 750  2006-09-16  2002-06-01    4.3649719 #> 751  2006-09-16  2002-07-01   15.4636240 #> 752  2006-09-16  2002-08-01   17.0159728 #> 753  2006-09-16  2002-09-01   14.8633943 #> 754  2006-09-16  2002-10-01   14.6839769 #> 755  2006-09-16  2002-11-01   12.4591797 #> 756  2006-09-16  2002-12-01    2.3394551 #> 757  2006-09-16  2003-01-01   -8.5505494 #> 758  2006-09-16  2003-02-01   -8.7196482 #> 759  2006-09-16  2003-03-01  -12.1595647 #> 760  2006-09-16  2003-04-01  -18.1274887 #> 761  2006-09-16  2003-05-01  -24.2330342 #> 762  2006-09-16  2003-06-01  -21.1388305 #> 763  2006-09-16  2003-07-01   -8.3233460 #> 764  2006-09-16  2003-08-01  -11.8610463 #> 765  2006-09-16  2003-09-01   -9.8991862 #> 766  2006-09-16  2003-10-01  -10.4968087 #> 767  2006-09-16  2003-11-01  -16.3120094 #> 768  2006-09-16  2003-12-01  -26.9261001 #> 769  2006-09-16  2004-01-01  -38.5711344 #> 770  2006-09-16  2004-02-01  -42.3829194 #> 771  2006-09-16  2004-03-01  -37.9603440 #> 772  2006-09-16  2004-04-01  -44.7219655 #> 773  2006-09-16  2004-05-01  -48.4708385 #> 774  2006-09-16  2004-06-01  -44.2595139 #> 775  2006-09-16  2004-07-01  -36.8111911 #> 776  2006-09-16  2004-08-01  -28.9024750 #> 777  2006-09-16  2004-09-01  -33.8747097 #> 778  2006-09-16  2004-10-01  -34.7554627 #> 779  2006-09-16  2004-11-01  -30.3821936 #> 780  2006-09-16  2004-12-01  -43.0327483 #> 781  2006-09-16  2005-01-01  -49.7280334 #> 782  2006-09-16  2005-02-01  -57.7194069 #> 783  2006-09-16  2005-03-01  -55.4349422 #> 784  2006-09-16  2005-04-01  -68.2251267 #> 785  2006-09-16  2005-05-01  -72.1165245 #> 786  2006-09-16  2005-06-01  -63.2082800 #> 787  2006-09-16  2005-07-01  -55.7317355 #> 788  2006-09-16  2005-08-01  -54.1763147 #> 789  2006-09-16  2005-09-01  -57.7222325 #> 790  2006-09-16  2005-10-01  -53.5353953 #> 791  2006-09-16  2005-11-01  -58.6193272 #> 792  2006-09-16  2005-12-01  -71.8045921 #> 793  2006-09-16  2006-01-01  -81.0846944 #> 794  2006-09-16  2006-02-01  -79.1531016 #> 795  2006-09-16  2006-03-01  -83.1792308 #> 796  2006-09-16  2006-04-01  -90.2019506 #> 797  2006-09-16  2006-05-01  -94.3144357 #> 798  2006-09-16  2006-06-01  -84.3858117 #> 799  2006-09-16  2006-07-01  -79.2591987 #> 800  2006-09-16  2006-08-01  -74.5382775 #> 801  2006-09-16  2006-09-01  -75.7361771 #> 802  2006-09-16  2006-10-01           NA #> 803  2006-09-16  2006-11-01           NA #> 804  2006-09-16  2006-12-01           NA #> 805  2006-09-16  2007-01-01           NA #> 806  2006-09-16  2007-02-01           NA #> 807  2006-09-16  2007-03-01           NA #> 808  2006-09-16  2007-04-01           NA #> 809  2006-09-16  2007-05-01           NA #> 810  2006-09-16  2007-06-01           NA #> 811  2006-09-16  2007-07-01           NA #> 812  2006-09-16  2007-08-01           NA #> 813  2006-09-16  2007-09-01           NA #> 814  2006-09-16  2007-10-01           NA #> 815  2006-09-16  2007-11-01           NA #> 816  2006-09-16  2007-12-01           NA #> 817  2006-09-16  2008-01-01           NA #> 818  2006-09-16  2008-02-01           NA #> 819  2006-09-16  2008-03-01           NA #> 820  2006-09-16  2008-04-01           NA #> 821  2006-09-16  2008-05-01           NA #> 822  2006-09-16  2008-06-01           NA #> 823  2006-09-16  2008-07-01           NA #> 824  2006-09-16  2008-08-01           NA #> 825  2006-09-16  2008-09-01           NA #> 826  2006-09-16  2008-10-01           NA #> 827  2006-09-16  2008-11-01           NA #> 828  2006-09-16  2008-12-01           NA #> 829  2006-09-16  2009-01-01           NA #> 830  2006-09-16  2009-02-01           NA #> 831  2006-09-16  2009-03-01           NA #> 832  2006-09-16  2009-04-01           NA #> 833  2006-09-16  2009-05-01           NA #> 834  2006-09-16  2009-06-01           NA #> 835  2006-09-16  2009-07-01           NA #> 836  2006-09-16  2009-08-01           NA #> 837  2006-09-16  2009-09-01           NA #> 838  2006-09-16  2009-10-01           NA #> 839  2006-09-16  2009-11-01           NA #> 840  2006-09-16  2009-12-01           NA #> 841  2007-01-30  2000-01-01    8.9505825 #> 842  2007-01-30  2000-02-01    8.9285596 #> 843  2007-01-30  2000-03-01   10.1423122 #> 844  2007-01-30  2000-04-01    9.7012738 #> 845  2007-01-30  2000-05-01    8.6374704 #> 846  2007-01-30  2000-06-01    8.6525172 #> 847  2007-01-30  2000-07-01   18.0988158 #> 848  2007-01-30  2000-08-01   20.6899234 #> 849  2007-01-30  2000-09-01   22.7251017 #> 850  2007-01-30  2000-10-01   23.5832363 #> 851  2007-01-30  2000-11-01   21.0853043 #> 852  2007-01-30  2000-12-01   14.6783062 #> 853  2007-01-30  2001-01-01   13.3844642 #> 854  2007-01-30  2001-02-01   14.9469049 #> 855  2007-01-30  2001-03-01   17.1693925 #> 856  2007-01-30  2001-04-01   15.2498092 #> 857  2007-01-30  2001-05-01   12.2812429 #> 858  2007-01-30  2001-06-01   11.8551555 #> 859  2007-01-30  2001-07-01   18.1660921 #> 860  2007-01-30  2001-08-01   16.1176822 #> 861  2007-01-30  2001-09-01   14.8820244 #> 862  2007-01-30  2001-10-01   16.9394516 #> 863  2007-01-30  2001-11-01   15.4202180 #> 864  2007-01-30  2001-12-01    8.5378551 #> 865  2007-01-30  2002-01-01    2.7258260 #> 866  2007-01-30  2002-02-01    5.3958077 #> 867  2007-01-30  2002-03-01    7.2508771 #> 868  2007-01-30  2002-04-01    5.2589221 #> 869  2007-01-30  2002-05-01    1.9749081 #> 870  2007-01-30  2002-06-01    4.3628816 #> 871  2007-01-30  2002-07-01   15.4924063 #> 872  2007-01-30  2002-08-01   17.1356260 #> 873  2007-01-30  2002-09-01   14.5148081 #> 874  2007-01-30  2002-10-01   14.5810475 #> 875  2007-01-30  2002-11-01   12.3246428 #> 876  2007-01-30  2002-12-01    2.6889832 #> 877  2007-01-30  2003-01-01   -9.2885149 #> 878  2007-01-30  2003-02-01   -9.5086392 #> 879  2007-01-30  2003-03-01  -10.5506151 #> 880  2007-01-30  2003-04-01  -20.6341374 #> 881  2007-01-30  2003-05-01  -23.8763816 #> 882  2007-01-30  2003-06-01  -19.3075498 #> 883  2007-01-30  2003-07-01   -9.4213890 #> 884  2007-01-30  2003-08-01   -8.2118463 #> 885  2007-01-30  2003-09-01  -11.3324332 #> 886  2007-01-30  2003-10-01  -10.7130147 #> 887  2007-01-30  2003-11-01  -14.7206288 #> 888  2007-01-30  2003-12-01  -25.9473696 #> 889  2007-01-30  2004-01-01  -37.9021760 #> 890  2007-01-30  2004-02-01  -39.4569341 #> 891  2007-01-30  2004-03-01  -37.9472163 #> 892  2007-01-30  2004-04-01  -45.1104900 #> 893  2007-01-30  2004-05-01  -47.6943152 #> 894  2007-01-30  2004-06-01  -44.9491835 #> 895  2007-01-30  2004-07-01  -34.2229088 #> 896  2007-01-30  2004-08-01  -32.3779948 #> 897  2007-01-30  2004-09-01  -32.9498281 #> 898  2007-01-30  2004-10-01  -30.1349526 #> 899  2007-01-30  2004-11-01  -32.9051297 #> 900  2007-01-30  2004-12-01  -42.2521374 #> 901  2007-01-30  2005-01-01  -57.2947715 #> 902  2007-01-30  2005-02-01  -54.6497765 #> 903  2007-01-30  2005-03-01  -55.9451404 #> 904  2007-01-30  2005-04-01  -65.6009420 #> 905  2007-01-30  2005-05-01  -70.0595960 #> 906  2007-01-30  2005-06-01  -62.2129834 #> 907  2007-01-30  2005-07-01  -55.7064994 #> 908  2007-01-30  2005-08-01  -55.4326024 #> 909  2007-01-30  2005-09-01  -55.5567128 #> 910  2007-01-30  2005-10-01  -56.0280327 #> 911  2007-01-30  2005-11-01  -60.3271156 #> 912  2007-01-30  2005-12-01  -70.0165622 #> 913  2007-01-30  2006-01-01  -80.2891569 #> 914  2007-01-30  2006-02-01  -80.8995033 #> 915  2007-01-30  2006-03-01  -82.5828857 #> 916  2007-01-30  2006-04-01  -92.8807909 #> 917  2007-01-30  2006-05-01  -91.0818848 #> 918  2007-01-30  2006-06-01  -84.6820652 #> 919  2007-01-30  2006-07-01  -75.3196880 #> 920  2007-01-30  2006-08-01  -77.2524746 #> 921  2007-01-30  2006-09-01  -80.4922663 #> 922  2007-01-30  2006-10-01  -73.8538739 #> 923  2007-01-30  2006-11-01  -79.3787266 #> 924  2007-01-30  2006-12-01  -86.9024514 #> 925  2007-01-30  2007-01-01  -88.9329925 #> 926  2007-01-30  2007-02-01           NA #> 927  2007-01-30  2007-03-01           NA #> 928  2007-01-30  2007-04-01           NA #> 929  2007-01-30  2007-05-01           NA #> 930  2007-01-30  2007-06-01           NA #> 931  2007-01-30  2007-07-01           NA #> 932  2007-01-30  2007-08-01           NA #> 933  2007-01-30  2007-09-01           NA #> 934  2007-01-30  2007-10-01           NA #> 935  2007-01-30  2007-11-01           NA #> 936  2007-01-30  2007-12-01           NA #> 937  2007-01-30  2008-01-01           NA #> 938  2007-01-30  2008-02-01           NA #> 939  2007-01-30  2008-03-01           NA #> 940  2007-01-30  2008-04-01           NA #> 941  2007-01-30  2008-05-01           NA #> 942  2007-01-30  2008-06-01           NA #> 943  2007-01-30  2008-07-01           NA #> 944  2007-01-30  2008-08-01           NA #> 945  2007-01-30  2008-09-01           NA #> 946  2007-01-30  2008-10-01           NA #> 947  2007-01-30  2008-11-01           NA #> 948  2007-01-30  2008-12-01           NA #> 949  2007-01-30  2009-01-01           NA #> 950  2007-01-30  2009-02-01           NA #> 951  2007-01-30  2009-03-01           NA #> 952  2007-01-30  2009-04-01           NA #> 953  2007-01-30  2009-05-01           NA #> 954  2007-01-30  2009-06-01           NA #> 955  2007-01-30  2009-07-01           NA #> 956  2007-01-30  2009-08-01           NA #> 957  2007-01-30  2009-09-01           NA #> 958  2007-01-30  2009-10-01           NA #> 959  2007-01-30  2009-11-01           NA #> 960  2007-01-30  2009-12-01           NA #> 961  2007-02-20  2000-01-01    8.9485692 #> 962  2007-02-20  2000-02-01    8.9323245 #> 963  2007-02-20  2000-03-01   10.1892601 #> 964  2007-02-20  2000-04-01    9.6993783 #> 965  2007-02-20  2000-05-01    8.6335701 #> 966  2007-02-20  2000-06-01    8.6899470 #> 967  2007-02-20  2000-07-01   18.1195545 #> 968  2007-02-20  2000-08-01   20.7728826 #> 969  2007-02-20  2000-09-01   22.7355286 #> 970  2007-02-20  2000-10-01   23.5003202 #> 971  2007-02-20  2000-11-01   20.9454541 #> 972  2007-02-20  2000-12-01   14.6441446 #> 973  2007-02-20  2001-01-01   13.4166610 #> 974  2007-02-20  2001-02-01   15.1482057 #> 975  2007-02-20  2001-03-01   17.1987188 #> 976  2007-02-20  2001-04-01   15.1533141 #> 977  2007-02-20  2001-05-01   12.3336200 #> 978  2007-02-20  2001-06-01   11.8106167 #> 979  2007-02-20  2001-07-01   18.1984152 #> 980  2007-02-20  2001-08-01   16.3307428 #> 981  2007-02-20  2001-09-01   14.7450610 #> 982  2007-02-20  2001-10-01   17.0881238 #> 983  2007-02-20  2001-11-01   15.4740165 #> 984  2007-02-20  2001-12-01    8.4086299 #> 985  2007-02-20  2002-01-01    2.5252991 #> 986  2007-02-20  2002-02-01    5.4483125 #> 987  2007-02-20  2002-03-01    7.1230988 #> 988  2007-02-20  2002-04-01    5.0959115 #> 989  2007-02-20  2002-05-01    1.8786272 #> 990  2007-02-20  2002-06-01    4.3310198 #> 991  2007-02-20  2002-07-01   15.4762608 #> 992  2007-02-20  2002-08-01   16.9640002 #> 993  2007-02-20  2002-09-01   14.2964542 #> 994  2007-02-20  2002-10-01   14.4469879 #> 995  2007-02-20  2002-11-01   12.5058704 #> 996  2007-02-20  2002-12-01    2.4897883 #> 997  2007-02-20  2003-01-01   -9.0220866 #> 998  2007-02-20  2003-02-01   -9.3990574 #> 999  2007-02-20  2003-03-01  -10.5337645 #> 1000 2007-02-20  2003-04-01  -20.4354160 #> 1001 2007-02-20  2003-05-01  -23.9217964 #> 1002 2007-02-20  2003-06-01  -19.8680474 #> 1003 2007-02-20  2003-07-01   -8.2014510 #> 1004 2007-02-20  2003-08-01   -7.3378950 #> 1005 2007-02-20  2003-09-01  -11.6741605 #> 1006 2007-02-20  2003-10-01  -10.0401065 #> 1007 2007-02-20  2003-11-01  -15.6422017 #> 1008 2007-02-20  2003-12-01  -27.7168452 #> 1009 2007-02-20  2004-01-01  -38.1923949 #> 1010 2007-02-20  2004-02-01  -38.6663158 #> 1011 2007-02-20  2004-03-01  -38.7029454 #> 1012 2007-02-20  2004-04-01  -47.1597908 #> 1013 2007-02-20  2004-05-01  -48.1047489 #> 1014 2007-02-20  2004-06-01  -44.6112000 #> 1015 2007-02-20  2004-07-01  -34.9955508 #> 1016 2007-02-20  2004-08-01  -32.5267793 #> 1017 2007-02-20  2004-09-01  -34.1305007 #> 1018 2007-02-20  2004-10-01  -31.5484597 #> 1019 2007-02-20  2004-11-01  -31.8353594 #> 1020 2007-02-20  2004-12-01  -42.6623573 #> 1021 2007-02-20  2005-01-01  -55.7046971 #> 1022 2007-02-20  2005-02-01  -55.6692824 #> 1023 2007-02-20  2005-03-01  -54.9908308 #> 1024 2007-02-20  2005-04-01  -66.3297526 #> 1025 2007-02-20  2005-05-01  -68.8912060 #> 1026 2007-02-20  2005-06-01  -64.0707359 #> 1027 2007-02-20  2005-07-01  -55.9242232 #> 1028 2007-02-20  2005-08-01  -55.3593071 #> 1029 2007-02-20  2005-09-01  -58.0067654 #> 1030 2007-02-20  2005-10-01  -55.2412372 #> 1031 2007-02-20  2005-11-01  -61.2675456 #> 1032 2007-02-20  2005-12-01  -69.9434180 #> 1033 2007-02-20  2006-01-01  -82.2501643 #> 1034 2007-02-20  2006-02-01  -80.9574425 #> 1035 2007-02-20  2006-03-01  -83.3562505 #> 1036 2007-02-20  2006-04-01  -94.5322596 #> 1037 2007-02-20  2006-05-01  -92.6081157 #> 1038 2007-02-20  2006-06-01  -84.6461431 #> 1039 2007-02-20  2006-07-01  -76.1881924 #> 1040 2007-02-20  2006-08-01  -76.0858187 #> 1041 2007-02-20  2006-09-01  -80.3890799 #> 1042 2007-02-20  2006-10-01  -74.4652471 #> 1043 2007-02-20  2006-11-01  -78.9827757 #> 1044 2007-02-20  2006-12-01  -82.9876132 #> 1045 2007-02-20  2007-01-01  -90.4129255 #> 1046 2007-02-20  2007-02-01  -89.1144428 #> 1047 2007-02-20  2007-03-01           NA #> 1048 2007-02-20  2007-04-01           NA #> 1049 2007-02-20  2007-05-01           NA #> 1050 2007-02-20  2007-06-01           NA #> 1051 2007-02-20  2007-07-01           NA #> 1052 2007-02-20  2007-08-01           NA #> 1053 2007-02-20  2007-09-01           NA #> 1054 2007-02-20  2007-10-01           NA #> 1055 2007-02-20  2007-11-01           NA #> 1056 2007-02-20  2007-12-01           NA #> 1057 2007-02-20  2008-01-01           NA #> 1058 2007-02-20  2008-02-01           NA #> 1059 2007-02-20  2008-03-01           NA #> 1060 2007-02-20  2008-04-01           NA #> 1061 2007-02-20  2008-05-01           NA #> 1062 2007-02-20  2008-06-01           NA #> 1063 2007-02-20  2008-07-01           NA #> 1064 2007-02-20  2008-08-01           NA #> 1065 2007-02-20  2008-09-01           NA #> 1066 2007-02-20  2008-10-01           NA #> 1067 2007-02-20  2008-11-01           NA #> 1068 2007-02-20  2008-12-01           NA #> 1069 2007-02-20  2009-01-01           NA #> 1070 2007-02-20  2009-02-01           NA #> 1071 2007-02-20  2009-03-01           NA #> 1072 2007-02-20  2009-04-01           NA #> 1073 2007-02-20  2009-05-01           NA #> 1074 2007-02-20  2009-06-01           NA #> 1075 2007-02-20  2009-07-01           NA #> 1076 2007-02-20  2009-08-01           NA #> 1077 2007-02-20  2009-09-01           NA #> 1078 2007-02-20  2009-10-01           NA #> 1079 2007-02-20  2009-11-01           NA #> 1080 2007-02-20  2009-12-01           NA #> 1081 2008-08-20  2000-01-01    8.9418699 #> 1082 2008-08-20  2000-02-01    8.9179926 #> 1083 2008-08-20  2000-03-01   10.1758631 #> 1084 2008-08-20  2000-04-01    9.6878576 #> 1085 2008-08-20  2000-05-01    8.6285203 #> 1086 2008-08-20  2000-06-01    8.6830018 #> 1087 2008-08-20  2000-07-01   18.1357670 #> 1088 2008-08-20  2000-08-01   20.7183519 #> 1089 2008-08-20  2000-09-01   22.7529956 #> 1090 2008-08-20  2000-10-01   23.5192447 #> 1091 2008-08-20  2000-11-01   20.9494190 #> 1092 2008-08-20  2000-12-01   14.5848968 #> 1093 2008-08-20  2001-01-01   13.4108002 #> 1094 2008-08-20  2001-02-01   15.0804676 #> 1095 2008-08-20  2001-03-01   17.2119563 #> 1096 2008-08-20  2001-04-01   15.1556821 #> 1097 2008-08-20  2001-05-01   12.3227011 #> 1098 2008-08-20  2001-06-01   11.7962029 #> 1099 2008-08-20  2001-07-01   18.1167739 #> 1100 2008-08-20  2001-08-01   16.2756429 #> 1101 2008-08-20  2001-09-01   14.7713041 #> 1102 2008-08-20  2001-10-01   17.1054041 #> 1103 2008-08-20  2001-11-01   15.5453222 #> 1104 2008-08-20  2001-12-01    8.5139872 #> 1105 2008-08-20  2002-01-01    2.6475355 #> 1106 2008-08-20  2002-02-01    5.4733321 #> 1107 2008-08-20  2002-03-01    7.2096911 #> 1108 2008-08-20  2002-04-01    5.2259190 #> 1109 2008-08-20  2002-05-01    1.9181633 #> 1110 2008-08-20  2002-06-01    4.2116271 #> 1111 2008-08-20  2002-07-01   15.4168330 #> 1112 2008-08-20  2002-08-01   17.0230965 #> 1113 2008-08-20  2002-09-01   14.3171605 #> 1114 2008-08-20  2002-10-01   14.4414206 #> 1115 2008-08-20  2002-11-01   12.5412656 #> 1116 2008-08-20  2002-12-01    2.5901622 #> 1117 2008-08-20  2003-01-01   -9.2350238 #> 1118 2008-08-20  2003-02-01   -9.4417107 #> 1119 2008-08-20  2003-03-01  -10.6177532 #> 1120 2008-08-20  2003-04-01  -20.3462598 #> 1121 2008-08-20  2003-05-01  -24.2452621 #> 1122 2008-08-20  2003-06-01  -19.8638110 #> 1123 2008-08-20  2003-07-01   -9.2164495 #> 1124 2008-08-20  2003-08-01   -7.8004436 #> 1125 2008-08-20  2003-09-01  -10.8301605 #> 1126 2008-08-20  2003-10-01   -9.9615383 #> 1127 2008-08-20  2003-11-01  -16.3181321 #> 1128 2008-08-20  2003-12-01  -26.6281359 #> 1129 2008-08-20  2004-01-01  -38.5473822 #> 1130 2008-08-20  2004-02-01  -39.8481982 #> 1131 2008-08-20  2004-03-01  -38.6805702 #> 1132 2008-08-20  2004-04-01  -47.0723516 #> 1133 2008-08-20  2004-05-01  -47.8913947 #> 1134 2008-08-20  2004-06-01  -43.7699340 #> 1135 2008-08-20  2004-07-01  -34.9191624 #> 1136 2008-08-20  2004-08-01  -32.8343075 #> 1137 2008-08-20  2004-09-01  -33.5111503 #> 1138 2008-08-20  2004-10-01  -30.8117610 #> 1139 2008-08-20  2004-11-01  -32.0057196 #> 1140 2008-08-20  2004-12-01  -42.7779249 #> 1141 2008-08-20  2005-01-01  -56.3099175 #> 1142 2008-08-20  2005-02-01  -56.1100614 #> 1143 2008-08-20  2005-03-01  -55.0289550 #> 1144 2008-08-20  2005-04-01  -66.2035791 #> 1145 2008-08-20  2005-05-01  -69.4954767 #> 1146 2008-08-20  2005-06-01  -63.6727974 #> 1147 2008-08-20  2005-07-01  -56.2236241 #> 1148 2008-08-20  2005-08-01  -54.3022751 #> 1149 2008-08-20  2005-09-01  -57.3346173 #> 1150 2008-08-20  2005-10-01  -54.9526459 #> 1151 2008-08-20  2005-11-01  -61.1934468 #> 1152 2008-08-20  2005-12-01  -70.1624304 #> 1153 2008-08-20  2006-01-01  -81.5260663 #> 1154 2008-08-20  2006-02-01  -80.7353928 #> 1155 2008-08-20  2006-03-01  -83.2501387 #> 1156 2008-08-20  2006-04-01  -93.9813049 #> 1157 2008-08-20  2006-05-01  -91.6693457 #> 1158 2008-08-20  2006-06-01  -83.9686294 #> 1159 2008-08-20  2006-07-01  -76.3230611 #> 1160 2008-08-20  2006-08-01  -75.5870039 #> 1161 2008-08-20  2006-09-01  -79.6759539 #> 1162 2008-08-20  2006-10-01  -75.3802836 #> 1163 2008-08-20  2006-11-01  -78.7750829 #> 1164 2008-08-20  2006-12-01  -81.8892443 #> 1165 2008-08-20  2007-01-01  -90.4385421 #> 1166 2008-08-20  2007-02-01  -92.3489131 #> 1167 2008-08-20  2007-03-01  -94.3827056 #> 1168 2008-08-20  2007-04-01 -108.1453363 #> 1169 2008-08-20  2007-05-01 -108.4648162 #> 1170 2008-08-20  2007-06-01 -100.5726838 #> 1171 2008-08-20  2007-07-01  -94.3907264 #> 1172 2008-08-20  2007-08-01  -88.6089785 #> 1173 2008-08-20  2007-09-01  -94.5939842 #> 1174 2008-08-20  2007-10-01  -89.0517181 #> 1175 2008-08-20  2007-11-01  -95.1198170 #> 1176 2008-08-20  2007-12-01  -98.6595420 #> 1177 2008-08-20  2008-01-01 -113.1058899 #> 1178 2008-08-20  2008-02-01 -115.8953050 #> 1179 2008-08-20  2008-03-01 -116.7315812 #> 1180 2008-08-20  2008-04-01 -129.6912702 #> 1181 2008-08-20  2008-05-01 -129.2837988 #> 1182 2008-08-20  2008-06-01 -126.1480479 #> 1183 2008-08-20  2008-07-01 -108.9602966 #> 1184 2008-08-20  2008-08-01 -107.9154801 #> 1185 2008-08-20  2008-09-01           NA #> 1186 2008-08-20  2008-10-01           NA #> 1187 2008-08-20  2008-11-01           NA #> 1188 2008-08-20  2008-12-01           NA #> 1189 2008-08-20  2009-01-01           NA #> 1190 2008-08-20  2009-02-01           NA #> 1191 2008-08-20  2009-03-01           NA #> 1192 2008-08-20  2009-04-01           NA #> 1193 2008-08-20  2009-05-01           NA #> 1194 2008-08-20  2009-06-01           NA #> 1195 2008-08-20  2009-07-01           NA #> 1196 2008-08-20  2009-08-01           NA #> 1197 2008-08-20  2009-09-01           NA #> 1198 2008-08-20  2009-10-01           NA #> 1199 2008-08-20  2009-11-01           NA #> 1200 2008-08-20  2009-12-01           NA simulate_long(periodicity = 4L, n_period = 5L * 4L) #>       rev_date time_period obs_values #> 1   2012-03-22  2012-01-01  7.5389662 #> 2   2012-03-22  2012-04-01         NA #> 3   2012-03-22  2012-07-01         NA #> 4   2012-03-22  2012-10-01         NA #> 5   2012-03-22  2013-01-01         NA #> 6   2012-03-22  2013-04-01         NA #> 7   2012-03-22  2013-07-01         NA #> 8   2012-03-22  2013-10-01         NA #> 9   2012-03-22  2014-01-01         NA #> 10  2012-03-22  2014-04-01         NA #> 11  2012-03-22  2014-07-01         NA #> 12  2012-03-22  2014-10-01         NA #> 13  2012-03-22  2015-01-01         NA #> 14  2012-03-22  2015-04-01         NA #> 15  2012-03-22  2015-07-01         NA #> 16  2012-03-22  2015-10-01         NA #> 17  2012-03-22  2016-01-01         NA #> 18  2012-03-22  2016-04-01         NA #> 19  2012-03-22  2016-07-01         NA #> 20  2012-03-22  2016-10-01         NA #> 21  2012-10-20  2012-01-01  7.6200653 #> 22  2012-10-20  2012-04-01  6.2506368 #> 23  2012-10-20  2012-07-01  6.6943746 #> 24  2012-10-20  2012-10-01  3.4590383 #> 25  2012-10-20  2013-01-01         NA #> 26  2012-10-20  2013-04-01         NA #> 27  2012-10-20  2013-07-01         NA #> 28  2012-10-20  2013-10-01         NA #> 29  2012-10-20  2014-01-01         NA #> 30  2012-10-20  2014-04-01         NA #> 31  2012-10-20  2014-07-01         NA #> 32  2012-10-20  2014-10-01         NA #> 33  2012-10-20  2015-01-01         NA #> 34  2012-10-20  2015-04-01         NA #> 35  2012-10-20  2015-07-01         NA #> 36  2012-10-20  2015-10-01         NA #> 37  2012-10-20  2016-01-01         NA #> 38  2012-10-20  2016-04-01         NA #> 39  2012-10-20  2016-07-01         NA #> 40  2012-10-20  2016-10-01         NA #> 41  2013-06-27  2012-01-01  8.7867737 #> 42  2013-06-27  2012-04-01  2.7659456 #> 43  2013-06-27  2012-07-01  4.8246224 #> 44  2013-06-27  2012-10-01  7.1791698 #> 45  2013-06-27  2013-01-01  3.2002974 #> 46  2013-06-27  2013-04-01 -2.3149020 #> 47  2013-06-27  2013-07-01         NA #> 48  2013-06-27  2013-10-01         NA #> 49  2013-06-27  2014-01-01         NA #> 50  2013-06-27  2014-04-01         NA #> 51  2013-06-27  2014-07-01         NA #> 52  2013-06-27  2014-10-01         NA #> 53  2013-06-27  2015-01-01         NA #> 54  2013-06-27  2015-04-01         NA #> 55  2013-06-27  2015-07-01         NA #> 56  2013-06-27  2015-10-01         NA #> 57  2013-06-27  2016-01-01         NA #> 58  2013-06-27  2016-04-01         NA #> 59  2013-06-27  2016-07-01         NA #> 60  2013-06-27  2016-10-01         NA #> 61  2013-10-12  2012-01-01  7.5938327 #> 62  2013-10-12  2012-04-01  3.5513198 #> 63  2013-10-12  2012-07-01  4.2826378 #> 64  2013-10-12  2012-10-01  7.5508450 #> 65  2013-10-12  2013-01-01  4.9155811 #> 66  2013-10-12  2013-04-01 -1.4812095 #> 67  2013-10-12  2013-07-01 -0.4138517 #> 68  2013-10-12  2013-10-01  5.4418192 #> 69  2013-10-12  2014-01-01         NA #> 70  2013-10-12  2014-04-01         NA #> 71  2013-10-12  2014-07-01         NA #> 72  2013-10-12  2014-10-01         NA #> 73  2013-10-12  2015-01-01         NA #> 74  2013-10-12  2015-04-01         NA #> 75  2013-10-12  2015-07-01         NA #> 76  2013-10-12  2015-10-01         NA #> 77  2013-10-12  2016-01-01         NA #> 78  2013-10-12  2016-04-01         NA #> 79  2013-10-12  2016-07-01         NA #> 80  2013-10-12  2016-10-01         NA #> 81  2014-07-11  2012-01-01  7.4537994 #> 82  2014-07-11  2012-04-01  3.4488859 #> 83  2014-07-11  2012-07-01  5.4325606 #> 84  2014-07-11  2012-10-01  6.8856976 #> 85  2014-07-11  2013-01-01  5.0074869 #> 86  2014-07-11  2013-04-01 -0.7184151 #> 87  2014-07-11  2013-07-01  4.0268167 #> 88  2014-07-11  2013-10-01  5.5803058 #> 89  2014-07-11  2014-01-01 15.2584405 #> 90  2014-07-11  2014-04-01  6.4926930 #> 91  2014-07-11  2014-07-01 14.0468546 #> 92  2014-07-11  2014-10-01         NA #> 93  2014-07-11  2015-01-01         NA #> 94  2014-07-11  2015-04-01         NA #> 95  2014-07-11  2015-07-01         NA #> 96  2014-07-11  2015-10-01         NA #> 97  2014-07-11  2016-01-01         NA #> 98  2014-07-11  2016-04-01         NA #> 99  2014-07-11  2016-07-01         NA #> 100 2014-07-11  2016-10-01         NA #> 101 2015-01-17  2012-01-01  7.5230657 #> 102 2015-01-17  2012-04-01  3.2885098 #> 103 2015-01-17  2012-07-01  5.0553310 #> 104 2015-01-17  2012-10-01  7.0034428 #> 105 2015-01-17  2013-01-01  4.6939378 #> 106 2015-01-17  2013-04-01 -1.5285112 #> 107 2015-01-17  2013-07-01  2.6542440 #> 108 2015-01-17  2013-10-01  4.5502650 #> 109 2015-01-17  2014-01-01 13.7713446 #> 110 2015-01-17  2014-04-01  8.0096020 #> 111 2015-01-17  2014-07-01 11.8449589 #> 112 2015-01-17  2014-10-01 13.5579305 #> 113 2015-01-17  2015-01-01 21.1686492 #> 114 2015-01-17  2015-04-01         NA #> 115 2015-01-17  2015-07-01         NA #> 116 2015-01-17  2015-10-01         NA #> 117 2015-01-17  2016-01-01         NA #> 118 2015-01-17  2016-04-01         NA #> 119 2015-01-17  2016-07-01         NA #> 120 2015-01-17  2016-10-01         NA #> 121 2015-04-19  2012-01-01  7.5161439 #> 122 2015-04-19  2012-04-01  3.2551815 #> 123 2015-04-19  2012-07-01  4.9063992 #> 124 2015-04-19  2012-10-01  6.8752469 #> 125 2015-04-19  2013-01-01  5.2444079 #> 126 2015-04-19  2013-04-01 -1.0032672 #> 127 2015-04-19  2013-07-01  2.8350578 #> 128 2015-04-19  2013-10-01  4.4698550 #> 129 2015-04-19  2014-01-01 12.6763970 #> 130 2015-04-19  2014-04-01  8.6735208 #> 131 2015-04-19  2014-07-01 13.0146266 #> 132 2015-04-19  2014-10-01 13.4587182 #> 133 2015-04-19  2015-01-01 22.3861675 #> 134 2015-04-19  2015-04-01 16.3046008 #> 135 2015-04-19  2015-07-01         NA #> 136 2015-04-19  2015-10-01         NA #> 137 2015-04-19  2016-01-01         NA #> 138 2015-04-19  2016-04-01         NA #> 139 2015-04-19  2016-07-01         NA #> 140 2015-04-19  2016-10-01         NA #> 141 2015-07-04  2012-01-01  7.4857824 #> 142 2015-07-04  2012-04-01  3.2281634 #> 143 2015-07-04  2012-07-01  4.8831335 #> 144 2015-07-04  2012-10-01  6.8860955 #> 145 2015-07-04  2013-01-01  5.3306764 #> 146 2015-07-04  2013-04-01 -0.9767971 #> 147 2015-07-04  2013-07-01  2.9170357 #> 148 2015-07-04  2013-10-01  5.0425035 #> 149 2015-07-04  2014-01-01 12.1445471 #> 150 2015-07-04  2014-04-01  7.8577880 #> 151 2015-07-04  2014-07-01 13.1549804 #> 152 2015-07-04  2014-10-01 13.6273019 #> 153 2015-07-04  2015-01-01 21.1347956 #> 154 2015-07-04  2015-04-01 19.8253969 #> 155 2015-07-04  2015-07-01 31.5590184 #> 156 2015-07-04  2015-10-01         NA #> 157 2015-07-04  2016-01-01         NA #> 158 2015-07-04  2016-04-01         NA #> 159 2015-07-04  2016-07-01         NA #> 160 2015-07-04  2016-10-01         NA #> 161 2015-11-12  2012-01-01  7.4895973 #> 162 2015-11-12  2012-04-01  3.2492438 #> 163 2015-11-12  2012-07-01  4.9006066 #> 164 2015-11-12  2012-10-01  6.8940515 #> 165 2015-11-12  2013-01-01  5.2436868 #> 166 2015-11-12  2013-04-01 -0.9880461 #> 167 2015-11-12  2013-07-01  2.8068248 #> 168 2015-11-12  2013-10-01  5.0648986 #> 169 2015-11-12  2014-01-01 12.0213229 #> 170 2015-11-12  2014-04-01  7.7599994 #> 171 2015-11-12  2014-07-01 12.8752784 #> 172 2015-11-12  2014-10-01 12.7091636 #> 173 2015-11-12  2015-01-01 21.7690174 #> 174 2015-11-12  2015-04-01 19.0836950 #> 175 2015-11-12  2015-07-01 28.5377334 #> 176 2015-11-12  2015-10-01 36.0847323 #> 177 2015-11-12  2016-01-01         NA #> 178 2015-11-12  2016-04-01         NA #> 179 2015-11-12  2016-07-01         NA #> 180 2015-11-12  2016-10-01         NA #> 181 2016-08-01  2012-01-01  7.4802191 #> 182 2016-08-01  2012-04-01  3.2436383 #> 183 2016-08-01  2012-07-01  4.8787959 #> 184 2016-08-01  2012-10-01  6.8913382 #> 185 2016-08-01  2013-01-01  5.2391707 #> 186 2016-08-01  2013-04-01 -1.0038377 #> 187 2016-08-01  2013-07-01  2.8709875 #> 188 2016-08-01  2013-10-01  4.9879681 #> 189 2016-08-01  2014-01-01 12.0011741 #> 190 2016-08-01  2014-04-01  7.8127034 #> 191 2016-08-01  2014-07-01 12.6401072 #> 192 2016-08-01  2014-10-01 13.2430561 #> 193 2016-08-01  2015-01-01 21.2405030 #> 194 2016-08-01  2015-04-01 18.5346740 #> 195 2016-08-01  2015-07-01 29.5978929 #> 196 2016-08-01  2015-10-01 30.1398792 #> 197 2016-08-01  2016-01-01 35.2946148 #> 198 2016-08-01  2016-04-01 26.4815379 #> 199 2016-08-01  2016-07-01 34.0849749 #> 200 2016-08-01  2016-10-01         NA"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":null,"dir":"Reference","previous_headings":"","what":"Slope and Drift — slope_and_drift","title":"Slope and Drift — slope_and_drift","text":"Linear regression model latter vintage (L) preliminary vintage (P)","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slope and Drift — slope_and_drift","text":"","code":"slope_and_drift(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slope and Drift — slope_and_drift","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/slope_and_drift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slope and Drift — slope_and_drift","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) slope_and_drift(vintages[[\"diagonal_view\"]]) #>             N        R2         F intercept.estimate intercept.stderr #> Release[2] 30 0.9582096  642.0096         2.38012100        1.0109255 #> Release[3] 29 0.9877298 2173.4588         0.09727184        0.6110874 #> Release[4] 27 0.9970934 8575.9841        -0.09147092        0.3134805 #> Release[5]  7 0.9987433 3973.7494        -0.07546477        0.2618083 #>            intercept.pvalue slope.estimate slope.stderr slope.pvalue   skewness #> Release[2]       0.02579832      0.9158434   0.03614518   0.02734305 -0.1103667 #> Release[3]       0.87471316      1.0058199   0.02157469   0.78939966 -0.7141803 #> Release[4]       0.77285373      0.9983005   0.01078001   0.87600007 -0.1302344 #> Release[5]       0.78472634      0.9983556   0.01583744   0.92134195  0.3942945 #>              kurtosis JarqueBera.value JarqueBera.pvalue BreuschPagan.R2 #> Release[2] -0.2758592        0.1508260         0.9273604     0.005063969 #> Release[3]  0.3052164        2.4889330         0.2880946     0.022796382 #> Release[4] -0.9212259        0.9928762         0.6086949     0.078338705 #> Release[5] -2.0722253        1.2289976         0.5409119     0.006901294 #>            BreuschPagan.value BreuschPagan.pvalue   White.R2 White.value #> Release[2]         0.14251281           0.7086421 0.11607410  3.48222286 #> Release[3]         0.62986087           0.4343262 0.09507711  2.75723624 #> Release[4]         2.12493206           0.1573676 0.09411348  2.54106406 #> Release[5]         0.03474626           0.8594553 0.01384836  0.09693853 #>            White.pvalue     arch.R2 arch.value arch.pvalue #> Release[2]    0.1753254 0.034419904  0.9981772   0.3177520 #> Release[3]    0.2519264 0.003325625  0.0931175   0.7602507 #> Release[4]    0.2806823 0.045597249  1.1855285   0.2762334 #> Release[5]    0.9526866 0.236467682  1.4188061   0.2336000"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_revisions\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_revisions' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_revisions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_revisions\". ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","title":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","text":"Summary function objects class rjd3rev_rslts","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","text":"","code":"# S3 method for class 'rjd3rev_rslts' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_rslts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class rjd3rev_rslts — summary.rjd3rev_rslts","text":"object object class rjd3rev_rslts ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary function for objects of class ","title":"Summary function for objects of class ","text":"Summary function objects class \"rjd3rev_vintages\"","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary function for objects of class ","text":"","code":"# S3 method for class 'rjd3rev_vintages' summary(object, ...)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/summary.rjd3rev_vintages.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary function for objects of class ","text":"object object class \"rjd3rev_vintages\". ... arguments passed methods.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U1 — theil","title":"Theil's Inequality Coefficient U1 — theil","text":"Theil's Inequality Coefficient U1","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"theil(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U1 — theil","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U1 — theil","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4) theil(vintages[[\"diagonal_view\"]]) #> [1] 0.04264977 0.02906778 0.01655280 0.01309484"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":null,"dir":"Reference","previous_headings":"","what":"Theil's Inequality Coefficient U2 — theil2","title":"Theil's Inequality Coefficient U2 — theil2","text":"Theil's Inequality Coefficient U2","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"theil2(vintages.view, gap = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theil's Inequality Coefficient U2 — theil2","text":"vintages.view mts object. Vertical diagonal view create_vintages() output gap Integer. Gap consider vintages. Default 1 means revisions calculated tested vintages consecutively.. na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/theil2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theil's Inequality Coefficient U2 — theil2","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4) theil2(vintages[[\"diagonal_view\"]]) #> [1] 0.57329573 0.31772541 0.18598189 0.08685483"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":null,"dir":"Reference","previous_headings":"","what":"Unit root test — unitroot","title":"Unit root test — unitroot","text":"Unit root test","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unit root test — unitroot","text":"","code":"unitroot(vintages.view, adfk = 1, na.zero = FALSE)"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unit root test — unitroot","text":"vintages.view mts object. Vertical diagonal view create_vintages() output adfk Number lags consider Augmented Dicky-Fuller (ADF) test na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/reference/unitroot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unit root test — unitroot","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) unitroot(vintages[[\"diagonal_view\"]]) #>             DF.value  DF.stderr DF.statistic DF.pvalue ADF.value ADF.stderr #> Release[1] 1.0328634 0.07377414    0.4454601 0.8011735  1.061959 0.08698220 #> Release[2] 1.0615015 0.07152490    0.8598613 0.8898221  1.063526 0.08027818 #> Release[3] 1.1812444 0.15000615    1.2082466 0.9369958  1.172373 0.18283643 #> Release[4] 0.6664229 0.38438941   -0.8678102 0.3169076  1.148419        NaN #> Release[5] 0.0000000 0.00000000    0.0000000 0.0000000  0.000000 0.00000000 #>            ADF.statistic ADF.pvalue  DFCT.value DFCT.stderr DFCT.statistic #> Release[1]     0.7123188  0.8625823  0.02087265   0.2356117      -4.155682 #> Release[2]     0.7913275  0.8776692  0.19382245   0.2416421      -3.336247 #> Release[3]     0.9427727  0.9025676  0.10492444   0.3778558      -2.368829 #> Release[4]           NaN        NaN -2.48545171         NaN            NaN #> Release[5]     0.0000000  0.0000000  0.00000000   0.0000000       0.000000 #>            DFCT.pvalue  PP.value  PP.stderr PP.statistic PP.pvalue #> Release[1]  0.01774043 1.0328634 0.07377414    1.0795272 0.9225114 #> Release[2]  0.08614630 1.0615015 0.07152490    1.3952913 0.9551763 #> Release[3]  0.40523727 1.1812444 0.15000615    1.3147827 0.9475635 #> Release[4]         NaN 0.6664229 0.38438941   -0.8704289 0.3159075 #> Release[5]  0.00000000 0.0000000 0.00000000    0.0000000 0.0000000"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector error correction model (VECM) — vecm","title":"Vector error correction model (VECM) — vecm","text":"Can lead better understanding nature nonstationary process among different component series.","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector error correction model (VECM) — vecm","text":"","code":"vecm(   vintages.view,   lag = 2,   model = c(\"none\", \"cnt\", \"trend\"),   na.zero = FALSE )"},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector error correction model (VECM) — vecm","text":"vintages.view mts object. Vertical diagonal view create_vintages() output lag Number lags model Character. Must \"none\" (default), \"cnt\" \"trend\". na.zero Boolean whether missing values considered 0 rather data (yet) available (default).","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/reference/vecm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector error correction model (VECM) — vecm","text":"","code":"## Simulated data df_long <- simulate_long(     n_period = 10L * 4L,     n_revision = 5L,     periodicity = 4L,     start_period = as.Date(\"2010-01-01\") )  ## Create vintage and test vintages <- create_vintages(df_long, periodicity = 4L) vecm(vintages[[\"diagonal_view\"]]) #>                            trace(2)  trace(1)    max(2)    max(1) #> [Release[1]]_[Release[2]] 6.6909224 19.041196 6.6909224 12.350273 #> [Release[1]]_[Release[3]] 1.3597393 12.174505 1.3597393 10.814766 #> [Release[1]]_[Release[4]] 3.3051576 12.162728 3.3051576  8.857570 #> [Release[1]]_[Release[5]] 1.0324828  9.401064 1.0324828  8.368581 #> [Release[2]]_[Release[3]] 3.9989639 17.162561 3.9989639 13.163597 #> [Release[2]]_[Release[4]] 4.7018434 17.827830 4.7018434 13.125986 #> [Release[2]]_[Release[5]] 1.1038851 14.569560 1.1038851 13.465675 #> [Release[3]]_[Release[4]] 3.2701793 13.843195 3.2701793 10.573016 #> [Release[3]]_[Release[5]] 1.0924880 15.748867 1.0924880 14.656379 #> [Release[4]]_[Release[5]] 0.7348546 11.173550 0.7348546 10.438696"},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"rjd3revisions-1409000","dir":"Changelog","previous_headings":"","what":"rjd3revisions 1.4.0.9000","title":"rjd3revisions 1.4.0.9000","text":"notable changes project documented file. format based Keep Changelog, project adheres Semantic Versioning.","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000","dir":"Changelog","previous_headings":"Unreleased","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"param seed function simulate_long() add reproductibility function","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000-1","dir":"Changelog","previous_headings":"1.4.0 - 2024-08-21","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"user-defined thresholds tests assessment possibility add plot revisions report New View(), summary() print() method visualize revision analysis","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"changed-1-4-0-9000","dir":"Changelog","previous_headings":"1.4.0 - 2024-08-21","what":"Changed","title":"rjd3revisions 1.4.0.9000","text":"pivot {formattable} dependency {flextable} build tables simulate_long() now exported function construct datasets example","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"fixed-1-4-0-9000","dir":"Changelog","previous_headings":"1.4.0 - 2024-08-21","what":"Fixed","title":"rjd3revisions 1.4.0.9000","text":"solve display glitch diagonal view functions print.rjd3rev_vintages() print.rjd3rev_revisions()","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000-2","dir":"Changelog","previous_headings":"1.3.2 - 2024-07-10","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"new functions visualise vintages method View() plot()","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"changed-1-4-0-9000-1","dir":"Changelog","previous_headings":"1.3.2 - 2024-07-10","what":"Changed","title":"rjd3revisions 1.4.0.9000","text":"add linting code declare dependencies outside base remove wrong JARS","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"fixed-1-4-0-9000-1","dir":"Changelog","previous_headings":"1.3.2 - 2024-07-10","what":"Fixed","title":"rjd3revisions 1.4.0.9000","text":"resolved issues #32 removing useless code","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"fixed-1-4-0-9000-2","dir":"Changelog","previous_headings":"1.3.1 - 2024-04-22","what":"Fixed","title":"rjd3revisions 1.4.0.9000","text":"solve bug .Rd file function revision_analysis","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"changed-1-4-0-9000-2","dir":"Changelog","previous_headings":"1.3.0 - 2024-04-22","what":"Changed","title":"rjd3revisions 1.4.0.9000","text":"refactor function revision_analysis()","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"fixed-1-4-0-9000-3","dir":"Changelog","previous_headings":"1.3.0 - 2024-04-22","what":"Fixed","title":"rjd3revisions 1.4.0.9000","text":"solve bug create_vintages xlsx vertical horizontal view","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000-3","dir":"Changelog","previous_headings":"1.3.0 - 2024-04-22","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"generic functions associated create_vintages() get_revisions() better input visualisation","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"changed-1-4-0-9000-3","dir":"Changelog","previous_headings":"1.2.1 - 2024-04-12","what":"Changed","title":"rjd3revisions 1.4.0.9000","text":"refactor vignette","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"fixed-1-4-0-9000-4","dir":"Changelog","previous_headings":"1.2.1 - 2024-04-12","what":"Fixed","title":"rjd3revisions 1.4.0.9000","text":"solve bug create_vintages xlsx fixed render report","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000-4","dir":"Changelog","previous_headings":"1.2.1 - 2024-04-12","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"new date format accepted","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000-5","dir":"Changelog","previous_headings":"1.2.0 - 2024-04-11","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"new input accepted (vertical, horizontal) new functions check input format (check_XXX()) new functions convert input format another (from_XXX_to_XXX()) generate report pdf format new function simulate long format input data","code":""},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"changed-1-4-0-9000-4","dir":"Changelog","previous_headings":"1.2.0 - 2024-04-11","what":"Changed","title":"rjd3revisions 1.4.0.9000","text":"function create vintage accept different format input (vertical, horizontal long)","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"fixed-1-4-0-9000-5","dir":"Changelog","previous_headings":"1.1.0 - 2023-08-28","what":"Fixed","title":"rjd3revisions 1.4.0.9000","text":"bugs","code":""},{"path":[]},{"path":"https://rjdverse.github.io/rjd3revisions/news/index.html","id":"added-1-4-0-9000-6","dir":"Changelog","previous_headings":"1.0.0 - 2023-06-16","what":"Added","title":"rjd3revisions 1.4.0.9000","text":"Release based JD+_main : v3.0.2","code":""}]
